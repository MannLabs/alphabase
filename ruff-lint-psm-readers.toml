# specific ruff configuraton for the psm readers (which have stricter rules)
[lint]
select = [
    "ALL"
]

# TODO excluding explicity is not great but it is a workaround for now
exclude = [
    "**/*.ipynb",
    "**/tests/*",
    "setup.py",
    "docs/**",
    "test_*",
    "alphabase/__init__.py",
    "alphabase/*utils.py",
    "alphabase/gui.py",
    "alphabase/cli.py",
    "alphabase/quantification/*.py",
    "alphabase/smiles/*.py",
    "alphabase/protein/*.py",
    "alphabase/peptide/*.py",
    "alphabase/io/*.py",
    "alphabase/constants/*.py",
    "**/spectral_library/validate.py",
    "**/spectral_library/translate.py",
    "**/spectral_library/flat.py",
    "**/spectral_library/decoy.py",
    "**/spectral_library/base.py"
]

ignore = [
    #
    "PD002", #pandas-use-of-inplace-argument # TODO revisit

    # these still need to be resolved:
    "D",
    "N803", # argument name should be lowercase
    "FBT002", "FBT001", # Boolean default positional argument in function definition

    # reader-specific
    "FA100", # Add `from __future__ import annotations` to simplify `typing.Optional`

    # same as pyproject.toml
    "E501",  # Line too long  (ruff wraps code, but not docstrings)
    "B028",  #  No explicit `stacklevel` keyword argument found (for warnings)
    "B006", # Do not use mutable data structures for argument defaults # TODO: fix this!

    # some more sensible ignores
    "E501",  # Line too long  (ruff wraps code, but not docstrings)
    "B028",  #  No explicit `stacklevel` keyword argument found (for warnings)
    "COM812", #may cause conflicts when used with the formatter
    "ISC001", #may cause conflicts when used with the formatter
    "D211", # no-blank-line-before-class
    "D213", # multi-line-summary-second-line
    "S101", # Use of `assert` detected
    "INP001", # implicit namespace package.
    "ERA001", # Found commented-out code
    "D203", # 1 blank line required before class docstring
    "TD002", "TD003", "FIX002",  # things around TO-DO
    "PT011", #pytest.raises(ValueError) is too broad
    "G004", "EM102", # Logging statement uses f-string
    "TRY003", # Avoid specifying long messages outside the exception class
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs
    "FA102", # Missing `from __future__ import annotations
    "EM101", # Exception must not use a string literal, assign to variable first
    "D104", # Missing docstring in public package
    "ANN204", # Missing return type annotation for special method `__init__`
    "D401", # First line of docstring should be in imperative mood
    "B023", # Function definition does not bind loop variable
    "PD901", # Avoid using the generic variable name `df` for DataFrames"
    "TCH003" # Move standard library import into a type-checking block
]
