# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/alphabase',
                'doc_host': 'https://MannLabs.github.io',
                'git_url': 'https://github.com/MannLabs/alphabase',
                'lib_path': 'alphabase'},
  'syms': { 'alphabase.cli': {},
            'alphabase.constants.aa': { 'alphabase.constants.aa.calc_AA_masses_for_same_len_seqs': ( 'constants/aa.html#calc_aa_masses_for_same_len_seqs',
                                                                                                     'alphabase/constants/aa.py'),
                                        'alphabase.constants.aa.calc_AA_masses_for_var_len_seqs': ( 'constants/aa.html#calc_aa_masses_for_var_len_seqs',
                                                                                                    'alphabase/constants/aa.py'),
                                        'alphabase.constants.aa.calc_sequence_mass': ( 'constants/aa.html#calc_sequence_mass',
                                                                                       'alphabase/constants/aa.py'),
                                        'alphabase.constants.aa.calc_sequence_masses_for_same_len_seqs': ( 'constants/aa.html#calc_sequence_masses_for_same_len_seqs',
                                                                                                           'alphabase/constants/aa.py'),
                                        'alphabase.constants.aa.reset_AA_df': ( 'constants/aa.html#reset_aa_df',
                                                                                'alphabase/constants/aa.py'),
                                        'alphabase.constants.aa.reset_AA_mass': ( 'constants/aa.html#reset_aa_mass',
                                                                                  'alphabase/constants/aa.py')},
            'alphabase.constants.atom': {},
            'alphabase.constants.element': { 'alphabase.constants.element.calc_mass_from_formula': ( 'constants/element.html#calc_mass_from_formula',
                                                                                                     'alphabase/constants/element.py'),
                                             'alphabase.constants.element.load_elem_yaml': ( 'constants/element.html#load_elem_yaml',
                                                                                             'alphabase/constants/element.py'),
                                             'alphabase.constants.element.parse_formula': ( 'constants/element.html#parse_formula',
                                                                                            'alphabase/constants/element.py'),
                                             'alphabase.constants.element.reset_elements': ( 'constants/element.html#reset_elements',
                                                                                             'alphabase/constants/element.py'),
                                             'alphabase.constants.element.truncate_isotope': ( 'constants/element.html#truncate_isotope',
                                                                                               'alphabase/constants/element.py')},
            'alphabase.constants.isotope': { 'alphabase.constants.isotope.IsotopeDistribution': ( 'constants/isotope.html#isotopedistribution',
                                                                                                  'alphabase/constants/isotope.py'),
                                             'alphabase.constants.isotope.IsotopeDistribution.__init__': ( 'constants/isotope.html#__init__',
                                                                                                           'alphabase/constants/isotope.py'),
                                             'alphabase.constants.isotope.IsotopeDistribution.calc_formula_distribution': ( 'constants/isotope.html#calc_formula_distribution',
                                                                                                                            'alphabase/constants/isotope.py'),
                                             'alphabase.constants.isotope._calc_one_elem_cum_dist': ( 'constants/isotope.html#_calc_one_elem_cum_dist',
                                                                                                      'alphabase/constants/isotope.py'),
                                             'alphabase.constants.isotope.abundance_convolution': ( 'constants/isotope.html#abundance_convolution',
                                                                                                    'alphabase/constants/isotope.py'),
                                             'alphabase.constants.isotope.formula_dist': ( 'constants/isotope.html#formula_dist',
                                                                                           'alphabase/constants/isotope.py'),
                                             'alphabase.constants.isotope.one_element_dist': ( 'constants/isotope.html#one_element_dist',
                                                                                               'alphabase/constants/isotope.py')},
            'alphabase.constants.modification': { 'alphabase.constants.modification._calc_modloss': ( 'constants/modification.html#_calc_modloss',
                                                                                                      'alphabase/constants/modification.py'),
                                                  'alphabase.constants.modification._calc_modloss_with_importance': ( 'constants/modification.html#_calc_modloss_with_importance',
                                                                                                                      'alphabase/constants/modification.py'),
                                                  'alphabase.constants.modification.add_modifications_for_lower_case_AA': ( 'constants/modification.html#add_modifications_for_lower_case_aa',
                                                                                                                            'alphabase/constants/modification.py'),
                                                  'alphabase.constants.modification.add_new_modifications': ( 'constants/modification.html#add_new_modifications',
                                                                                                              'alphabase/constants/modification.py'),
                                                  'alphabase.constants.modification.calc_mod_masses_for_same_len_seqs': ( 'constants/modification.html#calc_mod_masses_for_same_len_seqs',
                                                                                                                          'alphabase/constants/modification.py'),
                                                  'alphabase.constants.modification.calc_modification_mass': ( 'constants/modification.html#calc_modification_mass',
                                                                                                               'alphabase/constants/modification.py'),
                                                  'alphabase.constants.modification.calc_modification_mass_sum': ( 'constants/modification.html#calc_modification_mass_sum',
                                                                                                                   'alphabase/constants/modification.py'),
                                                  'alphabase.constants.modification.calc_modloss_mass': ( 'constants/modification.html#calc_modloss_mass',
                                                                                                          'alphabase/constants/modification.py'),
                                                  'alphabase.constants.modification.calc_modloss_mass_with_importance': ( 'constants/modification.html#calc_modloss_mass_with_importance',
                                                                                                                          'alphabase/constants/modification.py'),
                                                  'alphabase.constants.modification.keep_modloss_by_importance': ( 'constants/modification.html#keep_modloss_by_importance',
                                                                                                                   'alphabase/constants/modification.py'),
                                                  'alphabase.constants.modification.load_mod_df': ( 'constants/modification.html#load_mod_df',
                                                                                                    'alphabase/constants/modification.py'),
                                                  'alphabase.constants.modification.update_all_by_MOD_DF': ( 'constants/modification.html#update_all_by_mod_df',
                                                                                                             'alphabase/constants/modification.py')},
            'alphabase.gui': {},
            'alphabase.io.hdf': {},
            'alphabase.io.psm_reader.alphapept_reader': {},
            'alphabase.io.psm_reader.dia_psm_reader': {},
            'alphabase.io.psm_reader.dia_search_reader': {},
            'alphabase.io.psm_reader.maxquant_reader': {},
            'alphabase.io.psm_reader.msfragger_reader': {},
            'alphabase.io.psm_reader.pfind_reader': {},
            'alphabase.io.psm_reader.psm_reader': {},
            'alphabase.io.tempmmap': {},
            'alphabase.peptide.fragment': { 'alphabase.peptide.fragment._parse_fragment_number_of_one_peptide': ( 'peptide/fragment.html#_parse_fragment_number_of_one_peptide',
                                                                                                                  'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.annotate_fragments_from_speclib': ( 'peptide/fragment.html#annotate_fragments_from_speclib',
                                                                                                            'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.calc_fragment_mz_values_for_same_nAA': ( 'peptide/fragment.html#calc_fragment_mz_values_for_same_naa',
                                                                                                                 'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.compress_fragment_indices': ( 'peptide/fragment.html#compress_fragment_indices',
                                                                                                      'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.concat_precursor_fragment_dataframes': ( 'peptide/fragment.html#concat_precursor_fragment_dataframes',
                                                                                                                 'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.create_fragment_mz_dataframe': ( 'peptide/fragment.html#create_fragment_mz_dataframe',
                                                                                                         'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.create_fragment_mz_dataframe_by_sort_precursor': ( 'peptide/fragment.html#create_fragment_mz_dataframe_by_sort_precursor',
                                                                                                                           'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.exclude_not_top_k': ( 'peptide/fragment.html#exclude_not_top_k',
                                                                                              'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.flatten_fragments': ( 'peptide/fragment.html#flatten_fragments',
                                                                                              'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.get_charged_frag_types': ( 'peptide/fragment.html#get_charged_frag_types',
                                                                                                   'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.get_sliced_fragment_dataframe': ( 'peptide/fragment.html#get_sliced_fragment_dataframe',
                                                                                                          'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.init_fragment_by_precursor_dataframe': ( 'peptide/fragment.html#init_fragment_by_precursor_dataframe',
                                                                                                                 'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.init_fragment_dataframe_from_other': ( 'peptide/fragment.html#init_fragment_dataframe_from_other',
                                                                                                               'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.init_zero_fragment_dataframe': ( 'peptide/fragment.html#init_zero_fragment_dataframe',
                                                                                                         'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.join_left': ( 'peptide/fragment.html#join_left',
                                                                                      'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.mask_fragments_for_charge_greater_than_precursor_charge': ( 'peptide/fragment.html#mask_fragments_for_charge_greater_than_precursor_charge',
                                                                                                                                    'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.parse_charged_frag_type': ( 'peptide/fragment.html#parse_charged_frag_type',
                                                                                                    'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.parse_fragment_numbers': ( 'peptide/fragment.html#parse_fragment_numbers',
                                                                                                   'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.parse_fragment_positions': ( 'peptide/fragment.html#parse_fragment_positions',
                                                                                                     'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.remove_unused_fragments': ( 'peptide/fragment.html#remove_unused_fragments',
                                                                                                    'alphabase/peptide/fragment.py'),
                                            'alphabase.peptide.fragment.update_sliced_fragment_dataframe': ( 'peptide/fragment.html#update_sliced_fragment_dataframe',
                                                                                                             'alphabase/peptide/fragment.py')},
            'alphabase.peptide.mass_calc': { 'alphabase.peptide.mass_calc.calc_b_y_and_peptide_mass': ( 'peptide/mass_calc.html#calc_b_y_and_peptide_mass',
                                                                                                        'alphabase/peptide/mass_calc.py'),
                                             'alphabase.peptide.mass_calc.calc_b_y_and_peptide_masses_for_same_len_seqs': ( 'peptide/mass_calc.html#calc_b_y_and_peptide_masses_for_same_len_seqs',
                                                                                                                            'alphabase/peptide/mass_calc.py'),
                                             'alphabase.peptide.mass_calc.calc_delta_modification_mass': ( 'peptide/mass_calc.html#calc_delta_modification_mass',
                                                                                                           'alphabase/peptide/mass_calc.py'),
                                             'alphabase.peptide.mass_calc.calc_mod_delta_masses_for_same_len_seqs': ( 'peptide/mass_calc.html#calc_mod_delta_masses_for_same_len_seqs',
                                                                                                                      'alphabase/peptide/mass_calc.py'),
                                             'alphabase.peptide.mass_calc.calc_peptide_masses_for_same_len_seqs': ( 'peptide/mass_calc.html#calc_peptide_masses_for_same_len_seqs',
                                                                                                                    'alphabase/peptide/mass_calc.py')},
            'alphabase.peptide.mobility': { 'alphabase.peptide.mobility.ccs_to_mobility_bruker': ( 'peptide/mobility.html#ccs_to_mobility_bruker',
                                                                                                   'alphabase/peptide/mobility.py'),
                                            'alphabase.peptide.mobility.ccs_to_mobility_for_df': ( 'peptide/mobility.html#ccs_to_mobility_for_df',
                                                                                                   'alphabase/peptide/mobility.py'),
                                            'alphabase.peptide.mobility.get_reduced_mass': ( 'peptide/mobility.html#get_reduced_mass',
                                                                                             'alphabase/peptide/mobility.py'),
                                            'alphabase.peptide.mobility.mobility_to_ccs_bruker': ( 'peptide/mobility.html#mobility_to_ccs_bruker',
                                                                                                   'alphabase/peptide/mobility.py'),
                                            'alphabase.peptide.mobility.mobility_to_ccs_for_df': ( 'peptide/mobility.html#mobility_to_ccs_for_df',
                                                                                                   'alphabase/peptide/mobility.py')},
            'alphabase.peptide.precursor': { 'alphabase.peptide.precursor._batchify_df': ( 'peptide/precursor.html#_batchify_df',
                                                                                           'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor._count_batchify_df': ( 'peptide/precursor.html#_count_batchify_df',
                                                                                                 'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.calc_precursor_isotope': ( 'peptide/precursor.html#calc_precursor_isotope',
                                                                                                     'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.calc_precursor_isotope_mp': ( 'peptide/precursor.html#calc_precursor_isotope_mp',
                                                                                                        'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.get_mod_seq_charge_hash': ( 'peptide/precursor.html#get_mod_seq_charge_hash',
                                                                                                      'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.get_mod_seq_formula': ( 'peptide/precursor.html#get_mod_seq_formula',
                                                                                                  'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.get_mod_seq_hash': ( 'peptide/precursor.html#get_mod_seq_hash',
                                                                                               'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.get_mod_seq_isotope_distribution': ( 'peptide/precursor.html#get_mod_seq_isotope_distribution',
                                                                                                               'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.get_right_most_isotope_offset': ( 'peptide/precursor.html#get_right_most_isotope_offset',
                                                                                                            'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.hash_mod_seq_charge_df': ( 'peptide/precursor.html#hash_mod_seq_charge_df',
                                                                                                     'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.hash_mod_seq_df': ( 'peptide/precursor.html#hash_mod_seq_df',
                                                                                              'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.hash_precursor_df': ( 'peptide/precursor.html#hash_precursor_df',
                                                                                                'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.is_precursor_refined': ( 'peptide/precursor.html#is_precursor_refined',
                                                                                                   'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.refine_precursor_df': ( 'peptide/precursor.html#refine_precursor_df',
                                                                                                  'alphabase/peptide/precursor.py'),
                                             'alphabase.peptide.precursor.update_precursor_mz': ( 'peptide/precursor.html#update_precursor_mz',
                                                                                                  'alphabase/peptide/precursor.py')},
            'alphabase.protein.fasta': { 'alphabase.protein.fasta.Digest': ('protein/fasta.html#digest', 'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.Digest.__init__': ( 'protein/fasta.html#__init__',
                                                                                      'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.Digest.cleave_sequence': ( 'protein/fasta.html#cleave_sequence',
                                                                                             'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib': ('protein/fasta.html#fastalib', 'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.__init__': ( 'protein/fasta.html#__init__',
                                                                                        'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib._check_if_multi_mods_on_aa': ( 'protein/fasta.html#_check_if_multi_mods_on_aa',
                                                                                                          'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib._cleave_to_peptides': ( 'protein/fasta.html#_cleave_to_peptides',
                                                                                                   'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib._process_after_load_pep_seqs': ( 'protein/fasta.html#_process_after_load_pep_seqs',
                                                                                                            'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.add_additional_modifications': ( 'protein/fasta.html#add_additional_modifications',
                                                                                                            'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.add_charge': ( 'protein/fasta.html#add_charge',
                                                                                          'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.add_modifications': ( 'protein/fasta.html#add_modifications',
                                                                                                 'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.add_mods_for_one_seq': ( 'protein/fasta.html#add_mods_for_one_seq',
                                                                                                    'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.add_peptide_labeling': ( 'protein/fasta.html#add_peptide_labeling',
                                                                                                    'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.append_protein_name': ( 'protein/fasta.html#append_protein_name',
                                                                                                   'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.get_peptides_from_fasta': ( 'protein/fasta.html#get_peptides_from_fasta',
                                                                                                       'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.get_peptides_from_fasta_list': ( 'protein/fasta.html#get_peptides_from_fasta_list',
                                                                                                            'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.get_peptides_from_peptide_sequence_list': ( 'protein/fasta.html#get_peptides_from_peptide_sequence_list',
                                                                                                                       'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.get_peptides_from_protein_dict': ( 'protein/fasta.html#get_peptides_from_protein_dict',
                                                                                                              'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.import_and_process_fasta': ( 'protein/fasta.html#import_and_process_fasta',
                                                                                                        'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.import_and_process_peptide_sequences': ( 'protein/fasta.html#import_and_process_peptide_sequences',
                                                                                                                    'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.import_and_process_protein_dict': ( 'protein/fasta.html#import_and_process_protein_dict',
                                                                                                               'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.load_hdf': ( 'protein/fasta.html#load_hdf',
                                                                                        'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.FastaLib.save_hdf': ( 'protein/fasta.html#save_hdf',
                                                                                        'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.add_single_peptide_labeling': ( 'protein/fasta.html#add_single_peptide_labeling',
                                                                                                  'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.append_regular_modifications': ( 'protein/fasta.html#append_regular_modifications',
                                                                                                   'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.cleave_sequence_with_cut_pos': ( 'protein/fasta.html#cleave_sequence_with_cut_pos',
                                                                                                   'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.concat_proteins': ( 'protein/fasta.html#concat_proteins',
                                                                                      'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.create_labeling_peptide_df': ( 'protein/fasta.html#create_labeling_peptide_df',
                                                                                                 'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.get_candidate_sites': ( 'protein/fasta.html#get_candidate_sites',
                                                                                          'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.get_fix_mods': ( 'protein/fasta.html#get_fix_mods',
                                                                                   'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.get_uniprot_gene_name': ( 'protein/fasta.html#get_uniprot_gene_name',
                                                                                            'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.get_var_mod_sites': ( 'protein/fasta.html#get_var_mod_sites',
                                                                                        'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.get_var_mods': ( 'protein/fasta.html#get_var_mods',
                                                                                   'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.get_var_mods_per_sites_multi_mods_on_aa': ( 'protein/fasta.html#get_var_mods_per_sites_multi_mods_on_aa',
                                                                                                              'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.get_var_mods_per_sites_single_mod_on_aa': ( 'protein/fasta.html#get_var_mods_per_sites_single_mod_on_aa',
                                                                                                              'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.load_all_proteins': ( 'protein/fasta.html#load_all_proteins',
                                                                                        'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.parse_labels': ( 'protein/fasta.html#parse_labels',
                                                                                   'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.parse_term_mod': ( 'protein/fasta.html#parse_term_mod',
                                                                                     'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.protein_idxes_to_names': ( 'protein/fasta.html#protein_idxes_to_names',
                                                                                             'alphabase/protein/fasta.py'),
                                         'alphabase.protein.fasta.read_fasta_file': ( 'protein/fasta.html#read_fasta_file',
                                                                                      'alphabase/protein/fasta.py')},
            'alphabase.protein.inference': {},
            'alphabase.protein.lcp_digest': {},
            'alphabase.psm_reader.alphapept_reader': { 'alphabase.psm_reader.alphapept_reader.AlphaPeptReader': ( 'psm_reader/alphapept_reader.html#alphapeptreader',
                                                                                                                  'alphabase/psm_reader/alphapept_reader.py'),
                                                       'alphabase.psm_reader.alphapept_reader.AlphaPeptReader.__init__': ( 'psm_reader/alphapept_reader.html#__init__',
                                                                                                                           'alphabase/psm_reader/alphapept_reader.py'),
                                                       'alphabase.psm_reader.alphapept_reader.AlphaPeptReader._init_column_mapping': ( 'psm_reader/alphapept_reader.html#_init_column_mapping',
                                                                                                                                       'alphabase/psm_reader/alphapept_reader.py'),
                                                       'alphabase.psm_reader.alphapept_reader.AlphaPeptReader._init_modification_mapping': ( 'psm_reader/alphapept_reader.html#_init_modification_mapping',
                                                                                                                                             'alphabase/psm_reader/alphapept_reader.py'),
                                                       'alphabase.psm_reader.alphapept_reader.AlphaPeptReader._load_file': ( 'psm_reader/alphapept_reader.html#_load_file',
                                                                                                                             'alphabase/psm_reader/alphapept_reader.py'),
                                                       'alphabase.psm_reader.alphapept_reader.AlphaPeptReader._load_modifications': ( 'psm_reader/alphapept_reader.html#_load_modifications',
                                                                                                                                      'alphabase/psm_reader/alphapept_reader.py'),
                                                       'alphabase.psm_reader.alphapept_reader.get_x_tandem_score': ( 'psm_reader/alphapept_reader.html#get_x_tandem_score',
                                                                                                                     'alphabase/psm_reader/alphapept_reader.py'),
                                                       'alphabase.psm_reader.alphapept_reader.parse_ap': ( 'psm_reader/alphapept_reader.html#parse_ap',
                                                                                                           'alphabase/psm_reader/alphapept_reader.py')},
            'alphabase.psm_reader.dia_psm_reader': { 'alphabase.psm_reader.dia_psm_reader.DiannReader': ( 'psm_reader/dia_psm_reader.html#diannreader',
                                                                                                          'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.DiannReader.__init__': ( 'psm_reader/dia_psm_reader.html#__init__',
                                                                                                                   'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.DiannReader._init_column_mapping': ( 'psm_reader/dia_psm_reader.html#_init_column_mapping',
                                                                                                                               'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.DiannReader._load_file': ( 'psm_reader/dia_psm_reader.html#_load_file',
                                                                                                                     'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.SpectronautReader': ( 'psm_reader/dia_psm_reader.html#spectronautreader',
                                                                                                                'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.SpectronautReader.__init__': ( 'psm_reader/dia_psm_reader.html#__init__',
                                                                                                                         'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.SpectronautReader._init_column_mapping': ( 'psm_reader/dia_psm_reader.html#_init_column_mapping',
                                                                                                                                     'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.SpectronautReader._load_file': ( 'psm_reader/dia_psm_reader.html#_load_file',
                                                                                                                           'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.SpectronautReportReader': ( 'psm_reader/dia_psm_reader.html#spectronautreportreader',
                                                                                                                      'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.SpectronautReportReader.__init__': ( 'psm_reader/dia_psm_reader.html#__init__',
                                                                                                                               'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.SpectronautReportReader._init_column_mapping': ( 'psm_reader/dia_psm_reader.html#_init_column_mapping',
                                                                                                                                           'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.SpectronautReportReader._load_file': ( 'psm_reader/dia_psm_reader.html#_load_file',
                                                                                                                                 'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.SwathReader': ( 'psm_reader/dia_psm_reader.html#swathreader',
                                                                                                          'alphabase/psm_reader/dia_psm_reader.py'),
                                                     'alphabase.psm_reader.dia_psm_reader.SwathReader.__init__': ( 'psm_reader/dia_psm_reader.html#__init__',
                                                                                                                   'alphabase/psm_reader/dia_psm_reader.py')},
            'alphabase.psm_reader.maxquant_reader': { 'alphabase.psm_reader.maxquant_reader.MaxQuantReader': ( 'psm_reader/maxquant_reader.html#maxquantreader',
                                                                                                               'alphabase/psm_reader/maxquant_reader.py'),
                                                      'alphabase.psm_reader.maxquant_reader.MaxQuantReader.__init__': ( 'psm_reader/maxquant_reader.html#__init__',
                                                                                                                        'alphabase/psm_reader/maxquant_reader.py'),
                                                      'alphabase.psm_reader.maxquant_reader.MaxQuantReader._extend_mod_brackets': ( 'psm_reader/maxquant_reader.html#_extend_mod_brackets',
                                                                                                                                    'alphabase/psm_reader/maxquant_reader.py'),
                                                      'alphabase.psm_reader.maxquant_reader.MaxQuantReader._find_mod_seq_column': ( 'psm_reader/maxquant_reader.html#_find_mod_seq_column',
                                                                                                                                    'alphabase/psm_reader/maxquant_reader.py'),
                                                      'alphabase.psm_reader.maxquant_reader.MaxQuantReader._init_column_mapping': ( 'psm_reader/maxquant_reader.html#_init_column_mapping',
                                                                                                                                    'alphabase/psm_reader/maxquant_reader.py'),
                                                      'alphabase.psm_reader.maxquant_reader.MaxQuantReader._init_modification_mapping': ( 'psm_reader/maxquant_reader.html#_init_modification_mapping',
                                                                                                                                          'alphabase/psm_reader/maxquant_reader.py'),
                                                      'alphabase.psm_reader.maxquant_reader.MaxQuantReader._load_file': ( 'psm_reader/maxquant_reader.html#_load_file',
                                                                                                                          'alphabase/psm_reader/maxquant_reader.py'),
                                                      'alphabase.psm_reader.maxquant_reader.MaxQuantReader._load_modifications': ( 'psm_reader/maxquant_reader.html#_load_modifications',
                                                                                                                                   'alphabase/psm_reader/maxquant_reader.py'),
                                                      'alphabase.psm_reader.maxquant_reader.MaxQuantReader._translate_decoy': ( 'psm_reader/maxquant_reader.html#_translate_decoy',
                                                                                                                                'alphabase/psm_reader/maxquant_reader.py'),
                                                      'alphabase.psm_reader.maxquant_reader.MaxQuantReader.set_modification_mapping': ( 'psm_reader/maxquant_reader.html#set_modification_mapping',
                                                                                                                                        'alphabase/psm_reader/maxquant_reader.py'),
                                                      'alphabase.psm_reader.maxquant_reader.parse_mod_seq': ( 'psm_reader/maxquant_reader.html#parse_mod_seq',
                                                                                                              'alphabase/psm_reader/maxquant_reader.py')},
            'alphabase.psm_reader.msfragger_reader': { 'alphabase.psm_reader.msfragger_reader.MSFragger_PSM_TSV_Reader': ( 'psm_reader/msfragger_reader.html#msfragger_psm_tsv_reader',
                                                                                                                           'alphabase/psm_reader/msfragger_reader.py'),
                                                       'alphabase.psm_reader.msfragger_reader.MSFragger_PSM_TSV_Reader.__init__': ( 'psm_reader/msfragger_reader.html#__init__',
                                                                                                                                    'alphabase/psm_reader/msfragger_reader.py'),
                                                       'alphabase.psm_reader.msfragger_reader._get_msf_mods': ( 'psm_reader/msfragger_reader.html#_get_msf_mods',
                                                                                                                'alphabase/psm_reader/msfragger_reader.py'),
                                                       'alphabase.psm_reader.msfragger_reader._is_fragger_decoy': ( 'psm_reader/msfragger_reader.html#_is_fragger_decoy',
                                                                                                                    'alphabase/psm_reader/msfragger_reader.py')},
            'alphabase.psm_reader.pfind_reader': { 'alphabase.psm_reader.pfind_reader.convert_one_pFind_mod': ( 'psm_reader/pfind_reader.html#convert_one_pfind_mod',
                                                                                                                'alphabase/psm_reader/pfind_reader.py'),
                                                   'alphabase.psm_reader.pfind_reader.get_pFind_mods': ( 'psm_reader/pfind_reader.html#get_pfind_mods',
                                                                                                         'alphabase/psm_reader/pfind_reader.py'),
                                                   'alphabase.psm_reader.pfind_reader.pFindReader': ( 'psm_reader/pfind_reader.html#pfindreader',
                                                                                                      'alphabase/psm_reader/pfind_reader.py'),
                                                   'alphabase.psm_reader.pfind_reader.pFindReader.__init__': ( 'psm_reader/pfind_reader.html#__init__',
                                                                                                               'alphabase/psm_reader/pfind_reader.py'),
                                                   'alphabase.psm_reader.pfind_reader.pFindReader._init_column_mapping': ( 'psm_reader/pfind_reader.html#_init_column_mapping',
                                                                                                                           'alphabase/psm_reader/pfind_reader.py'),
                                                   'alphabase.psm_reader.pfind_reader.pFindReader._init_modification_mapping': ( 'psm_reader/pfind_reader.html#_init_modification_mapping',
                                                                                                                                 'alphabase/psm_reader/pfind_reader.py'),
                                                   'alphabase.psm_reader.pfind_reader.pFindReader._load_file': ( 'psm_reader/pfind_reader.html#_load_file',
                                                                                                                 'alphabase/psm_reader/pfind_reader.py'),
                                                   'alphabase.psm_reader.pfind_reader.pFindReader._load_modifications': ( 'psm_reader/pfind_reader.html#_load_modifications',
                                                                                                                          'alphabase/psm_reader/pfind_reader.py'),
                                                   'alphabase.psm_reader.pfind_reader.pFindReader._translate_decoy': ( 'psm_reader/pfind_reader.html#_translate_decoy',
                                                                                                                       'alphabase/psm_reader/pfind_reader.py'),
                                                   'alphabase.psm_reader.pfind_reader.pFindReader._translate_modifications': ( 'psm_reader/pfind_reader.html#_translate_modifications',
                                                                                                                               'alphabase/psm_reader/pfind_reader.py'),
                                                   'alphabase.psm_reader.pfind_reader.pFindReader._translate_score': ( 'psm_reader/pfind_reader.html#_translate_score',
                                                                                                                       'alphabase/psm_reader/pfind_reader.py'),
                                                   'alphabase.psm_reader.pfind_reader.parse_pfind_protein': ( 'psm_reader/pfind_reader.html#parse_pfind_protein',
                                                                                                              'alphabase/psm_reader/pfind_reader.py'),
                                                   'alphabase.psm_reader.pfind_reader.translate_pFind_mod': ( 'psm_reader/pfind_reader.html#translate_pfind_mod',
                                                                                                              'alphabase/psm_reader/pfind_reader.py')},
            'alphabase.psm_reader.psm_reader': { 'alphabase.psm_reader.psm_reader.PSMReaderBase': ( 'psm_reader/psm_reader.html#psmreaderbase',
                                                                                                    'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase.__init__': ( 'psm_reader/psm_reader.html#__init__',
                                                                                                             'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase._init_column_mapping': ( 'psm_reader/psm_reader.html#_init_column_mapping',
                                                                                                                         'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase._init_modification_mapping': ( 'psm_reader/psm_reader.html#_init_modification_mapping',
                                                                                                                               'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase._load_file': ( 'psm_reader/psm_reader.html#_load_file',
                                                                                                               'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase._load_modifications': ( 'psm_reader/psm_reader.html#_load_modifications',
                                                                                                                        'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase._post_process': ( 'psm_reader/psm_reader.html#_post_process',
                                                                                                                  'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase._reverse_mod_mapping': ( 'psm_reader/psm_reader.html#_reverse_mod_mapping',
                                                                                                                         'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase._translate_columns': ( 'psm_reader/psm_reader.html#_translate_columns',
                                                                                                                       'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase._translate_decoy': ( 'psm_reader/psm_reader.html#_translate_decoy',
                                                                                                                     'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase._translate_modifications': ( 'psm_reader/psm_reader.html#_translate_modifications',
                                                                                                                             'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase._translate_score': ( 'psm_reader/psm_reader.html#_translate_score',
                                                                                                                     'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase.add_modification_mapping': ( 'psm_reader/psm_reader.html#add_modification_mapping',
                                                                                                                             'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase.filter_psm_by_modifications': ( 'psm_reader/psm_reader.html#filter_psm_by_modifications',
                                                                                                                                'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase.import_file': ( 'psm_reader/psm_reader.html#import_file',
                                                                                                                'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase.load': ( 'psm_reader/psm_reader.html#load',
                                                                                                         'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase.norm_rt': ( 'psm_reader/psm_reader.html#norm_rt',
                                                                                                            'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase.normalize_rt': ( 'psm_reader/psm_reader.html#normalize_rt',
                                                                                                                 'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase.normalize_rt_by_raw_name': ( 'psm_reader/psm_reader.html#normalize_rt_by_raw_name',
                                                                                                                             'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase.psm_df': ( 'psm_reader/psm_reader.html#psm_df',
                                                                                                           'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderBase.set_modification_mapping': ( 'psm_reader/psm_reader.html#set_modification_mapping',
                                                                                                                             'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderProvider': ( 'psm_reader/psm_reader.html#psmreaderprovider',
                                                                                                        'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderProvider.__init__': ( 'psm_reader/psm_reader.html#__init__',
                                                                                                                 'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderProvider.get_reader': ( 'psm_reader/psm_reader.html#get_reader',
                                                                                                                   'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderProvider.get_reader_by_yaml': ( 'psm_reader/psm_reader.html#get_reader_by_yaml',
                                                                                                                           'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.PSMReaderProvider.register_reader': ( 'psm_reader/psm_reader.html#register_reader',
                                                                                                                        'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.keep_modifications': ( 'psm_reader/psm_reader.html#keep_modifications',
                                                                                                         'alphabase/psm_reader/psm_reader.py'),
                                                 'alphabase.psm_reader.psm_reader.translate_other_modification': ( 'psm_reader/psm_reader.html#translate_other_modification',
                                                                                                                   'alphabase/psm_reader/psm_reader.py')},
            'alphabase.scoring.fdr': { 'alphabase.scoring.fdr.calculate_fdr': ( 'scoring/fdr.html#calculate_fdr',
                                                                                'alphabase/scoring/fdr.py'),
                                       'alphabase.scoring.fdr.calculate_fdr_from_ref': ( 'scoring/fdr.html#calculate_fdr_from_ref',
                                                                                         'alphabase/scoring/fdr.py'),
                                       'alphabase.scoring.fdr.fdr_from_ref': ('scoring/fdr.html#fdr_from_ref', 'alphabase/scoring/fdr.py'),
                                       'alphabase.scoring.fdr.fdr_to_q_values': ( 'scoring/fdr.html#fdr_to_q_values',
                                                                                  'alphabase/scoring/fdr.py')},
            'alphabase.scoring.feature_extraction_base': { 'alphabase.scoring.feature_extraction_base.BaseFeatureExtractor': ( 'scoring/feature_extraction_base.html#basefeatureextractor',
                                                                                                                               'alphabase/scoring/feature_extraction_base.py'),
                                                           'alphabase.scoring.feature_extraction_base.BaseFeatureExtractor.__init__': ( 'scoring/feature_extraction_base.html#__init__',
                                                                                                                                        'alphabase/scoring/feature_extraction_base.py'),
                                                           'alphabase.scoring.feature_extraction_base.BaseFeatureExtractor.extract_features': ( 'scoring/feature_extraction_base.html#extract_features',
                                                                                                                                                'alphabase/scoring/feature_extraction_base.py'),
                                                           'alphabase.scoring.feature_extraction_base.BaseFeatureExtractor.feature_list': ( 'scoring/feature_extraction_base.html#feature_list',
                                                                                                                                            'alphabase/scoring/feature_extraction_base.py'),
                                                           'alphabase.scoring.feature_extraction_base.BaseFeatureExtractor.update_features': ( 'scoring/feature_extraction_base.html#update_features',
                                                                                                                                               'alphabase/scoring/feature_extraction_base.py')},
            'alphabase.scoring.ml_scoring_base': { 'alphabase.scoring.ml_scoring_base.Percolator': ( 'scoring/ml_scoring_base.html#percolator',
                                                                                                     'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator.__init__': ( 'scoring/ml_scoring_base.html#__init__',
                                                                                                              'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator._cv_score': ( 'scoring/ml_scoring_base.html#_cv_score',
                                                                                                               'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator._estimate_fdr': ( 'scoring/ml_scoring_base.html#_estimate_fdr',
                                                                                                                   'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator._estimate_fdr_per_raw': ( 'scoring/ml_scoring_base.html#_estimate_fdr_per_raw',
                                                                                                                           'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator._estimate_psm_fdr': ( 'scoring/ml_scoring_base.html#_estimate_psm_fdr',
                                                                                                                       'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator._predict': ( 'scoring/ml_scoring_base.html#_predict',
                                                                                                              'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator._train': ( 'scoring/ml_scoring_base.html#_train',
                                                                                                            'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator._train_and_score': ( 'scoring/ml_scoring_base.html#_train_and_score',
                                                                                                                      'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator.extract_features': ( 'scoring/ml_scoring_base.html#extract_features',
                                                                                                                      'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator.feature_extractor': ( 'scoring/ml_scoring_base.html#feature_extractor',
                                                                                                                       'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator.feature_list': ( 'scoring/ml_scoring_base.html#feature_list',
                                                                                                                  'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator.ml_model': ( 'scoring/ml_scoring_base.html#ml_model',
                                                                                                              'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator.rescore': ( 'scoring/ml_scoring_base.html#rescore',
                                                                                                             'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator.run_rerank_workflow': ( 'scoring/ml_scoring_base.html#run_rerank_workflow',
                                                                                                                         'alphabase/scoring/ml_scoring_base.py'),
                                                   'alphabase.scoring.ml_scoring_base.Percolator.run_rescore_workflow': ( 'scoring/ml_scoring_base.html#run_rescore_workflow',
                                                                                                                          'alphabase/scoring/ml_scoring_base.py')},
            'alphabase.spectral_library.decoy_library': { 'alphabase.spectral_library.decoy_library.DecoyLib': ( 'spectral_library/decoy_library.html#decoylib',
                                                                                                                 'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib.__init__': ( 'spectral_library/decoy_library.html#__init__',
                                                                                                                          'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib._decoy_fragment_intensity': ( 'spectral_library/decoy_library.html#_decoy_fragment_intensity',
                                                                                                                                           'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib._decoy_fragment_mz': ( 'spectral_library/decoy_library.html#_decoy_fragment_mz',
                                                                                                                                    'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib._decoy_frags': ( 'spectral_library/decoy_library.html#_decoy_frags',
                                                                                                                              'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib._decoy_meta': ( 'spectral_library/decoy_library.html#_decoy_meta',
                                                                                                                             'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib._decoy_mods': ( 'spectral_library/decoy_library.html#_decoy_mods',
                                                                                                                             'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib._decoy_seq': ( 'spectral_library/decoy_library.html#_decoy_seq',
                                                                                                                            'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib._get_hdf_to_load': ( 'spectral_library/decoy_library.html#_get_hdf_to_load',
                                                                                                                                  'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib._get_hdf_to_save': ( 'spectral_library/decoy_library.html#_get_hdf_to_save',
                                                                                                                                  'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib._remove_target_seqs': ( 'spectral_library/decoy_library.html#_remove_target_seqs',
                                                                                                                                     'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib.append_decoy_sequence': ( 'spectral_library/decoy_library.html#append_decoy_sequence',
                                                                                                                                       'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib.decoy_sequence': ( 'spectral_library/decoy_library.html#decoy_sequence',
                                                                                                                                'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib.load_hdf': ( 'spectral_library/decoy_library.html#load_hdf',
                                                                                                                          'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib.save_hdf': ( 'spectral_library/decoy_library.html#save_hdf',
                                                                                                                          'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLib.translate_to_decoy': ( 'spectral_library/decoy_library.html#translate_to_decoy',
                                                                                                                                    'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLibProvider': ( 'spectral_library/decoy_library.html#decoylibprovider',
                                                                                                                         'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLibProvider.__init__': ( 'spectral_library/decoy_library.html#__init__',
                                                                                                                                  'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLibProvider.get_decoy_lib': ( 'spectral_library/decoy_library.html#get_decoy_lib',
                                                                                                                                       'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DecoyLibProvider.register': ( 'spectral_library/decoy_library.html#register',
                                                                                                                                  'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DiaNNDecoyLib': ( 'spectral_library/decoy_library.html#dianndecoylib',
                                                                                                                      'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DiaNNDecoyLib.__init__': ( 'spectral_library/decoy_library.html#__init__',
                                                                                                                               'alphabase/spectral_library/decoy_library.py'),
                                                          'alphabase.spectral_library.decoy_library.DiaNNDecoyLib._decoy_seq': ( 'spectral_library/decoy_library.html#_decoy_seq',
                                                                                                                                 'alphabase/spectral_library/decoy_library.py')},
            'alphabase.spectral_library.flat_library': { 'alphabase.spectral_library.flat_library.FlatSpecLib': ( 'spectral_library/flat_library.html#flatspeclib',
                                                                                                                  'alphabase/spectral_library/flat_library.py'),
                                                         'alphabase.spectral_library.flat_library.FlatSpecLib.__init__': ( 'spectral_library/flat_library.html#__init__',
                                                                                                                           'alphabase/spectral_library/flat_library.py'),
                                                         'alphabase.spectral_library.flat_library.FlatSpecLib.fragment_df': ( 'spectral_library/flat_library.html#fragment_df',
                                                                                                                              'alphabase/spectral_library/flat_library.py'),
                                                         'alphabase.spectral_library.flat_library.FlatSpecLib.load_hdf': ( 'spectral_library/flat_library.html#load_hdf',
                                                                                                                           'alphabase/spectral_library/flat_library.py'),
                                                         'alphabase.spectral_library.flat_library.FlatSpecLib.parse_base_library': ( 'spectral_library/flat_library.html#parse_base_library',
                                                                                                                                     'alphabase/spectral_library/flat_library.py'),
                                                         'alphabase.spectral_library.flat_library.FlatSpecLib.peptide_df': ( 'spectral_library/flat_library.html#peptide_df',
                                                                                                                             'alphabase/spectral_library/flat_library.py'),
                                                         'alphabase.spectral_library.flat_library.FlatSpecLib.precursor_df': ( 'spectral_library/flat_library.html#precursor_df',
                                                                                                                               'alphabase/spectral_library/flat_library.py'),
                                                         'alphabase.spectral_library.flat_library.FlatSpecLib.save_hdf': ( 'spectral_library/flat_library.html#save_hdf',
                                                                                                                           'alphabase/spectral_library/flat_library.py')},
            'alphabase.spectral_library.library_base': { 'alphabase.spectral_library.library_base.SpecLibBase': ( 'spectral_library/library_base.html#speclibbase',
                                                                                                                  'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.__init__': ( 'spectral_library/library_base.html#__init__',
                                                                                                                           'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase._get_hdf_to_load': ( 'spectral_library/library_base.html#_get_hdf_to_load',
                                                                                                                                   'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase._get_hdf_to_save': ( 'spectral_library/library_base.html#_get_hdf_to_save',
                                                                                                                                   'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.annotate_fragments_from_speclib': ( 'spectral_library/library_base.html#annotate_fragments_from_speclib',
                                                                                                                                                  'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.append_decoy_sequence': ( 'spectral_library/library_base.html#append_decoy_sequence',
                                                                                                                                        'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.calc_fragment_mz_df': ( 'spectral_library/library_base.html#calc_fragment_mz_df',
                                                                                                                                      'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.calc_precursor_isotope': ( 'spectral_library/library_base.html#calc_precursor_isotope',
                                                                                                                                         'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.calc_precursor_mz': ( 'spectral_library/library_base.html#calc_precursor_mz',
                                                                                                                                    'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.clip_by_precursor_mz_': ( 'spectral_library/library_base.html#clip_by_precursor_mz_',
                                                                                                                                        'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.flatten_fragment_data': ( 'spectral_library/library_base.html#flatten_fragment_data',
                                                                                                                                        'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.fragment_intensity_df': ( 'spectral_library/library_base.html#fragment_intensity_df',
                                                                                                                                        'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.fragment_mz_df': ( 'spectral_library/library_base.html#fragment_mz_df',
                                                                                                                                 'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.hash_precursor_df': ( 'spectral_library/library_base.html#hash_precursor_df',
                                                                                                                                    'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.load_df_from_hdf': ( 'spectral_library/library_base.html#load_df_from_hdf',
                                                                                                                                   'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.load_hdf': ( 'spectral_library/library_base.html#load_hdf',
                                                                                                                           'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.peptide_df': ( 'spectral_library/library_base.html#peptide_df',
                                                                                                                             'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.precursor_df': ( 'spectral_library/library_base.html#precursor_df',
                                                                                                                               'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.refine_df': ( 'spectral_library/library_base.html#refine_df',
                                                                                                                            'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.remove_unused_fragments': ( 'spectral_library/library_base.html#remove_unused_fragments',
                                                                                                                                          'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.save_df_to_hdf': ( 'spectral_library/library_base.html#save_df_to_hdf',
                                                                                                                                 'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.save_hdf': ( 'spectral_library/library_base.html#save_hdf',
                                                                                                                           'alphabase/spectral_library/library_base.py'),
                                                         'alphabase.spectral_library.library_base.SpecLibBase.update_precursor_mz': ( 'spectral_library/library_base.html#update_precursor_mz',
                                                                                                                                      'alphabase/spectral_library/library_base.py')},
            'alphabase.spectral_library.library_reader': { 'alphabase.spectral_library.library_reader.SWATHLibraryReader': ( 'spectral_library/library_reader.html#swathlibraryreader',
                                                                                                                             'alphabase/spectral_library/library_reader.py'),
                                                           'alphabase.spectral_library.library_reader.SWATHLibraryReader.__init__': ( 'spectral_library/library_reader.html#__init__',
                                                                                                                                      'alphabase/spectral_library/library_reader.py'),
                                                           'alphabase.spectral_library.library_reader.SWATHLibraryReader._find_key_columns': ( 'spectral_library/library_reader.html#_find_key_columns',
                                                                                                                                               'alphabase/spectral_library/library_reader.py'),
                                                           'alphabase.spectral_library.library_reader.SWATHLibraryReader._get_fragment_intensity': ( 'spectral_library/library_reader.html#_get_fragment_intensity',
                                                                                                                                                     'alphabase/spectral_library/library_reader.py'),
                                                           'alphabase.spectral_library.library_reader.SWATHLibraryReader._load_file': ( 'spectral_library/library_reader.html#_load_file',
                                                                                                                                        'alphabase/spectral_library/library_reader.py'),
                                                           'alphabase.spectral_library.library_reader.SWATHLibraryReader._post_process': ( 'spectral_library/library_reader.html#_post_process',
                                                                                                                                           'alphabase/spectral_library/library_reader.py')},
            'alphabase.spectral_library.raw_library_generator': { 'alphabase.spectral_library.raw_library_generator.RAWLibraryGenerator': ( 'spectral_library/raw_library_generator.html#rawlibrarygenerator',
                                                                                                                                            'alphabase/spectral_library/raw_library_generator.py'),
                                                                  'alphabase.spectral_library.raw_library_generator.RAWLibraryGenerator.__init__': ( 'spectral_library/raw_library_generator.html#__init__',
                                                                                                                                                     'alphabase/spectral_library/raw_library_generator.py'),
                                                                  'alphabase.spectral_library.raw_library_generator.RAWLibraryGenerator.extract_fragments': ( 'spectral_library/raw_library_generator.html#extract_fragments',
                                                                                                                                                              'alphabase/spectral_library/raw_library_generator.py'),
                                                                  'alphabase.spectral_library.raw_library_generator.RAWLibraryGenerator.import_psms': ( 'spectral_library/raw_library_generator.html#import_psms',
                                                                                                                                                        'alphabase/spectral_library/raw_library_generator.py')},
            'alphabase.spectral_library.translate': { 'alphabase.spectral_library.translate.WritingProcess': ( 'spectral_library/translate.html#writingprocess',
                                                                                                               'alphabase/spectral_library/translate.py'),
                                                      'alphabase.spectral_library.translate.WritingProcess.__init__': ( 'spectral_library/translate.html#__init__',
                                                                                                                        'alphabase/spectral_library/translate.py'),
                                                      'alphabase.spectral_library.translate.WritingProcess.run': ( 'spectral_library/translate.html#run',
                                                                                                                   'alphabase/spectral_library/translate.py'),
                                                      'alphabase.spectral_library.translate._get_frag_info_from_column_name': ( 'spectral_library/translate.html#_get_frag_info_from_column_name',
                                                                                                                                'alphabase/spectral_library/translate.py'),
                                                      'alphabase.spectral_library.translate._get_frag_num': ( 'spectral_library/translate.html#_get_frag_num',
                                                                                                              'alphabase/spectral_library/translate.py'),
                                                      'alphabase.spectral_library.translate.create_modified_sequence': ( 'spectral_library/translate.html#create_modified_sequence',
                                                                                                                         'alphabase/spectral_library/translate.py'),
                                                      'alphabase.spectral_library.translate.is_nterm_frag': ( 'spectral_library/translate.html#is_nterm_frag',
                                                                                                              'alphabase/spectral_library/translate.py'),
                                                      'alphabase.spectral_library.translate.mask_fragment_intensity_by_frag_nAA': ( 'spectral_library/translate.html#mask_fragment_intensity_by_frag_naa',
                                                                                                                                    'alphabase/spectral_library/translate.py'),
                                                      'alphabase.spectral_library.translate.mask_fragment_intensity_by_mz_': ( 'spectral_library/translate.html#mask_fragment_intensity_by_mz_',
                                                                                                                               'alphabase/spectral_library/translate.py'),
                                                      'alphabase.spectral_library.translate.merge_precursor_fragment_df': ( 'spectral_library/translate.html#merge_precursor_fragment_df',
                                                                                                                            'alphabase/spectral_library/translate.py'),
                                                      'alphabase.spectral_library.translate.speclib_to_single_df': ( 'spectral_library/translate.html#speclib_to_single_df',
                                                                                                                     'alphabase/spectral_library/translate.py'),
                                                      'alphabase.spectral_library.translate.speclib_to_swath_df': ( 'spectral_library/translate.html#speclib_to_swath_df',
                                                                                                                    'alphabase/spectral_library/translate.py'),
                                                      'alphabase.spectral_library.translate.translate_to_tsv': ( 'spectral_library/translate.html#translate_to_tsv',
                                                                                                                 'alphabase/spectral_library/translate.py')},
            'alphabase.statistics.regression': { 'alphabase.statistics.regression.LOESSRegression': ( 'statistics/regression.html#loessregression',
                                                                                                      'alphabase/statistics/regression.py'),
                                                 'alphabase.statistics.regression.LOESSRegression.__init__': ( 'statistics/regression.html#__init__',
                                                                                                               'alphabase/statistics/regression.py'),
                                                 'alphabase.statistics.regression.LOESSRegression._more_tags': ( 'statistics/regression.html#_more_tags',
                                                                                                                 'alphabase/statistics/regression.py'),
                                                 'alphabase.statistics.regression.LOESSRegression.calculate_kernel_indices': ( 'statistics/regression.html#calculate_kernel_indices',
                                                                                                                               'alphabase/statistics/regression.py'),
                                                 'alphabase.statistics.regression.LOESSRegression.fit': ( 'statistics/regression.html#fit',
                                                                                                          'alphabase/statistics/regression.py'),
                                                 'alphabase.statistics.regression.LOESSRegression.get_params': ( 'statistics/regression.html#get_params',
                                                                                                                 'alphabase/statistics/regression.py'),
                                                 'alphabase.statistics.regression.LOESSRegression.get_weight_matrix': ( 'statistics/regression.html#get_weight_matrix',
                                                                                                                        'alphabase/statistics/regression.py'),
                                                 'alphabase.statistics.regression.LOESSRegression.predict': ( 'statistics/regression.html#predict',
                                                                                                              'alphabase/statistics/regression.py'),
                                                 'alphabase.statistics.regression.LOESSRegression.set_params': ( 'statistics/regression.html#set_params',
                                                                                                                 'alphabase/statistics/regression.py'),
                                                 'alphabase.statistics.regression.apply_kernel': ( 'statistics/regression.html#apply_kernel',
                                                                                                   'alphabase/statistics/regression.py'),
                                                 'alphabase.statistics.regression.left_open_tricubic': ( 'statistics/regression.html#left_open_tricubic',
                                                                                                         'alphabase/statistics/regression.py'),
                                                 'alphabase.statistics.regression.right_open_tricubic': ( 'statistics/regression.html#right_open_tricubic',
                                                                                                          'alphabase/statistics/regression.py'),
                                                 'alphabase.statistics.regression.tricubic': ( 'statistics/regression.html#tricubic',
                                                                                               'alphabase/statistics/regression.py')},
            'alphabase.utils': { 'alphabase.utils._flatten': ('utils.html#_flatten', 'alphabase/utils.py'),
                                 'alphabase.utils.explode_multiple_columns': ('utils.html#explode_multiple_columns', 'alphabase/utils.py'),
                                 'alphabase.utils.process_bar': ('utils.html#process_bar', 'alphabase/utils.py')},
            'alphabase.yaml_utils': { 'alphabase.yaml_utils.load_yaml': ('yaml_utils.html#load_yaml', 'alphabase/yaml_utils.py'),
                                      'alphabase.yaml_utils.save_yaml': ('yaml_utils.html#save_yaml', 'alphabase/yaml_utils.py')}}}