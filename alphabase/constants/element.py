# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/constants/element.ipynb (unless otherwise specified).

__all__ = ['truncate_isotope', 'reset_parameters', 'CHEM_INFO_DICT', 'CHEM_MONO_MASS', 'CHEM_ISOTOPE_DIST',
           'MAX_ISOTOPE_LEN', 'EMPTY_DIST', 'CHEM_MONO_IDX', 'MASS_H2O', 'MASS_NH3', 'MASS_PROTON', 'MASS_ISOTOPE',
           'parse_formula', 'calc_formula_mass', 'abundance_convolution', 'one_element_dist', 'formula_dist']

# Cell

import os
import numpy as np
import numba

from alphabase.yaml_utils import load_yaml

_base_dir = os.path.dirname(__file__)

CHEM_INFO_DICT = load_yaml(
    os.path.join(_base_dir,
        'element.yaml'
    )
)

CHEM_MONO_MASS = {}
CHEM_ISOTOPE_DIST = numba.typed.Dict.empty(
    key_type=numba.types.unicode_type,
    value_type=numba.types.float64[:]
)
MAX_ISOTOPE_LEN = 10
EMPTY_DIST = np.zeros(MAX_ISOTOPE_LEN)
EMPTY_DIST[0] = 1
CHEM_MONO_IDX = numba.typed.Dict.empty(
    key_type=numba.types.unicode_type,
    value_type=numba.types.int64
)

@numba.njit
def truncate_isotope(isotopes, mono_idx):
    trunc_start = mono_idx - 1
    trunc_end = mono_idx + 1
    while trunc_start >= 0 and trunc_end < len(isotopes) and (trunc_end-trunc_start-1)<MAX_ISOTOPE_LEN:
        if isotopes[trunc_end] >= isotopes[trunc_start]:
            trunc_end += 1
        else:
            trunc_start -= 1
    if trunc_end-trunc_start-1 < MAX_ISOTOPE_LEN:
        if trunc_start == -1:
            trunc_end = MAX_ISOTOPE_LEN
        elif trunc_end == len(isotopes):
            trunc_start = len(isotopes)-MAX_ISOTOPE_LEN-1
    return mono_idx-trunc_start-1, trunc_start+1, trunc_end

def reset_parameters():
    for elem, items in CHEM_INFO_DICT.items():
        isotopes = np.array(items['abundance'])
        masses = np.array(items['mass'])
        _sort_idx = np.argsort(masses)
        masses = masses[_sort_idx]
        isotopes = isotopes[_sort_idx]
        _mass_pos = np.round(masses).astype(int)
        _mass_pos = _mass_pos - _mass_pos[0]
        if _mass_pos[-1] - _mass_pos[0] + 1 <= MAX_ISOTOPE_LEN:
            _isos = np.zeros(MAX_ISOTOPE_LEN)
            _isos[_mass_pos] = isotopes
            _masses = np.zeros(MAX_ISOTOPE_LEN)
            _masses[_mass_pos] = masses
            mono_idx = np.argmax(_isos)

            CHEM_MONO_MASS[elem] = _masses[mono_idx]
            CHEM_ISOTOPE_DIST[elem] = _isos
            CHEM_MONO_IDX[elem] = mono_idx
        else:
            _isos = np.zeros(_mass_pos[-1] - _mass_pos[0] + 1)
            _isos[_mass_pos] = isotopes
            _masses = np.zeros(_mass_pos[-1] - _mass_pos[0] + 1)
            _masses[_mass_pos] = masses
            mono_idx = np.argmax(_isos)
            CHEM_MONO_MASS[elem] = _masses[mono_idx]

            _mono_idx, start, end = truncate_isotope(_isos, mono_idx)

            CHEM_ISOTOPE_DIST[elem] = _isos[start:end]
            CHEM_MONO_IDX[elem] = _mono_idx
reset_parameters()

MASS_H2O = CHEM_MONO_MASS['H']*2 + CHEM_MONO_MASS['O']
MASS_NH3 = CHEM_MONO_MASS['H']*3 + CHEM_MONO_MASS['N']
MASS_PROTON = 1.007276
MASS_ISOTOPE = 1.0033

# Cell
def parse_formula(formula:str):
    if not formula: return []
    items = [item.split('(') for item in formula.strip(')').split(')')]
    return [(elem, int(n)) for elem, n in items]

def calc_formula_mass(formula:str):
    '''
    Args:
        formula (str): e.g. `H(1)C(2)O(3)`
    Returns:
        float: mass of the formula
    '''
    return np.sum([CHEM_MONO_MASS[elem]*n for elem, n in parse_formula(formula)])

# Cell

@numba.njit
def abundance_convolution(
    d1:np.array,
    mono1:int,
    d2:np.array,
    mono2:int,
):
    mono_idx = mono1 + mono2
    ret = np.zeros(MAX_ISOTOPE_LEN*2-1)
    for i in range(len(d1)):
        for j in range(len(d2)):
            ret[i+j] += d1[i]*d2[j]

    mono_idx, start, end = truncate_isotope(ret, mono_idx)
    return ret[start:end], mono_idx

@numba.njit
def one_element_dist(
    elem: str,
    n: int,
    chem_isotope_dist: numba.typed.Dict,
    chem_mono_idx: numba.typed.Dict,
):
    if n == 0: return EMPTY_DIST.copy(), 0
    elif n == 1: return chem_isotope_dist[elem], chem_mono_idx[elem]
    tmp_dist, mono_idx = one_element_dist(elem, n//2, chem_isotope_dist, chem_mono_idx)
    tmp_dist, mono_idx = abundance_convolution(tmp_dist, mono_idx, tmp_dist, mono_idx)
    if n%2 == 0:
        return tmp_dist, mono_idx
    else:
        return abundance_convolution(tmp_dist, mono_idx, chem_isotope_dist[elem], chem_mono_idx[elem])

# Cell
def formula_dist(formula_list):
    calc_dist = EMPTY_DIST.copy()
    mono_idx = 0
    for elem, n in formula_list:
        _dist, _mono = one_element_dist(elem, n, CHEM_ISOTOPE_DIST, CHEM_MONO_IDX)
        calc_dist, mono_idx = abundance_convolution(calc_dist, mono_idx, _dist, _mono)
    return calc_dist, mono_idx