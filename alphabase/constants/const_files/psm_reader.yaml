alphapept:
  reader_type: alphapept
  rt_unit: minute
  column_mapping:
    'rt': 'rt'
    'scan_num': 'scan_no'
    'spec_idx': 'raw_idx'
    'query_id': 'query_idx'
    'mobility': 'mobility'
    'score': 'score'
    'precursor_mz': 'mz'
    'charge': 'charge'
    'raw_name': 'raw_name' #parse from `ms_data.hdf`` file
    'fdr': 'q_value'
    'decoy': 'decoy'
  modification_mapping:
    'Carbamidomethyl@C': 'cC'
    'Oxidation@M': 'oxM'
    'Phospho@S': 'pS'
    'Phospho@T': 'pT'
    'Phospho@Y': 'pY'
    'Acetyl@Protein N-term': 'a'

maxquant:
  reader_type: maxquant
  rt_unit: minute
  fixed_C57: True
  column_mapping:
    'sequence': 'Sequence'
    'charge': 'Charge'
    'rt': 'Retention time'
    'ccs': 'CCS'
    'mobility': 
      - 'Mobility'
      - 'IonMobility'
      - 'K0' # Bug in MaxQuant? It should be 1/K0
      - '1/K0'
    'scan_num': 
      - 'Scan number'
      - 'MS/MS scan number'
      - 'Scan index'
    'raw_name': 'Raw file'
    'precursor_mz': 'm/z'
    'score': 'Score'
    'proteins': 'Proteins'
    'genes': ['Gene Names','Gene names']
    'decoy': 'Reverse'
    'intensity': 'Intensity'

  modification_mapping:
    'Dimethyl@K': 
      - 'K(Dimethyl)'
    'Dimethyl@R':
      - 'R(Dimethyl)'
    'Dimethyl@Any N-term':
      - '(Dimethyl)'
    'Acetyl@Protein N-term': 
      - '_(Acetyl (Protein N-term))'
      - '_(ac)'
    'Carbamidomethyl@C': 
      - 'C(Carbamidomethyl (C))'
      - 'C(Carbamidomethyl)'
    'Oxidation@M': 
      - 'M(Oxidation)'
      - 'M(Oxidation (M))'
      - 'M(ox)'
    'Phospho@S': 
      - 'S(Phospho (S))'
      - 'S(Phospho (ST))'
      - 'S(Phospho (STY))'
      - 'S(ph)'
      - 'pS'
    'Phospho@T': 
      - 'T(Phospho (T))'
      - 'T(Phospho (ST))'
      - 'T(Phospho (STY))'
      - 'T(ph)'
      - 'pT'
    'Phospho@Y': 
      - 'Y(Phospho (Y))'
      - 'Y(Phospho (STY))'
      - 'Y(ph)'
      - 'pY'
    'Deamidated@N': ['N(Deamidation (NQ))','N(de)']
    'Deamidated@Q': ['Q(Deamidation (NQ))','Q(de)']
    'GlyGly@K': ['K(GlyGly (K))', 'K(gl)']

pfind:
  reader_type: pfind
  rt_unit: minute
  column_mapping:
    'sequence': 'Sequence'
    'charge': 'Charge'
    'rt': 'RT'
    'raw_name': 'raw_name'
    'query_id': 'File_Name'
    'scan_num': 'Scan_No'
    'score': 'Final_Score'
    'proteins': 'Proteins'
    'uniprot_ids': 'Proteins'
    'fdr': 'Q-value'
    'decoy': ['Target/Decoy', 'Targe/Decoy']
  modification_mapping:
    '': ''
msfragger_pepxml:
  reader_type: msfragger_pepxml
  rt_unit: second
  column_mapping:
    'sequence': 'peptide'
    'charge': 'assumed_charge'
    'rt': 'retention_time_sec'
    'query_id': 'spectrum'
    'scan_num': 'start_scan'
    'score': 'expect'
    'fdr': 'expect'
    'proteins': 'protein'
    'raw_name': 'raw_name'
    'mobility': 'ion_mobility'
  modification_mapping:
    '': ''
  mass_mapped_mods:
    - 'Oxidation@M' #other Oxidation@X are not needed here
    - 'Carbamidomethyl@C'
    - 'Phospho@S' #TY are not needed here
    - 'GlyGly@K'
    - 'Cysteinyl@C'
    - 'Acetyl@Any N-term'
    - 'Glu->pyro-Glu@E^Any N-term'
    - 'Gln->pyro-Glu@Q^Any N-term'
    - 'Dimethyl@K' # Any N-term is not needed here as it will be infered in-the-fly
    - 'Methyl@E' #an example of a PTM that can be C-term
  mod_mass_tol: 0.1 # Da

diann:
  reader_type: diann
  rt_unit: minute
  fixed_C57: False
  column_mapping:
    'raw_name': 'Run'
    'sequence': 'Stripped.Sequence'
    'charge': 'Precursor.Charge'
    'rt': 'RT'
    'rt_start': 'RT.Start'
    'rt_stop': 'RT.Stop'
    'ccs': 'CCS'
    'mobility': ['IM','IonMobility']
    'proteins': 'Protein.Names'
    'uniprot_ids': 'Protein.Ids'
    'genes': 'Genes'
    'scan_num': 'MS2.Scan'
    'score': 'CScore'
    'fdr': 'Q.Value'
  modification_mapping: 'maxquant'
spectronaut_report:
  reader_type: spectronaut_report
  rt_unit: minute
  fixed_C57: False
  column_mapping:
    'raw_name': 'R.FileName'
    'rt': ['EG.ApexRT','EG.MeanApexRT']
    'proteins': ['PG.ProteinNames','PG.ProteinGroups']
    'genes': 'PG.Genes'
    'uniprot_ids': 'PG.UniProtIds'
    'charge': 'charge'
  modification_mapping: 'maxquant'

spectronaut:
  reader_type: spectronaut
  rt_unit: irt
  fixed_C57: False
  mod_seq_columns:
    - 'ModifiedPeptide'
    - 'ModifiedSequence'
    - 'FullUniModPeptideName'
    - 'ModifiedPeptideSequence'
    - 'LabeledSequence'
    - 'FullUniModPeptideName'
  column_mapping:
    'raw_name': 'ReferenceRun'
    'sequence': ['StrippedPeptide','PeptideSequence']
    'charge': 'PrecursorCharge'
    'rt': ['RT','iRT','Tr_recalibrated','RetentionTime','NormalizedRetentionTime']
    'ccs': 'CCS'
    'precursor_mz': 'PrecursorMz'
    'mobility': ['Mobility','IonMobility','PrecursorIonMobility']
    'proteins': ['Protein Name','ProteinId','ProteinID','ProteinName','ProteinGroup','ProteinGroups']
    'uniprot_ids': ['UniProtIds','UniProtID','UniprotId']
    'genes': ['Genes','Gene','GeneName','GeneNames']
  modification_mapping: 'maxquant'
  
library_reader_base:
  reader_type: library_reader_base
  rt_unit: irt
  fixed_C57: False
  csv_sep: "\t"
  mod_seq_columns:
    - 'ModifiedPeptideSequence'
    - 'ModifiedPeptide'
    - 'ModifiedSequence'
    - 'FullUniModPeptideName'
    - 'LabeledSequence'
    - 'FullUniModPeptideName'
  column_mapping:
    'raw_name': 'ReferenceRun'
    'sequence': ['PeptideSequence', 'StrippedPeptide']
    'modified_sequence': ['ModifiedPeptideSequence','ModifiedPeptide']
    'charge': 'PrecursorCharge'
    'rt': ['RT','iRT','Tr_recalibrated','RetentionTime','NormalizedRetentionTime']
    'ccs': 'CCS'
    'precursor_mz': 'PrecursorMz'
    'mobility': ['Mobility','IonMobility','PrecursorIonMobility']
    'proteins': ['ProteinId','ProteinID','ProteinName','Protein Name',]
    'uniprot_ids': ['UniProtIds','UniProtID','UniprotId']
    'genes': ['GeneName','Genes','Gene',]
    'fragment_intensity': ['LibraryIntensity','RelativeIntensity', 'RelativeFragmentIntensity', 'RelativeFragmentIonIntensity']
    'fragment_mz': ['ProductMz']
    'fragment_type': ['FragmentType', 'FragmentIonType', 'ProductType', 'ProductIonType']
    'fragment_charge' : ['FragmentCharge', 'FragmentIonCharge', 'ProductCharge', 'ProductIonCharge']
    'fragment_series': ['FragmentSeriesNumber','FragmentNumber']
    'fragment_loss_type': ['FragmentLossType', 'FragmentIonLossType', 'ProductLossType', 'ProductIonLossType']
  modification_mapping: 'maxquant'
