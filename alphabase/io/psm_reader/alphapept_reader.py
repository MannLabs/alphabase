# AUTOGENERATED! DO NOT EDIT! File to edit: nbdev_nbs/io/psm_reader/alphapept_reader.ipynb (unless otherwise specified).

__all__ = ['parse_ap', 'AlphaPeptReader']

# Cell
import numba
import os
import pandas as pd
import h5py

from alphabase.io.psm_reader.psm_reader import (
    PSMReaderBase, psm_reader_provider
)

@numba.njit
def parse_ap(precursor):
    """
    Parser to parse peptide strings
    """
    items = precursor.split('_')
    if len(items) == 3:
        decoy = 1
    else:
        decoy = 0
    modseq = items[0]
    charge = items[-1]

    parsed = []
    mods = []
    sites = []
    string = ""

    if modseq[0] == 'a':
        sites.append('0')
        mods.append('a')
        modseq = modseq[1:]
    elif modseq.startswith('tmt'):
        for l in range(3, len(modseq)):
            if modseq[l].isupper():
                break
        sites.append('0')
        mods.append(modseq[:l])
        modseq = modseq[l:]

    for i in modseq:
        string += i
        if i.isupper():
            parsed.append(i)
            if len(string) > 1:
                sites.append(str(len(parsed)))
                mods.append(string)
            string = ""

    return ''.join(parsed), ';'.join(mods), ';'.join(sites), charge, decoy

class AlphaPeptReader(PSMReaderBase):
    def __init__(self, modification_mapping:dict=None):
        super().__init__(modification_mapping)

        if self.modification_mapping is None:
            self.modification_mapping = {}
            self.modification_mapping['cC'] = 'Carbamidomethyl@C'
            self.modification_mapping['oxM'] = 'Oxidation@M'
            self.modification_mapping['pS'] = 'Phospho@S'
            self.modification_mapping['pT'] = 'Phospho@T'
            self.modification_mapping['pY'] = 'Phospho@Y'
            self.modification_mapping['a'] = 'Acetyl@Protein N-term'

        self.column_mapping = {
            'sequence': 'naked_sequence',
            'rt':'rt',
            'rt_norm': 'rt_norm',
            'spec_idx': ['scan_no','raw_idx'],
            'mobility': 'mobility',
            'score': 'score',
            'charge': 'charge',
            'raw_name': 'raw_name',
            'fdr': 'q_value',
        }

        self.hdf_dataset = 'peptide_fdr'

    def _load_file(self, filename):
        with h5py.File(filename, 'r') as _hdf:
            dataset = _hdf[self.hdf_dataset]
            df = pd.DataFrame({col:dataset[col] for col in dataset.keys()})
            df['raw_name'] = os.path.basename(filename)[:-len('.ms_data.hdf')]
            df['precursor'] = df['precursor'].str.decode('utf-8')
            if 'scan_no' in df.columns:
                df['scan_no'] = df['scan_no'].astype('int')
            df['charge'] = df['charge'].astype(int)
            # min_rt = df.rt.min()
            # df['rt_norm'] = (df.rt-min_rt)/(df.rt.max()-min_rt)
            df['rt_norm'] = df.rt/df.rt.max()

        return df

    def _load_modifications(self, df: pd.DataFrame):
        self._psm_df['sequence'], self._psm_df['mods'], \
            self._psm_df['mod_sites'], self._psm_df['charge'], \
            self._psm_df['decoy'] = zip(*df['precursor'].apply(parse_ap))

psm_reader_provider.register_reader('alphapept', AlphaPeptReader)