# AUTOGENERATED! DO NOT EDIT! File to edit: nbdev_nbs/io/psm_reader/maxquant_reader.ipynb (unless otherwise specified).

__all__ = ['parse_mod_seq', 'MaxQuantReader']

# Cell
import pandas as pd
import numba

from alphabase.io.psm_reader.psm_reader import (
    PSMReaderBase, psm_reader_provider
)

@numba.njit
def parse_mod_seq(
    modseq,
    mod_sep='()',
    fixed_C=True,
    underscore_for_ncterm=True,
):
    PeptideModSeq = modseq
    mod_list = []
    site_list = []
    site = PeptideModSeq.find(mod_sep[0])
    while site != -1:
        site_end = PeptideModSeq.find(mod_sep[1],site+1)+1
        if site_end < len(PeptideModSeq) and PeptideModSeq[site_end] == mod_sep[1]:
            site_end += 1
        if underscore_for_ncterm: site_list.append(str(site-1))
        else: site_list.append(str(site))
        start_mod = site
        if start_mod > 0: start_mod -= 1
        mod_list.append(PeptideModSeq[start_mod:site_end])
        PeptideModSeq = PeptideModSeq[:site] + PeptideModSeq[site_end:]
        site = PeptideModSeq.find(mod_sep[0], site)
    if fixed_C:
        site = PeptideModSeq.find('C')
        while site != -1:
            if underscore_for_ncterm: site_list.append(str(site))
            else: site_list.append(str(site+1))
            mod_list.append(f'C{"Carbamidomethyl (C)".join(mod_sep)}')
            site = PeptideModSeq.find('C',site+1)
    return ';'.join(mod_list), ';'.join(site_list)


class MaxQuantReader(PSMReaderBase):
    def __init__(self,modification_mapping:dict=None):
        super().__init__(modification_mapping)

        self.mod_sep = '()'
        self.underscore_for_ncterm=True
        self.fixed_C = True

        if self.modification_mapping is None:
            self.modification_mapping = {}
            self.modification_mapping['_(Acetyl (Protein N-term))'] = 'Acetyl@Protein N-term'
            self.modification_mapping['C(Carbamidomethyl (C))'] = 'Carbamidomethyl@C'
            self.modification_mapping['M(Oxidation (M))'] = 'Oxidation@M'
            self.modification_mapping['S(Phospho (S))'] = 'Phospho@S'
            self.modification_mapping['T(Phospho (T))'] = 'Phospho@T'
            self.modification_mapping['Y(Phospho (Y))'] = 'Phospho@Y'
            self.modification_mapping['S(Phospho (ST))'] = 'Phospho@S'
            self.modification_mapping['T(Phospho (ST))'] = 'Phospho@T'
            self.modification_mapping['S(Phospho (STY))'] = 'Phospho@S'
            self.modification_mapping['T(Phospho (STY))'] = 'Phospho@T'
            self.modification_mapping['Y(Phospho (STY))'] = 'Phospho@Y'
            self.modification_mapping['N(Deamidation (NQ))'] = 'Deamidated@N'
            self.modification_mapping['Q(Deamidation (NQ))'] = 'Deamidated@Q'
            self.modification_mapping['K(GlyGly (K))'] = 'GlyGly@K'
            self.modification_mapping['_(ac)'] = 'Acetyl@Protein N-term'
            self.modification_mapping['M(ox)'] = 'Oxidation@M'
            self.modification_mapping['S(ph)'] = 'Phospho@S'
            self.modification_mapping['T(ph)'] = 'Phospho@T'
            self.modification_mapping['Y(ph)'] = 'Phospho@Y'
            self.modification_mapping['K(gl)'] = 'GlyGly@K'
            self.modification_mapping['E(Glu->pyro-Glu)'] = 'Glu->pyro-Glu@E^Protein N-term'
            self.modification_mapping['_(UniMod:1)'] = 'Acetyl@Protein N-term'
            self.modification_mapping['C(UniMod:4)'] = 'Carbamidomethyl@C'
            self.modification_mapping['M(UniMod:35)'] = 'Oxidation@M'
            self.modification_mapping['S(UniMod:21)'] = 'Phospho@S'
            self.modification_mapping['T(UniMod:21)'] = 'Phospho@T'
            self.modification_mapping['Y(UniMod:21)'] = 'Phospho@Y'

            for key, val in list(self.modification_mapping.items()):
                self.modification_mapping[f'{key[0]}[{key[2:-1]}]'] = val
                if key.startswith('_'):
                    self.modification_mapping[key[1:]] = val
                    self.modification_mapping[f'[{key[2:-1]}]'] = val

        self.column_mapping = {
            'sequence': 'Sequence',
            'charge': 'Charge',
            'rt': 'Retention time',
            'rt_norm': 'rt_norm',
            'ccs': 'CCS',
            'mobility': ['Mobility','IonMobility'],
            'spec_idx': ['Scan number','MS/MS scan number','Scan index'],
            'raw_name': 'Raw file',
            'score': 'Score',
            'proteins': 'Proteins',
            'genes': ['Gene Names','Gene names'],
            'decoy': 'decoy',
            'fdr': 'fdr',
        }
        self.mod_seq_column = 'Modified sequence'

    def _load_file(self, filename):
        df = pd.read_csv(filename, sep='\t')
        if not self.keep_all_psm:
            df = df[(df['Reverse']!='+')&(~pd.isna(df['Retention time']))]
        df.reset_index(drop=True,inplace=True)
        df.fillna('', inplace=True)
        if 'K0' in df.columns:
            df['Mobility'] = df['K0'] # Bug in MaxQuant, it should be 1/K0
        # min_rt = df['Retention time'].min()
        # df['rt_norm'] = (
        #     df['Retention time']-min_rt
        # )/(df['Retention time'].max()-min_rt)
        df['rt_norm'] = df['Retention time']/df['Retention time'].max()
        df['decoy'] = 0
        df.loc[df['Reverse']=='+','decoy'] == 1
        return df

    def _load_modifications(self, origin_df: pd.DataFrame):
        (
            self._psm_df['mods'],
            self._psm_df['mod_sites']
        ) = zip(
            *origin_df[self.mod_seq_column].apply(
                parse_mod_seq, mod_sep=self.mod_sep,
                fixed_C=self.fixed_C,
                underscore_for_ncterm=self.underscore_for_ncterm
            )
        )

psm_reader_provider.register_reader('maxquant', MaxQuantReader)