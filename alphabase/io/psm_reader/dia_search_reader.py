# AUTOGENERATED! DO NOT EDIT! File to edit: nbdev_nbs/io/psm_reader/dia_search_reader.ipynb (unless otherwise specified).

__all__ = ['SpectronautReader', 'OpenSwathReader', 'DiannReader']

# Cell
import pandas as pd

from alphabase.io.psm_reader.psm_reader import (
    psm_reader_provider
)

from alphabase.io.psm_reader.maxquant_reader import (
    MaxQuantReader
)

class SpectronautReader(MaxQuantReader):
    def __init__(self, modification_mapping:dict=None):
        super().__init__(modification_mapping)
        self.mod_sep = '[]'
        self.tsv_sep = '\t'

        self.column_mapping = {
            'sequence': 'StrippedPeptide',
            'charge': 'PrecursorCharge',
            'rt': ['RT','iRT','Tr_recalibrated','RetentionTime'],
            'rt_norm': 'rt_norm',
            'ccs': 'CCS',
            'mobility': ['Mobility','IonMobility'],
            'proteins': 'Protein Name',
            'uniprot_ids': 'UniProtIds',
            'genes': 'Genes',
        }
        self._mod_seq_columns = [
            'ModifiedPeptide',
            'ModifiedSequence',
            'FullUniModPeptideName',
        ]
        self.mod_seq_column = 'ModifiedPeptide'

    def _find_mod_seq_column(self, df):
        for mod_seq_col in self._mod_seq_columns:
            if mod_seq_col in df.columns:
                self.mod_seq_column = mod_seq_col
                break

    def _load_file(self, filename):
        df = pd.read_csv(filename, sep=self.tsv_sep)
        self._find_mod_seq_column(df)
        df.drop_duplicates([
            'ReferenceRun',self.mod_seq_column, 'PrecursorCharge'
        ], inplace=True)
        df.reset_index(drop=True, inplace=True)

        for rt_col in self.column_mapping['rt']:
            if rt_col not in df.columns: continue
            min_rt = df[rt_col].min()
            df['rt_norm'] = (
                df[rt_col] - min_rt
            )/(df[rt_col].max() - min_rt)
            break
        return df

class OpenSwathReader(SpectronautReader):
    def __init__(self, modification_mapping:dict=None):
        super().__init__(modification_mapping)
        self.mod_sep = '()'
        self.underscore_for_ncterm = False
        self.fixed_C=False

        self.column_mapping = {
            'sequence': 'PeptideSequence',
            'charge': 'PrecursorCharge',
            'rt': ['RT','iRT','Tr_recalibrated','RetentionTime'],
            'rt_norm':'rt_norm',
            'ccs': 'CCS',
            'mobility': ['Mobility','IonMobility'],
            'proteins': 'Protein Name',
            'uniprot_ids': 'UniProtID',
            'genes': 'Genes',
        }
        self._mod_seq_columns = [
            'FullUniModPeptideName',
            'ModifiedPeptide',
            'ModifiedSequence',
        ]
        self.mod_seq_column = 'FullUniModPeptideName'

    def _load_file(self, filename):
        df = pd.read_csv(filename, sep=self.tsv_sep)
        self._find_mod_seq_column(df)
        df.drop_duplicates([
            self.mod_seq_column, 'PrecursorCharge'
        ], inplace=True)
        df.reset_index(drop=True, inplace=True)

        for rt_col in self.column_mapping['rt']:
            if rt_col not in df.columns: continue
            min_rt = df[rt_col].min()
            df['rt_norm'] = (
                df[rt_col] - min_rt
            )/(df[rt_col].max() - min_rt)
            break
        return df

class DiannReader(SpectronautReader):
    def __init__(self, modification_mapping:dict=None):
        super().__init__(modification_mapping)
        self.mod_sep = '()'
        self.underscore_for_ncterm = False
        self.fixed_C=False

        self.column_mapping = {
            'raw_name': 'Run',
            'sequence': 'Stripped.Sequence',
            'charge': 'Precursor.Charge',
            'rt': ['RT','iRT','Tr_recalibrated','RetentionTime'],
            'rt_norm':'rt_norm',
            'ccs': 'CCS',
            'mobility': ['IM','IonMobility'],
            'proteins': 'Protein.Names',
            'uniprot_ids': 'Protein.Ids',
            'genes': 'Genes',
            'spec_idx': 'MS2.Scan',
        }
        self.mod_seq_column = 'Modified.Sequence'

    def _load_file(self, filename):
        df = pd.read_csv(filename, sep='\t')

        for rt_col in self.column_mapping['rt']:
            if rt_col not in df.columns: continue
            min_rt = df[rt_col].min()
            df['rt_norm'] = (
                df[rt_col] - min_rt
            )/(df[rt_col].max() - min_rt)
            break
        return df

psm_reader_provider.register_reader(
    'spectronaut', SpectronautReader
)
psm_reader_provider.register_reader(
    'openswath', OpenSwathReader
)
psm_reader_provider.register_reader(
    'diann', DiannReader
)