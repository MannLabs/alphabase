[
  {
    "objectID": "utils.html",
    "href": "utils.html",
    "title": "Utils",
    "section": "",
    "text": "source\n\nexplode_multiple_columns\n\n explode_multiple_columns (df:pandas.core.frame.DataFrame, columns:list)\n\n\nsource\n\n\nprocess_bar\n\n process_bar (iterator, len_iter)"
  },
  {
    "objectID": "psm_reader/msfragger_reader.html",
    "href": "psm_reader/msfragger_reader.html",
    "title": "MSFragger Reader",
    "section": "",
    "text": "source\n\nMSFragger_PSM_TSV_Reader\n\n MSFragger_PSM_TSV_Reader (column_mapping:dict=None,\n                           modification_mapping:dict=None, fdr=0.01,\n                           keep_decoy=False, rt_unit='second', **kwargs)\n\nThe Base class for all PSMReaders. The key of the sub-classes for different search engine format is to re-define column_mapping and modification_mapping.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncolumn_mapping\ndict\nNone\nA dict that maps alphabase’s columns to other search engine’s.The key of the column_mapping is alphabase’s column name, and the value could be the column name or a list of column namesin other engine’s result.If it is None, this dict will be init by self._init_column_mapping. The dict values could be either str or list, for exaplme:columns_mapping = { ‘sequence’: ‘NakedSequence’, #str ‘charge’: ‘Charge’, #str ‘proteins’:[‘Proteins’,‘UniprotIDs’], # list, this reader will automatically detect all of them.}Defaults to None.\n\n\nmodification_mapping\ndict\nNone\nA dict that maps alphabase’s modifications to other engine’s.If it is None, this dict will be init by self._init_modification_mapping. The dict values could be either str or list, for exaplme:modification_mapping = { ‘Oxidation@M’: ‘Oxidation (M)’, # str ‘Phospho@S’: [‘S(Phospho (STY))’,‘S(ph)’,‘pS’], # list, this reader will automatically detect all of them.}Defaults to None.\n\n\nfdr\nfloat\n0.01\nFDR level to keep PSMs.Defaults to 0.01.\n\n\nkeep_decoy\nbool\nFalse\nIf keep decoy PSMs in self.psm_df.Defautls to False.\n\n\nrt_unit\nstr\nsecond\n\n\n\nkwargs"
  },
  {
    "objectID": "psm_reader/maxquant_reader.html",
    "href": "psm_reader/maxquant_reader.html",
    "title": "MaxQuant PSM reader",
    "section": "",
    "text": "source\n\nMaxQuantReader\n\n MaxQuantReader (column_mapping:dict=None, modification_mapping:dict=None,\n                 fdr=0.01, keep_decoy=False, mod_sep='()',\n                 underscore_for_ncterm=True, fixed_C57=True,\n                 mod_seq_columns=['Modified sequence'], **kwargs)\n\nReader for MaxQuant msms.txt and evidence.txt\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncolumn_mapping\ndict\nNone\nBy default None. If None, use psm_reader_yaml['maxquant']['column_mapping'] (alphabase.psm_reader.psm_reader_yaml).\n\n\nmodification_mapping\ndict\nNone\nBy default None. If None, use psm_reader_yaml['maxquant']['modification_mapping'] (alphabase.psm_reader.psm_reader_yaml).\n\n\nfdr\nfloat\n0.01\nLoad PSMs with FDR < this fdr, by default 0.01\n\n\nkeep_decoy\nbool\nFalse\nIf keep decoy PSMs, by default False\n\n\nmod_sep\nstr\n()\nSymbols to separate modified sequences,e.g. AM(Oxidation)PIC(+57)QMK.By default ‘()’\n\n\nunderscore_for_ncterm\nbool\nTrue\nIf search engine uses an under score in N- and C-term, _(Acetyl)AM(Oxidation)PIC(+57)QMK_.by default True\n\n\nfixed_C57\nbool\nTrue\nIf true, the search engine will not show Carbamidomethylin the modified sequences. by default True\n\n\nmod_seq_columns\nlist\n[‘Modified sequence’]\nThe columns to find modified sequences, by default [‘Modified sequence’]\n\n\nkwargs\n\n\n\n\n\n\n\nsource\n\n\nparse_mod_seq\n\n parse_mod_seq (modseq:str, mod_sep:str='()', fixed_C57:bool=True,\n                underscore_for_ncterm:bool=True)\n\nExtract modifications and sites from the modified sequence (modseq)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmodseq\nstr\n\nmodified sequence to extract modifications.\n\n\nmod_sep\nstr\n()\nseparator to indicate the modification section. Defaults to ‘()’\n\n\nfixed_C57\nbool\nTrue\n\n\n\nunderscore_for_ncterm\nbool\nTrue\nIf modseq starts and ends with underscores. Defaults to True.\n\n\nReturns\ntuple\n\nstr: modification names, separated by ‘;’str: modification sites, separated by ‘;’.  0 for N-term; -1 for C-term; 1 to N for normal modifications.\n\n\n\n\n\nColumn and modification mapping from alphabase to MaxQuant\n\npsm_reader_yaml['maxquant']['column_mapping']\n\n{'sequence': 'Sequence',\n 'charge': 'Charge',\n 'rt': 'Retention time',\n 'ccs': 'CCS',\n 'mobility': ['Mobility', 'IonMobility', 'K0', '1/K0'],\n 'scan_num': ['Scan number', 'MS/MS scan number', 'Scan index'],\n 'raw_name': 'Raw file',\n 'precursor_mz': 'm/z',\n 'score': 'Score',\n 'proteins': 'Proteins',\n 'genes': ['Gene Names', 'Gene names'],\n 'decoy': 'Reverse'}\n\n\n\npsm_reader_yaml['maxquant']['modification_mapping']\n\n{'Acetyl@Protein N-term': ['_(Acetyl (Protein N-term))',\n  '_(ac)',\n  '_(UniMod:1)'],\n 'Carbamidomethyl@C': ['C(Carbamidomethyl (C))', 'C(UniMod:4)'],\n 'Oxidation@M': ['M(Oxidation (M))', 'M(ox)', 'M(UniMod:35)'],\n 'Phospho@S': ['S(Phospho (S))',\n  'S(Phospho (ST))',\n  'S(Phospho (STY))',\n  'S(ph)',\n  'S(UniMod:21)',\n  'pS'],\n 'Phospho@T': ['T(Phospho (T))',\n  'T(Phospho (ST))',\n  'T(Phospho (STY))',\n  'T(ph)',\n  'T(UniMod:21)',\n  'pT'],\n 'Phospho@Y': ['Y(Phospho (Y))',\n  'Y(Phospho (STY))',\n  'Y(ph)',\n  'Y(UniMod:21)',\n  'pY'],\n 'Deamidated@N': ['N(Deamidation (NQ))', 'N(de)'],\n 'Deamidated@Q': ['Q(Deamidation (NQ))', 'Q(de)'],\n 'GlyGly@K': ['K(GlyGly (K))', 'K(gl)']}\n\n\n\n\nTesting\n\nimport io\nimport numpy as np\n\n\nmq_tsv = io.StringIO('''Raw file    Scan number Scan index  Sequence    Length  Missed cleavages    Modifications   Modified sequence   Oxidation (M) Probabilities Oxidation (M) Score diffs   Acetyl (Protein N-term) Oxidation (M)   Proteins    Charge  Fragmentation   Mass analyzer   Type    Scan event number   Isotope index   m/z Mass    Mass error [ppm]    Mass error [Da] Simple mass error [ppm] Retention time  PEP Score   Delta score Score diff  Localization prob   Combinatorics   PIF Fraction of total spectrum  Base peak fraction  Precursor full scan number  Precursor Intensity Precursor apex fraction Precursor apex offset   Precursor apex offset time  Matches Intensities Mass deviations [Da]    Mass deviations [ppm]   Masses  Number of matches   Intensity coverage  Peak coverage   Neutral loss level  ETD identification type Reverse All scores  All sequences   All modified sequences  Reporter PIF    Reporter fraction   id  Protein group IDs   Peptide ID  Mod. peptide ID Evidence ID Oxidation (M) site IDs\n20190402_QX1_SeVW_MA_HeLa_500ng_LC11    81358   73979   AAAAAAAAAPAAAATAPTTAATTAATAAQ   29  0   Unmodified  _(Acetyl (Protein N-term))AAAAAAAAM(Oxidation (M))PAAAATAPTTAATTAATAAQ_         0   0   sp|P37108|SRP14_HUMAN   3   HCD FTMS    MULTI-MSMS  13  1   790.07495   2367.203    0.35311 0.00027898  -0.061634807    70.261  0.012774    41.423  36.666  NaN NaN 1   0   0   0   81345   10653955    0.0338597821787898  -11 0.139877319335938   y1;y2;y3;y4;y11;y1-NH3;y2-NH3;a2;b2;b3;b4;b5;b6;b7;b8;b9;b11;b12;b6(2+);b8(2+);b13(2+);b18(2+)  2000000;2000000;300000;400000;200000;1000000;400000;300000;600000;1000000;2000000;3000000;3000000;3000000;3000000;2000000;600000;500000;1000000;2000000;300000;200000   5.2861228709844E-06;-6.86980268369553E-05;-0.00238178789771837;0.000624715964988809;-0.0145624692099773;-0.000143471782706683;-0.000609501446461991;-0.000524972720768346;0.00010190530804266;5.8620815195809E-05;0.000229901232955854;-0.000108750048696038;-0.000229593152369034;0.00183148682538103;0.00276641182404092;0.000193118923334623;0.00200988580445483;0.000102216846016745;5.86208151389656E-05;0.000229901232955854;-0.00104559184393338;0.00525030008475369 0.0359413365445091;-0.314964433555295;-8.23711898839045;1.60102421155213;-14.8975999917227;-1.10320467763838;-3.03102462870716;-4.56152475051625;0.712219104095465;0.273777366204575;0.806231096969562;-0.305312183824154;-0.537399178230218;3.67572664689217;4.85930954169285;0.301587577451224;2.48616190909398;0.116225745519871;0.273777365939099;0.806231096969562;-2.19774169175011;7.53961026980589  147.076413378177;218.113601150127;289.153028027798;390.197699998035;977.50437775671;130.050013034583;201.087592852046;115.087114392821;143.081402136892;214.118559209185;285.155501716567;356.192954155649;427.230188786552;498.265241494374;569.301420357176;640.341107437877;808.429168310795;879.468189767554;214.118559209185;285.155501716567;475.757386711244;696.362265007215    22  0.262893575628735   0.0826446280991736  None    Unknown     41.4230894199432;4.75668724862449;3.9515580701967   AAAAAAAAAPAAAATAPTTAATTAATAAQ;FHRGPPDKDDMVSVTQILQGK;PVTLWITVTHMQADEVSVWR    _AAAAAAAAAPAAAATAPTTAATTAATAAQ_;_FHRGPPDKDDMVSVTQILQGK_;_PVTLWITVTHMQADEVSVWR_          0   1443    0   0   0   \n20190402_QX1_SeVW_MA_HeLa_500ng_LC11    81391   74010   AAAAAAAAAAPAAAATAPTTAATTAATAAQ  29  0   Unmodified  _AAAAAAAAAPAAAATAPTTAATTAATAAQ_         0   0   sp|P37108|SRP14_HUMAN   2   HCD FTMS    MULTI-MSMS  14  0   1184.6088   2367.203    0.037108    4.3959E-05  1.7026696   70.287  7.1474E-09  118.21  100.52  NaN NaN 1   0   0   0   81377   9347701 0.166790347889974   -10 0.12664794921875    y1;y2;y3;y4;y5;y9;y12;y13;y14;y20;y13-H2O;y20-H2O;y1-NH3;y20-NH3;b3;b4;b5;b6;b7;b8;b9;b11;b12;b13;b14;b15;b16;b19;b15-H2O;b16-H2O   500000;600000;200000;400000;200000;100000;200000;1000000;200000;300000;200000;100000;100000;70000;300000;900000;2000000;3000000;5000000;8000000;6000000;600000;800000;600000;200000;300000;200000;300000;300000;1000000 -0.000194444760495571;0.000149986878682284;0.000774202587820128;-0.0002445094036716;0.000374520568641401;-0.00694293246522193;-0.0109837291331587;-0.0037745820627606;-0.000945546471939451;0.00152326440706929;0.00506054832726477;0.00996886361417637;6.25847393393997E-05;-0.024881067836759;-3.11821549132674E-05;-0.000183099230639527;0.000161332473453513;0.000265434980121881;0.000747070697229901;0.000975534518261156;0.00101513939785036;0.00651913000274362;0.0058584595163893;0.00579536744021425;0.00131097834105276;-0.0131378531671089;0.00472955218901916;-0.00161006322559842;-0.00201443239325272;0.0227149399370319 -1.32206444236914;0.687655553213019;2.6775131607882;-0.626628140021726;0.811995006209331;-8.6203492854282;-10.1838066275079;-3.21078702288986;-0.758483069159249;0.881072738747222;4.37168212373889;5.82682888353564;0.481236695337485;-14.5343986203644;-0.145630261806375;-0.642102166533079;0.452935954800214;0.621293379181583;1.49934012872483;1.71355878380837;1.58531240493271;8.06399202403175;6.6614096214532;6.09718023739784;1.28333378040908;-11.7030234519348;3.96235146626144;-1.07856912288932;-1.82370619437775;19.3220953109188    147.07661310906;218.113382465221;289.149872037312;390.198569223404;461.235063981231;805.411965958065;1078.54847749073;1175.59403219566;1246.62831694787;1728.87474561429;1157.57463237897;1710.85573532879;130.049806978061;1711.87460084504;214.118649012155;285.155914717031;356.192684073126;427.22969375842;498.266325910503;569.303211234482;640.340285417402;808.424659066597;879.462433524883;950.49961040476;1021.54120858166;1122.60333588727;1193.62258226971;1492.77704268533;1104.58164778019;1175.59403219566  30  0.474003002083763   0.167630057803468   None    Unknown     118.209976573419;17.6937689289157;17.2534171481793  AAAAAAAAAPAAAATAPTTAATTAATAAQ;SELKQEAMQSEQLQSVLYLK;VGSSVPSKASELVVMGDHDAARR  _AAAAAAAAAPAAAATAPTTAATTAATAAQ_;_SELKQEAM(Oxidation (M))QSEQLQSVLYLK_;_VGSSVPSKASELVVMGDHDAARR_         1   1443    0   0   1   \n20190402_QX1_SeVW_MA_HeLa_500ng_LC11    107307  98306   AAAAAAAGDSDSWDADAFSVEDPVRK  26  1   Acetyl (Protein N-term) _(Acetyl (Protein N-term))AAAAAAAGDSDSWDADAFSVEDPVRK_           1   0   sp|O75822|EIF3J_HUMAN   3   HCD FTMS    MULTI-MSMS  10  2   879.06841   2634.1834   -0.93926    -0.00082567 -3.2012471  90.978  2.1945E-12  148.95  141.24  NaN NaN 1   0   0   0   107297  10193939    0.267970762043589   -8  0.10211181640625    y1;y2;y4;y5;y6;y7;y8;y9;y10;y11;y12;y13;y14;y15;y17;y18;y19;y20;y21;y23;y21-H2O;y1-NH3;y19-NH3;y14(2+);y16(2+);y22(2+);a2;b2;b3;b4;b5;b6;b7 300000;200000;3000000;600000;1000000;500000;2000000;1000000;1000000;1000000;90000;1000000;400000;900000;1000000;400000;3000000;2000000;1000000;400000;100000;200000;200000;80000;100000;200000;200000;2000000;5000000;5000000;5000000;2000000;300000    1.34859050149316E-07;-6.05140996867704E-06;2.27812602133781E-05;0.00128986659160546;-0.00934536073077652;0.000941953783126337;-0.00160424237344614;-0.00239257341399934;-0.00111053968612396;-0.00331340710044969;0.00330702864630439;0.000963683996815234;0.00596290290945944;-0.00662057038289277;-0.0117122701335575;0.00777853472800416;0.0021841542961738;0.000144322111736983;-0.00087403893667215;0.0197121595674616;-0.021204007680808;-0.000308954599830713;-0.026636719419912;-0.0137790992353075;0.00596067266928912;-0.0077053835773313;9.11402199221811E-06;-0.000142539300128419;-0.000251999832926231;1.90791054137662E-05;-0.00236430185879044;-9.54583337602344E-05;-0.000556959493223985  0.000916705048437201;-0.0199575598103408;0.0456231928690862;2.09952637717462;-12.5708704058425;1.11808305811426;-1.72590731777249;-2.22239181008062;-0.967696370445928;-2.62418809422166;2.47964286628144;0.665205752892023;3.64753748704453;-3.84510115530963;-6.08782672045773;3.81508105974837;1.04209904973991;0.0666012719936656;-0.390545453668809;8.28224925531311;-9.55133250134922;-2.37499239179248;-12.8127653858411;-16.846761946123;6.48662354975264;-6.67117082062383;0.0580151981289049;-0.770098855873447;-0.983876895688683;0.0583162347158579;-5.93738717724506;-0.203431522818505;-1.03087538746314  147.112804035741;303.21392125011;499.33507018564;614.360746132308;743.413974455831;842.472101057517;929.506675663573;1076.57587791081;1147.61170966489;1262.6408555643;1333.67134891635;1448.700635293;1634.77494902759;1721.81956091078;1923.88362405243;2038.89107627957;2095.9181343836;2166.95728800359;2237.99542015244;2380.04906152953;2220.00518543488;130.0865640237;2078.92040615582;817.907873297785;918.917619246831;1155.02717356753;157.097144992378;185.0922112678;256.129434516133;327.166277224995;398.205774393759;469.240619338034;540.278194626993  33  0.574496146107112   0.14410480349345    None    Unknown     148.951235201399;7.71201258444522;7.36039532447559  AAAAAAAGDSDSWDADAFSVEDPVRK;PSRQESELMWQWVDQRSDGER;HTLTSFWNFKAGCEEKCYSNR  _(Acetyl (Protein N-term))AAAAAAAGDSDSWDADAFSVEDPVRK_;_PSRQESELM(Oxidation (M))WQWVDQRSDGER_;_HTLTSFWNFKAGCEEKCYSNR_            2   625 1   1   2   '''\n)\n\nmq_reader = psm_reader_provider.get_reader('maxquant')\nmq_reader.import_file(mq_tsv)\nassert len(mq_reader.psm_df) == 3\nassert mq_reader.psm_df.mods.values[1] == 'Acetyl@Protein N-term;Oxidation@M'\nassert mq_reader.psm_df.mod_sites.values[1] == '0;9'\nassert mq_reader.psm_df.mods.values[2] == ''\nassert mq_reader.psm_df.mod_sites.values[2] == ''\nassert np.all(np.array(mq_reader.modification_mapping['Phospho@S'])==np.array([\n    'S(Phospho (S))',\n    'S(Phospho (ST))',\n    'S(Phospho (STY))',\n    'S(ph)',\n    'S(UniMod:21)',\n    'pS',\n    'S[Phospho (S)]',\n    'S[Phospho (ST)]',\n    'S[Phospho (STY)]',\n    'S[ph]',\n    'S[UniMod:21]'])\n)\nmq_reader.psm_df\n\n\n\n\n\n  \n    \n      \n      sequence\n      charge\n      rt\n      scan_num\n      raw_name\n      precursor_mz\n      score\n      proteins\n      decoy\n      spec_idx\n      mods\n      mod_sites\n      nAA\n      rt_norm\n    \n  \n  \n    \n      0\n      AAAAAAAGDSDSWDADAFSVEDPVRK\n      3\n      90.978\n      107307\n      20190402_QX1_SeVW_MA_HeLa_500ng_LC11\n      879.06841\n      148.950\n      sp|O75822|EIF3J_HUMAN\n      0\n      107306\n      Acetyl@Protein N-term\n      0\n      26\n      1.000000\n    \n    \n      1\n      AAAAAAAAAPAAAATAPTTAATTAATAAQ\n      3\n      70.261\n      81358\n      20190402_QX1_SeVW_MA_HeLa_500ng_LC11\n      790.07495\n      41.423\n      sp|P37108|SRP14_HUMAN\n      0\n      81357\n      Acetyl@Protein N-term;Oxidation@M\n      0;9\n      29\n      0.772286\n    \n    \n      2\n      AAAAAAAAAAPAAAATAPTTAATTAATAAQ\n      2\n      70.287\n      81391\n      20190402_QX1_SeVW_MA_HeLa_500ng_LC11\n      1184.60880\n      118.210\n      sp|P37108|SRP14_HUMAN\n      0\n      81390\n      \n      \n      30\n      0.772571"
  },
  {
    "objectID": "psm_reader/psm_reader.html",
    "href": "psm_reader/psm_reader.html",
    "title": "Class Base for PSM Readers",
    "section": "",
    "text": "source"
  },
  {
    "objectID": "psm_reader/psm_reader.html#psmreaderbase",
    "href": "psm_reader/psm_reader.html#psmreaderbase",
    "title": "Class Base for PSM Readers",
    "section": "PSMReaderBase",
    "text": "PSMReaderBase\nPSMReaderBase is the base abstract class for all readers. It defines the basic procedures for importing other search engine results into AlphaBase format.\nThe main entry method is import_file(filename), and it will generate self._psm_df (or property self.psm_df) after import_file.\nIn import_file method, we designed five steps to load result files in to AlphaBase format:\n\norigin_df = self._load_file(filename). We load result files into a dataframe without doing any file conversion. As different search engines have different file format, some of them are not in the tabular format. All subclass of PSMReaderBase need to re-implement this method.\nself._translate_columns(origin_df). We translate columns in origin_df into AlphaBase columns by self.column_mapping. self.column_mapping provides a flexible way for developers to extract their required columns.\nself._load_modifications(origin_df). As different search engines have different representation of modifications. We use this method to extract the modifications into self._psm_df['mods'] and self._psm_df['mod_sites']. Note that the modification names are still in other search engines’ format. All subclass of PSMReaderBase need to re-implement this method.\nself._translate_modifications. Convert modification names into AlphaBase names (unimod_name@AA). For most of the search engines, we need a dict (self.modification_mapping) to map search engine modification format into AlphaBase (unimod_name@AA, unimod_name is  in the unimod xml file). All subclass of PSMReaderBase need to re-implement this method.\nself._post_process(filename, origin_df). Any required post-processing steps. For example, we remove unknown modifications here.\n\n\nOther results must be converted into the alphabase dataframe with required columns:\n\nsequence (str): AA sequence, for example, ‘ATMYPEDR’.\nmods (str): modification names, separated by ‘;’. For example, ‘Oxidation@M’, ‘Acetyl@Protein N-term;Oxidation@M’.\nmod_sites (str): modification sites, seperated by ‘;’. For example, ‘3’, ‘0;3’. The N-term site is 0, and the C-term site is -1, and all other modification sites start from 1.\nnAA (int): number of AA in the sequence, could be set by df['nAA']=df.sequence.str.len.\ncharge (int): precursor charge states.\nrt (float): retention time (RT) of peptides, in minutes by default.\nrt_norm (float): RT normalized by the maximum value, could be set by df['rt_norm'] = df.rt/df.rt.max. ### and optional columns:\nccs (float): collisional cross section (CCS) value, requred for IM data.\nmobility (float): precursor ion mobility value, requred for IM data.\nprecursor_mz (float): precursor m/z value.\nproteins (str): protein names, separated by ‘;’.\ngenes (str): gene names, separated by ‘;’.\nprotein_ids (str): protein ids or uniprot ids, separated by ‘;’.\nscore (float): PSM score. The larger the better PSMs, meaning that E-value or P-value scores must be -log.\nfdr (float): FDR or q-value.\nraw_name (str): Raw file name.\nspec_idx (int): spectrum index starting from 0 in RAW data. For thermo RAW, it is also Scan number - 1. We can use it to locate the MS2 spectrum for identification.\nquery_id (int or str): the unique id for not only inlucdes unique spectrum (spec_idx), but also the precursor or MS1 isotope index. It could be query_idx in alphapept.\ndecoy: 0 if the peptide is target match, otherwise 1.\n\n/Users/zengwenfeng/opt/anaconda3/lib/python3.8/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\nsource\n\n\nPSMReaderBase\n\n PSMReaderBase (column_mapping:dict=None, modification_mapping:dict=None,\n                fdr=0.01, keep_decoy=False, rt_unit:str='minute',\n                **kwargs)\n\nThe Base class for all PSMReaders. The key of the sub-classes for different search engine format is to re-define column_mapping and modification_mapping.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncolumn_mapping\ndict\nNone\nA dict that maps alphabase’s columns to other search engine’s.The key of the column_mapping is alphabase’s column name, and the value could be the column name or a list of column namesin other engine’s result.If it is None, this dict will be init by self._init_column_mapping. The dict values could be either str or list, for exaplme:columns_mapping = { ‘sequence’: ‘NakedSequence’, #str ‘charge’: ‘Charge’, #str ‘proteins’:[‘Proteins’,‘UniprotIDs’], # list, this reader will automatically detect all of them.}Defaults to None.\n\n\nmodification_mapping\ndict\nNone\nA dict that maps alphabase’s modifications to other engine’s.If it is None, this dict will be init by self._init_modification_mapping. The dict values could be either str or list, for exaplme:modification_mapping = { ‘Oxidation@M’: ‘Oxidation (M)’, # str ‘Phospho@S’: [‘S(Phospho (STY))’,‘S(ph)’,‘pS’], # list, this reader will automatically detect all of them.}Defaults to None.\n\n\nfdr\nfloat\n0.01\nFDR level to keep PSMs.Defaults to 0.01.\n\n\nkeep_decoy\nbool\nFalse\nIf keep decoy PSMs in self.psm_df.Defautls to False.\n\n\nrt_unit\nstr\nminute\n\n\n\nkwargs\n\n\n\n\n\n\n\nsource\n\n\nPSMReaderBase.add_modification_mapping\n\n PSMReaderBase.add_modification_mapping (modification_mapping:dict)\n\nmodification_mapping example (MaxQuant):\n{\n  'Acetyl@Protein N-term': [\n    '_(Acetyl (Protein N-term))',\n    '_(ac)',\n    '_(UniMod:1)',\n  ]\n  'Carbamidomethyl@C': [\n    'C(Carbamidomethyl (C))',\n    'C(UniMod:4)',\n  ]\n  'Oxidation@M': [\n    'M(Oxidation (M))',\n    'M(ox)',\n    'M(UniMod:35)',\n  ]\n  'Phospho@S': [\n    'S(Phospho (S))',\n    'S(Phospho (ST))',\n    'S(Phospho (STY))',\n    'S(ph)',\n    'S(UniMod:21)',\n    'pS',\n  ]\n  'Phospho@T': [\n    'T(Phospho (T))',\n    'T(Phospho (ST))',\n    'T(Phospho (STY))',\n    'T(ph)',\n    'T(UniMod:21)',\n    'pT',\n  ]\n  'Phospho@Y': [\n    'Y(Phospho (Y))',\n    'Y(Phospho (STY))',\n    'Y(ph)',\n    'Y(UniMod:21)',\n    'pY',\n  ]\n  'Deamidated@N': ['N(Deamidation (NQ))','N(de)']\n  'Deamidated@Q': ['Q(Deamidation (NQ))','Q(de)']\n  'GlyGly@K': ['K(GlyGly (K))', 'K(gl)']\n}\n\nsource\n\n\nPSMReaderBase.set_modification_mapping\n\n PSMReaderBase.set_modification_mapping (modification_mapping:dict)\n\n\nsource\n\n\nPSMReaderBase.import_file\n\n PSMReaderBase.import_file (_file:str)\n\nThis is the main entry function of PSM readers, it imports the file with following steps:\norigin_df = self._load_file(_file)\nself._translate_columns(origin_df)\nself._translate_decoy(origin_df)\nself._translate_score(origin_df)\nself._load_modifications(origin_df)\nself._translate_modifications()\nself._post_process(origin_df)\n\nsource\n\n\nPSMReaderBase.normalize_rt\n\n PSMReaderBase.normalize_rt ()\n\n\nsource\n\n\nPSMReaderBase.normalize_rt_by_raw_name\n\n PSMReaderBase.normalize_rt_by_raw_name ()"
  },
  {
    "objectID": "psm_reader/alphapept_reader.html",
    "href": "psm_reader/alphapept_reader.html",
    "title": "AlphaPept PSM Reader",
    "section": "",
    "text": "source\n\nAlphaPeptReader\n\n AlphaPeptReader (column_mapping:dict=None,\n                  modification_mapping:dict=None, fdr=0.01,\n                  keep_decoy=False, **kwargs)\n\nReading PSMs from alphapept’s *.ms_data.hdf\n\nsource\n\n\nget_x_tandem_score\n\n get_x_tandem_score (df:pandas.core.frame.DataFrame)\n\n\nsource\n\n\nparse_ap\n\n parse_ap (precursor)\n\nParser to parse peptide strings\n\n\nColumn and modification mapping from alphabase to MaxQuant\n\npsm_reader_yaml['alphapept']['column_mapping']\n\n{'rt': 'rt',\n 'scan_num': 'scan_no',\n 'spec_idx': 'raw_idx',\n 'query_id': 'query_idx',\n 'mobility': 'mobility',\n 'score': 'score',\n 'precursor_mz': 'mz',\n 'charge': 'charge',\n 'raw_name': 'raw_name',\n 'fdr': 'q_value',\n 'decoy': 'decoy'}\n\n\n\npsm_reader_yaml['alphapept']['modification_mapping']\n\n{'Carbamidomethyl@C': 'cC',\n 'Oxidation@M': 'oxM',\n 'Phospho@S': 'pS',\n 'Phospho@T': 'pT',\n 'Phospho@Y': 'pY',\n 'Acetyl@Protein N-term': 'a'}\n\n\nThe modified sequence column is precursor column"
  },
  {
    "objectID": "psm_reader/pfind_reader.html",
    "href": "psm_reader/pfind_reader.html",
    "title": "pFind PSM Reader",
    "section": "",
    "text": "source\n\nparse_pfind_protein\n\n parse_pfind_protein (protein, keep_reverse=True)\n\n\nsource\n\n\nget_pFind_mods\n\n get_pFind_mods (pfind_mod_str)\n\n\nsource\n\n\ntranslate_pFind_mod\n\n translate_pFind_mod (mod_str)\n\n\nsource\n\n\nconvert_one_pFind_mod\n\n convert_one_pFind_mod (mod)\n\n/Users/zengwenfeng/opt/anaconda3/lib/python3.8/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\nsource\n\n\npFindReader\n\n pFindReader (column_mapping:dict=None, modification_mapping:dict=None,\n              fdr=0.01, keep_decoy=False, **kwargs)\n\nThe Base class for all PSMReaders. The key of the sub-classes for different search engine format is to re-define column_mapping and modification_mapping.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncolumn_mapping\ndict\nNone\nA dict that maps alphabase’s columns to other search engine’s.The key of the column_mapping is alphabase’s column name, and the value could be the column name or a list of column namesin other engine’s result.If it is None, this dict will be init by self._init_column_mapping. The dict values could be either str or list, for exaplme:columns_mapping = { ‘sequence’: ‘NakedSequence’, #str ‘charge’: ‘Charge’, #str ‘proteins’:[‘Proteins’,‘UniprotIDs’], # list, this reader will automatically detect all of them.}Defaults to None.\n\n\nmodification_mapping\ndict\nNone\nA dict that maps alphabase’s modifications to other engine’s.If it is None, this dict will be init by self._init_modification_mapping. The dict values could be either str or list, for exaplme:modification_mapping = { ‘Oxidation@M’: ‘Oxidation (M)’, # str ‘Phospho@S’: [‘S(Phospho (STY))’,‘S(ph)’,‘pS’], # list, this reader will automatically detect all of them.}Defaults to None.\n\n\nfdr\nfloat\n0.01\nFDR level to keep PSMs.Defaults to 0.01.\n\n\nkeep_decoy\nbool\nFalse\nIf keep decoy PSMs in self.psm_df.Defautls to False.\n\n\nkwargs\n\n\n\n\n\n\n\n\nColumn and modification mapping from alphabase to pFind\n\npsm_reader_yaml['pfind']['column_mapping']\n\n{'sequence': 'Sequence',\n 'charge': 'Charge',\n 'rt': 'RT',\n 'raw_name': 'raw_name',\n 'query_id': 'File_Name',\n 'scan_num': 'Scan_No',\n 'score': 'Final_Score',\n 'proteins': 'Proteins',\n 'uniprot_ids': 'Proteins',\n 'fdr': 'Q-value',\n 'decoy': ['Target/Decoy', 'Targe/Decoy']}\n\n\nThere is no modification mapping as pFind also uses unimod name for all modifications, we just need to convert the sites (AAs) accordingly.\n\n\nTesting"
  },
  {
    "objectID": "psm_reader/dia_psm_reader.html",
    "href": "psm_reader/dia_psm_reader.html",
    "title": "DIA PSM reader",
    "section": "",
    "text": "As we know so far, all DIA search engines have similar tabular files to MaxQaunt, so here, all DIAReaders are inherited from MaxQauntReader.\n\nsource\n\nSwathReader\n\n SwathReader (column_mapping:dict=None, modification_mapping:dict=None,\n              fdr=0.01, keep_decoy=False, mod_sep='()',\n              underscore_for_ncterm=False, fixed_C57=False,\n              mod_seq_columns=['ModifiedPeptide', 'ModifiedSequence',\n              'FullUniModPeptideName', 'ModifiedPeptideSequence',\n              'LabeledSequence', 'FullUniModPeptideName'], csv_sep='\\t',\n              **kwargs)\n\nReader for Spectronaut’s output library TSV/CSV.\nOther parameters, please see MaxQuantReader in alphabase.psm_reader.maxquant_reader\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncolumn_mapping\ndict\nNone\n\n\n\nmodification_mapping\ndict\nNone\n\n\n\nfdr\nfloat\n0.01\n\n\n\nkeep_decoy\nbool\nFalse\n\n\n\nmod_sep\nstr\n()\n\n\n\nunderscore_for_ncterm\nbool\nFalse\n\n\n\nfixed_C57\nbool\nFalse\n\n\n\nmod_seq_columns\nlist\n[‘ModifiedPeptide’, ‘ModifiedSequence’, ‘FullUniModPeptideName’, ‘ModifiedPeptideSequence’, ‘LabeledSequence’, ‘FullUniModPeptideName’]\n\n\n\ncsv_sep\nstr\n\nDelimiter for TSV/CSV, by default ’ ’\n\n\nkwargs\n\n\n\n\n\n\n\nsource\n\n\nSpectronautReader\n\n SpectronautReader (column_mapping:dict=None,\n                    modification_mapping:dict=None, fdr=0.01,\n                    keep_decoy=False, mod_sep='[]',\n                    underscore_for_ncterm=True, fixed_C57=False,\n                    mod_seq_columns=['ModifiedPeptide',\n                    'ModifiedSequence', 'FullUniModPeptideName',\n                    'ModifiedPeptideSequence', 'LabeledSequence',\n                    'FullUniModPeptideName'], csv_sep='\\t',\n                    rt_unit='minute', **kwargs)\n\nReader for Spectronaut’s output library TSV/CSV.\nOther parameters, please see MaxQuantReader in alphabase.psm_reader.maxquant_reader\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncolumn_mapping\ndict\nNone\n\n\n\nmodification_mapping\ndict\nNone\n\n\n\nfdr\nfloat\n0.01\n\n\n\nkeep_decoy\nbool\nFalse\n\n\n\nmod_sep\nstr\n[]\n\n\n\nunderscore_for_ncterm\nbool\nTrue\n\n\n\nfixed_C57\nbool\nFalse\n\n\n\nmod_seq_columns\nlist\n[‘ModifiedPeptide’, ‘ModifiedSequence’, ‘FullUniModPeptideName’, ‘ModifiedPeptideSequence’, ‘LabeledSequence’, ‘FullUniModPeptideName’]\n\n\n\ncsv_sep\nstr\n\nDelimiter for TSV/CSV, by default ’ ’\n\n\nrt_unit\nstr\nminute\n\n\n\nkwargs\n\n\n\n\n\n\n\n\nColumn and modification mapping from alphabase to Spectronaut\n\npsm_reader_yaml['spectronaut']['column_mapping']\n\n{'raw_name': 'ReferenceRun',\n 'sequence': ['StrippedPeptide', 'PeptideSequence'],\n 'charge': 'PrecursorCharge',\n 'rt': ['RT',\n  'iRT',\n  'Tr_recalibrated',\n  'RetentionTime',\n  'NormalizedRetentionTime'],\n 'ccs': 'CCS',\n 'precursor_mz': 'PrecursorMz',\n 'mobility': ['Mobility', 'IonMobility', 'PrecursorIonMobility'],\n 'proteins': ['Protein Name', 'ProteinId', 'ProteinID', 'ProteinName'],\n 'uniprot_ids': ['UniProtIds', 'UniProtID', 'UniprotId'],\n 'genes': ['Genes', 'Gene', 'GeneName']}\n\n\nmodification_mapping is the same as MaxQuantReader\nAnd alphabase will look for columns containing modified sequence on:\n\npsm_reader_yaml['spectronaut']['mod_seq_columns']\n\n['ModifiedPeptide',\n 'ModifiedSequence',\n 'FullUniModPeptideName',\n 'ModifiedPeptideSequence',\n 'LabeledSequence',\n 'FullUniModPeptideName']\n\n\n\nsource\n\n\nDiannReader\n\n DiannReader (column_mapping:dict=None, modification_mapping:dict=None,\n              fdr=0.01, keep_decoy=False, mod_sep='()',\n              underscore_for_ncterm=False, fixed_C57=False, csv_sep='\\t',\n              rt_unit='minute', **kwargs)\n\nReader for Spectronaut’s output library TSV/CSV.\nOther parameters, please see MaxQuantReader in alphabase.psm_reader.maxquant_reader\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncolumn_mapping\ndict\nNone\n\n\n\nmodification_mapping\ndict\nNone\n\n\n\nfdr\nfloat\n0.01\n\n\n\nkeep_decoy\nbool\nFalse\n\n\n\nmod_sep\nstr\n()\n\n\n\nunderscore_for_ncterm\nbool\nFalse\n\n\n\nfixed_C57\nbool\nFalse\n\n\n\ncsv_sep\nstr\n\nDelimiter for TSV/CSV, by default ’ ’\n\n\nrt_unit\nstr\nminute\n\n\n\nkwargs\n\n\n\n\n\n\n\nsource\n\n\nSpectronautReportReader\n\n SpectronautReportReader (column_mapping:dict=None,\n                          modification_mapping:dict=None, fdr=0.01,\n                          keep_decoy=False, mod_sep='[]',\n                          underscore_for_ncterm=True, fixed_C57=False,\n                          csv_sep=',', rt_unit='minute', **kwargs)\n\nReader for Spectronaut’s report TSV/CSV.\nOther parameters, please see MaxQuantReader in alphabase.psm_reader.maxquant_reader\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncolumn_mapping\ndict\nNone\n\n\n\nmodification_mapping\ndict\nNone\n\n\n\nfdr\nfloat\n0.01\n\n\n\nkeep_decoy\nbool\nFalse\n\n\n\nmod_sep\nstr\n[]\n\n\n\nunderscore_for_ncterm\nbool\nTrue\n\n\n\nfixed_C57\nbool\nFalse\n\n\n\ncsv_sep\nstr\n,\nDelimiter for TSV/CSV, by default ‘,’\n\n\nrt_unit\nstr\nminute\n\n\n\nkwargs\n\n\n\n\n\n\n\n\nColumn and modification mapping from alphabase to DiaNN\n\npsm_reader_yaml['diann']['column_mapping']\n\n{'raw_name': 'Run',\n 'sequence': 'Stripped.Sequence',\n 'charge': 'Precursor.Charge',\n 'rt': 'RT',\n 'ccs': 'CCS',\n 'mobility': ['IM', 'IonMobility'],\n 'proteins': 'Protein.Names',\n 'uniprot_ids': 'Protein.Ids',\n 'genes': 'Genes',\n 'scan_num': 'MS2.Scan',\n 'score': 'CScore'}\n\n\nThe modified sequence column in DiaNN is Modified.Sequence\n\n\nTesting\n\nfrom io import StringIO\n\n\ntsv = StringIO('''R.FileName,R.Replicate,EG.PrecursorId,EG.ApexRT,FG.CalibratedMassAccuracy (PPM),FG.CalibratedMz\n20211203_EXPL2_SoSt_SA_DIA_HeLa_1000mz_noCB_01,1,_VIETPENDFK_.2,40.826847076416,-0.6350307649846,596.298998773218\n20211203_EXPL2_SoSt_SA_DIA_HeLa_1000mz_noCB_01,1,_GFSNEVSSK_.2,19.1254806518555,-1.54873822486555,477.730400257423\n20211203_EXPL2_SoSt_SA_DIA_HeLa_1000mz_noCB_01,1,_HLLNQAVGEEEVPK_.3,42.0593299865723,-0.309173676987587,521.611288926824\n20211203_EXPL2_SoSt_SA_DIA_HeLa_1000mz_noCB_01,1,_DATM[Oxidation (M)]EVQR_.2,12.8398199081421,-3.31103772642203,483.222124398527\n''')\n\nspn_reader = psm_reader_provider.get_reader('spectronaut_report')\nspn_reader.import_file(tsv)\nassert len(spn_reader.psm_df) == 4\nassert (spn_reader.psm_df.mods=='Oxidation@M').sum()==1\nassert (spn_reader.psm_df.mod_sites=='4').sum()==1\nspn_reader.psm_df\n\n\n\n\n\n  \n    \n      \n      raw_name\n      rt\n      charge\n      mods\n      mod_sites\n      sequence\n      nAA\n      rt_norm\n      precursor_mz\n    \n  \n  \n    \n      0\n      20211203_EXPL2_SoSt_SA_DIA_HeLa_1000mz_noCB_01\n      12.839820\n      2\n      Oxidation@M\n      4\n      DATMEVQR\n      8\n      0.305279\n      483.221474\n    \n    \n      1\n      20211203_EXPL2_SoSt_SA_DIA_HeLa_1000mz_noCB_01\n      19.125481\n      2\n      \n      \n      GFSNEVSSK\n      9\n      0.454726\n      477.729989\n    \n    \n      2\n      20211203_EXPL2_SoSt_SA_DIA_HeLa_1000mz_noCB_01\n      40.826847\n      2\n      \n      \n      VIETPENDFK\n      10\n      0.970697\n      596.298236\n    \n    \n      3\n      20211203_EXPL2_SoSt_SA_DIA_HeLa_1000mz_noCB_01\n      42.059330\n      3\n      \n      \n      HLLNQAVGEEEVPK\n      14\n      1.000000\n      521.610617\n    \n  \n\n\n\n\n\ntsv = StringIO('''ReferenceRun  PrecursorCharge Workflow    IntModifiedPeptide  CV  AllowForNormalization   ModifiedPeptide StrippedPeptide iRT IonMobility iRTSourceSpecific   BGSInferenceId  IsProteotypic   IntLabeledPeptide   LabeledPeptide  PrecursorMz ReferenceRunQvalue  ReferenceRunMS1Response FragmentLossType    FragmentNumber  FragmentType    FragmentCharge  FragmentMz  RelativeIntensity   ExcludeFromAssay    Database    ProteinGroups   UniProtIds  Protein Name    ProteinDescription  Organisms   OrganismId  Genes   Protein Existence   Sequence Version    FASTAName\n202106018_TIMS03_EVO03_PaSk_SA_HeLa_EGF_Phospho_100ug_test_S4-A1_1_25843    2       _ALVAT[+80]PGK_     True    _ALVAT[Phospho (STY)]PGK_   ALVATPGK    -5.032703   0.758   -5.032703   P19338  False   _ALVAT[+80]PGK_ _ALVAT[Phospho (STY)]PGK_   418.717511324722    0   10352   noloss  3   y   1   301.187031733932    53.1991 False   sp  P19338  P19338  NUCL_HUMAN  Nucleolin   Homo sapiens        NCL 1   3   MCT_human_UP000005640_9606\n202106018_TIMS03_EVO03_PaSk_SA_HeLa_EGF_Phospho_100ug_test_S4-A1_1_25843    2       _ALVAT[+80]PGK_     True    _ALVAT[Phospho (STY)]PGK_   ALVATPGK    -5.032703   0.758   -5.032703   P19338  False   _ALVAT[+80]PGK_ _ALVAT[Phospho (STY)]PGK_   418.717511324722    0   10352   H3PO4   4   y   1   384.224142529733    26.31595    False   sp  P19338  P19338  NUCL_HUMAN  Nucleolin   Homo sapiens        NCL 1   3   MCT_human_UP000005640_9606\n202106018_TIMS03_EVO03_PaSk_SA_HeLa_EGF_Phospho_100ug_test_S4-A1_1_25843    2       _TLT[+80]PCPLR_     True    _TLT[Phospho (STY)]PC[Carbamidomethyl (C)]PLR_  TLTPCPLR    27.71659    0.818   27.71659    Q5T200  False   _TLT[+80]PPLR_  _TLT[Phospho (STY)]PPLR_    439.230785875227    0.000138389150379226    23117   noloss  3   b   1   396.153027901512    6.3264  False   sp  Q5T200  Q5T200  ZC3HD_HUMAN Zinc finger CCCH domain-containing protein 13   Homo sapiens        ZC3H13  1   1   MCT_human_UP000005640_9606\n202106018_TIMS03_EVO03_PaSk_SA_HeLa_EGF_Phospho_100ug_test_S4-A1_1_25843    2       _TLT[+80]PCPLR_     True    _TLT[Phospho (STY)]PC[Carbamidomethyl (C)]PLR_  TLTPCPLR    27.71659    0.818   27.71659    Q5T200  False   _TLT[+80]PPLR_  _TLT[Phospho (STY)]PPLR_    439.230785875227    0.000138389150379226    23117   noloss  3   y   1   385.255780000092    29.70625    False   sp  Q5T200  Q5T200  ZC3HD_HUMAN Zinc finger CCCH domain-containing protein 13   Homo sapiens        ZC3H13  1   1   MCT_human_UP000005640_9606\n202106018_TIMS03_EVO03_PaSk_SA_HeLa_EGF_Phospho_library25_S4-C1_1_25867 2       _LFVT[+80]PPEGSSR_      True    _[Acetyl (Protein N-term)]LFVS[Phospho (STY)]PPEGSSR_   LFVSPPEGSSR 38.05031    0.917   38.05031    Q14244;Q14244-6;Q14244-7    False   _LFVT[+80]PPEGSSR_  _LFVT[Phospho (STY)]PPEGSSR_    635.297385373987    0   14164   H3PO4   4   b   1   443.265279065723    12.24525    False   sp  Q14244;Q14244-6;Q14244-7    Q14244;Q14244-6;Q14244-7    MAP7_HUMAN  Ensconsin;Isoform of Q14244, Isoform 6 of Ensconsin;Isoform of Q14244, Isoform 7 of Ensconsin   Homo sapiens        MAP7    1;; 1;; MCT_human_UP000005640_9606;MCT_human2_UP000005640_9606_additional;MCT_human2_UP000005640_9606_additional\n202106018_TIMS03_EVO03_PaSk_SA_HeLa_EGF_Phospho_library25_S4-C1_1_25867 2       _LFVT[+80]PPEGSSR_      True    _[Acetyl (Protein N-term)]LFVS[Phospho (STY)]PPEGSSR_   LFVSPPEGSSR 38.05031    0.917   38.05031    Q14244;Q14244-6;Q14244-7    False   _LFVT[+80]PPEGSSR_  _LFVT[Phospho (STY)]PPEGSSR_    635.297385373987    0   14164   noloss  6   y   1   632.299829640042    46.07855    False   sp  Q14244;Q14244-6;Q14244-7    Q14244;Q14244-6;Q14244-7    MAP7_HUMAN  Ensconsin;Isoform of Q14244, Isoform 6 of Ensconsin;Isoform of Q14244, Isoform 7 of Ensconsin   Homo sapiens        MAP7    1;; 1;; MCT_human_UP000005640_9606;MCT_human2_UP000005640_9606_additional;MCT_human2_UP000005640_9606_additional\n202106018_TIMS03_EVO03_PaSk_SA_HeLa_EGF_Phospho_library25_S4-C1_1_25867 2       _LFVT[+80]PPEGSSR_      True    _[Acetyl (Protein N-term)]LFVS[Phospho (STY)]PPEGSSR_   LFVSPPEGSSR 38.05031    0.917   38.05031    Q14244;Q14244-6;Q14244-7    False   _LFVT[+80]PPEGSSR_  _LFVT[Phospho (STY)]PPEGSSR_    635.297385373987    0   14164   noloss  7   y   1   729.352593488892    100 False   sp  Q14244;Q14244-6;Q14244-7    Q14244;Q14244-6;Q14244-7    MAP7_HUMAN  Ensconsin;Isoform of Q14244, Isoform 6 of Ensconsin;Isoform of Q14244, Isoform 7 of Ensconsin   Homo sapiens        MAP7    1;; 1;; MCT_human_UP000005640_9606;MCT_human2_UP000005640_9606_additional;MCT_human2_UP000005640_9606_additional\n''')\n\nspn_reader = psm_reader_provider.get_reader('spectronaut')\nspn_reader.import_file(tsv)\nassert len(spn_reader.psm_df) == 3\nassert spn_reader.psm_df.mods.values[0] == 'Phospho@T'\nassert spn_reader.psm_df.mod_sites.values[0] == '5'\nassert spn_reader.psm_df.mods.values[1] == 'Phospho@T;Carbamidomethyl@C'\nassert spn_reader.psm_df.mod_sites.values[1] == '3;5'\nassert spn_reader.psm_df.mods.values[2] == 'Acetyl@Protein N-term;Phospho@S'\nassert spn_reader.psm_df.mod_sites.values[2] == '0;4'\nspn_reader.psm_df\n\n\n\n\n\n  \n    \n      \n      raw_name\n      sequence\n      charge\n      rt\n      precursor_mz\n      mobility\n      proteins\n      uniprot_ids\n      genes\n      mods\n      mod_sites\n      nAA\n      rt_norm\n      ccs\n    \n  \n  \n    \n      0\n      202106018_TIMS03_EVO03_PaSk_SA_HeLa_EGF_Phosph...\n      ALVATPGK\n      2\n      -5.032703\n      418.717511\n      0.758\n      NUCL_HUMAN\n      P19338\n      NCL\n      Phospho@T\n      5\n      8\n      0.0\n      308.612143\n    \n    \n      1\n      202106018_TIMS03_EVO03_PaSk_SA_HeLa_EGF_Phosph...\n      TLTPCPLR\n      2\n      27.716590\n      439.230786\n      0.818\n      ZC3HD_HUMAN\n      Q5T200\n      ZC3H13\n      Phospho@T;Carbamidomethyl@C\n      3;5\n      8\n      1.0\n      332.788837\n    \n    \n      2\n      202106018_TIMS03_EVO03_PaSk_SA_HeLa_EGF_Phosph...\n      LFVSPPEGSSR\n      2\n      38.050310\n      635.297385\n      0.917\n      MAP7_HUMAN\n      Q14244;Q14244-6;Q14244-7\n      MAP7\n      Acetyl@Protein N-term;Phospho@S\n      0;4\n      11\n      1.0\n      371.282739\n    \n  \n\n\n\n\n\ntsv = StringIO('''PrecursorMz   ProductMz   Tr_recalibrated transition_name CE  LibraryIntensity    transition_group_id decoy   PeptideSequence ProteinName Annotation  FullUniModPeptideName   PrecursorCharge GroupLabel  UniprotID   FragmentType    FragmentCharge  FragmentSeriesNumber\n685.732240417   886.020494795   -10 255_AAAAAAAAAASGAAIPPLIPPRR_3   -1  5257.9  13_AAAAAAAAAASGAAIPPLIPPRR_3    0   AAAAAAAAAASGAAIPPLIPPRR 1/O14654    y19^2/0.002 AAAAAAAAAASGAAIPPLIPPRR 3   light   1/O14654    y   2   19\n514.550999438   473.303261576   59.2    268_AAAAAAAAAASGAAIPPLIPPRR_4   -1  10000.0 14_AAAAAAAAAASGAAIPPLIPPRR_4    0   AAAAAAAAAASGAAIPPLIPPRR 1/O14654    y8^2/0.002  AAAAAAAAAASGAAIPPLIPPRR 4   light   1/O14654    y   2   8\n514.550999438   629.39313922    59.2    276_AAAAAAAAAASGAAIPPLIPPRR_4   -1  5923.1  14_AAAAAAAAAASGAAIPPLIPPRR_4    0   AAAAAAAAAASGAAIPPLIPPRR 1/O14654    y12^2/0.001 AAAAAAAAAASGAAIPPLIPPRR 4   light   1/O14654    y   2   12\n514.550999438   672.909153425   59.2    279_AAAAAAAAAASGAAIPPLIPPRR_4   -1  5249.8  14_AAAAAAAAAASGAAIPPLIPPRR_4    0   AAAAAAAAAASGAAIPPLIPPRR 1/O14654    y13^2/0.001 AAAAAAAAAASGAAIPPLIPPRR 4   light   1/O14654    y   2   13\n514.550999438   356.19284545    59.2    262_AAAAAAAAAASGAAIPPLIPPRR_4   -1  5233.6  14_AAAAAAAAAASGAAIPPLIPPRR_4    0   AAAAAAAAAASGAAIPPLIPPRR 1/O14654    b5/0.001,b10^2/0.001,m6:10/0.001    AAAAAAAAAASGAAIPPLIPPRR 4   light   1/O14654    b   1   5\n514.550999438   498.26707303    59.2    269_AAAAAAAAAASGAAIPPLIPPRR_4   -1  4976.0  14_AAAAAAAAAASGAAIPPLIPPRR_4    0   AAAAAAAAAASGAAIPPLIPPRR 1/O14654    b7/0.001,m4:10/0.001    AAAAAAAAAASGAAIPPLIPPRR 4   light   1/O14654    b   1   7\n514.550999438   427.22995924    59.2    265_AAAAAAAAAASGAAIPPLIPPRR_4   -1  4859.4  14_AAAAAAAAAASGAAIPPLIPPRR_4    0   AAAAAAAAAASGAAIPPLIPPRR 1/O14654    b6/0.002,m5:10/0.002    AAAAAAAAAASGAAIPPLIPPRR 4   light   1/O14654    b   1   6\n728.201724416   356.19284545    101.8   292_AAAAAAAAAASGAAIPPLIPPRRVITLYQC(UniMod:4)FSVSQR_5    -1  10000.0 15_AAAAAAAAAASGAAIPPLIPPRRVITLYQC(UniMod:4)FSVSQR_5 0   AAAAAAAAAASGAAIPPLIPPRRVITLYQCFSVSQR    1/O14654    b5/0.003,b10^2/0.003,m6:10/0.003    AAAAAAAAAASGAAIPPLIPPRRVITLYQC(UniMod:4)FSVSQR  5   light   1/O14654    b   1   5\n728.201724416   576.310000482   101.8   297_AAAAAAAAAASGAAIPPLIPPRRVITLYQC(UniMod:4)FSVSQR_5    -1  7611.0  15_AAAAAAAAAASGAAIPPLIPPRRVITLYQC(UniMod:4)FSVSQR_5 0   AAAAAAAAAASGAAIPPLIPPRRVITLYQCFSVSQR    1/O14654    y5/0.002    AAAAAAAAAASGAAIPPLIPPRRVITLYQC(UniMod:4)FSVSQR  5   light   1/O14654    y   1   5\n728.201724416   427.22995924    101.8   293_AAAAAAAAAASGAAIPPLIPPRRVITLYQC(UniMod:4)FSVSQR_5    -1  6805.1  15_AAAAAAAAAASGAAIPPLIPPRRVITLYQC(UniMod:4)FSVSQR_5 0   AAAAAAAAAASGAAIPPLIPPRRVITLYQCFSVSQR    1/O14654    b6/-0.002,m5:10/-0.002  AAAAAAAAAASGAAIPPLIPPRRVITLYQC(UniMod:4)FSVSQR  5   light   1/O14654    b   1   6\n728.201724416   569.30418682    101.8   296_AAAAAAAAAASGAAIPPLIPPRRVITLYQC(UniMod:4)FSVSQR_5    -1  6312.7  15_AAAAAAAAAASGAAIPPLIPPRRVITLYQC(UniMod:4)FSVSQR_5 0   AAAAAAAAAASGAAIPPLIPPRRVITLYQCFSVSQR    1/O14654    b8/0.009,m3:10/0.009    AAAAAAAAAASGAAIPPLIPPRRVITLYQC(UniMod:4)FSVSQR  5   light   1/O14654    b   1   8\n''')\n\n\nosw_reader = psm_reader_provider.get_reader('openswath')\npsm_df = osw_reader.import_file(tsv)\nassert psm_df.loc[2,'mod_sites'] == '30'\nassert psm_df.loc[2,'mods'] == 'Carbamidomethyl@C'\n\n\ntsv = StringIO('''File.Name Run Protein.Group   Protein.Ids Protein.Names   Genes   PG.Quantity PG.Normalised   PG.MaxLFQ   Genes.Quantity  Genes.Normalised    Genes.MaxLFQ    Genes.MaxLFQ.Unique Modified.Sequence   Stripped.Sequence   Precursor.Id    Precursor.Charge    Q.Value Global.Q.Value  Protein.Q.Value PG.Q.Value  Global.PG.Q.Value   GG.Q.Value  Translated.Q.Value  Proteotypic Precursor.Quantity  Precursor.Normalised    Precursor.Translated    Quantity.Quality    RT  RT.Start    RT.Stop iRT Predicted.RT    Predicted.iRT   Lib.Q.Value Ms1.Profile.Corr    Ms1.Area    Evidence    Spectrum.Similarity Mass.Evidence   CScore  Decoy.Evidence  Decoy.CScore    Fragment.Quant.Raw  Fragment.Quant.Corrected    Fragment.Correlations   MS2.Scan    IM  iIM Predicted.IM    Predicted.iIM\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636   Q9UH36  Q9UH36      SRRD    3296.49 3428.89 3428.89 3296.49 3428.89 3428.89 3428.89 (UniMod:1)AAAAAAALESWQAAAPR AAAAAAALESWQAAAPR   (UniMod:1)AAAAAAALESWQAAAPR2    2   3.99074e-05 1.96448e-05 0.000159821 0.000159821 0.000146135 0.000161212 0   1   3296.49 3428.89 3296.49 0.852479    19.9208 19.8731 19.9685 123.9   19.8266 128.292 0   0.960106    5308.05 1.96902 0.683134    0.362287    0.999997    1.23691 3.43242e-05 1212.01;2178.03;1390.01;1020.01;714.008;778.008;    1212.01;1351.73;887.591;432.92;216.728;732.751; 0.956668;0.757581;0.670497;0.592489;0.47072;0.855203;   30053   1.19708 1.19328 1.19453 1.19469\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642   Q9UH36  Q9UH36      SRRD    2365    2334.05 2334.05 2365    2334.05 2334.05 2334.05 (UniMod:1)AAAAAAALESWQAAAPR AAAAAAALESWQAAAPR   (UniMod:1)AAAAAAALESWQAAAPR2    2   0.000184434 1.96448e-05 0.000596659 0.000596659 0.000146135 0.000604961 0   1   2365    2334.05 2365    0.922581    19.905  19.8573 19.9527 123.9   19.782  128.535 0   0.940191    4594.04 1.31068 0.758988    0   0.995505    0.28633 2.12584e-06 1209.02;1210.02;1414.02;1051.01;236.003;130.002;    1209.02;1109.89;732.154;735.384;0;46.0967;  0.919244;0.937624;0.436748;0.639369;0.296736;0.647924;  30029   1.195   1.19328 1.19381 1.19339\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B2_1_22648.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B2_1_22648   Q9UH36  Q9UH36      SRRD    1664.51 1635.46 1635.47 1664.51 1635.46 1635.47 1635.47 (UniMod:1)AAAAAAALESWQAAAPR AAAAAAALESWQAAAPR   (UniMod:1)AAAAAAALESWQAAAPR2    2   0.000185123 1.96448e-05 0.000307409 0.000307409 0.000146135 0.000311332 0   1   1664.51 1635.46 1664.51 0.811147    19.8893 19.8416 19.937  123.9   19.7567 128.896 0   0.458773    6614.06 1.7503  0.491071    0.00111683  0.997286    1.92753 2.80543e-05 744.01;1708.02;1630.02;1475.02;0;533.006;   322.907;808.594;577.15;536.033;0;533.006;   0.760181;0.764072;0.542005;0.415779;0;0.913438; 30005   1.19409 1.19328 1.19323 1.19308\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B8_1_22654.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B8_1_22654   Q9UH36  Q9UH36      SRRD    3369.91 3343.38 3343.38 3369.91 3343.38 3343.38 3343.38 (UniMod:1)AAAAAAALESWQAAAPR AAAAAAALESWQAAAPR   (UniMod:1)AAAAAAALESWQAAAPR2    2   0.000153377 1.96448e-05 0.000298151 0.000298151 0.000146135 0.000302297 0   1   3369.91 3343.38 3369.91 0.798104    19.872  19.8243 19.9196 123.9   19.7347 128.576 0   0.892774    5026.05 1.01465 0.704953    0   0.996593    0.476378    7.76581e-06 1654.02;1286.02;1894.02;993.011;778.008;1190.01;    1638.42;1286.02;1293.97;466.705;292.465;445.475;    0.854908;0.860012;0.708773;0.584142;0.716032;0.410465;  29981   1.19136 1.19328 1.19169 1.1919\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636   P51608-2    P51608-2        MECP2   1585.53 1649.21 7673.34 1585.53 1649.21 7673.34 7673.34 AAAAAAAPSGGGGGGEEERLEEK AAAAAAAPSGGGGGGEEERLEEK (UniMod:1)AAAAAAAPSGGGGGGEEERLEEK3  3   0.00014185  5.69066e-05 0.000159821 0.000159821 0.000146135 0.000161212 0   1   861.509 896.11  861.509 0.530747    7.34894 7.30125 7.39665 14.6582 7.35635 14.5905 0   0.85024 2010.02 1.27844 0.470734    0.117495    0.998266    0.848349    0.0613877   905.008;1021.01;1179.01;419.003;753.005;638.006;    422.004;0;439.505;419.003;325.502;119.251;  0.626628;-0.441015;0.438684;0.800641;0.794403;0.458813; 11077   1.01    1.01225 1.01075 1.01099\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642   P51608-2    P51608-2        MECP2   16870.2 16649.4 7963.26 16870.2 16649.4 7963.26 7963.26 AAAAAAAPSGGGGGGEEERLEEK AAAAAAAPSGGGGGGEEERLEEK (UniMod:1)AAAAAAAPSGGGGGGEEERLEEK3  3   0.000200767 5.69066e-05 0.000152765 0.000152765 0.000146135 0.000154631 0   1   1832.12 1808.14 1832.12 0.438822    7.3176  7.26989 7.36527 14.6582 7.29706 14.8141 0   0.814702    3622.03 0.571375    0.278903    0.971334    0.994097    0.779006    0.0590956   1430.01;946.009;804.008;260.002;710.006;232.002;    886.115;946.009;0;0;431.102;0;  -0.0551893;0.901557;0.0979035;-0.326533;0.334642;-0.120337; 11029   1.01417 1.01225 1.01136 1.01447\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B2_1_22648.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B2_1_22648   P51608-2    P51608-2        MECP2   16242.7 15959.3 13129.8 16242.7 15959.3 13129.8 13129.8 AAAAAAAPSGGGGGGEEERLEEK AAAAAAAPSGGGGGGEEERLEEK (UniMod:1)AAAAAAAPSGGGGGGEEERLEEK3  3   6.98405e-05 5.69066e-05 0.000168492 0.000168492 0.000146135 0.000169578 0   1   2765.24 2716.99 2765.24 0.619188    7.28562 7.23794 7.33338 14.6582 7.22243 15.2233 0   0.859167    2180.02 1.50997 0.43755 0.191245    0.999939    0.420023    0.00548723  1807.01;1018.01;1230.01;554.005;1216.01;276.002;    954.327;1006.89;804.021;554.005;0;143.651;  0.483734;0.907585;0.418797;0.61368;-0.523993;0.70046;   10981   1.015   1.01225 1.01115 1.01558\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B8_1_22654.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B8_1_22654   P51608-2    P51608-2        MECP2   20914.7 20750   16106   20914.7 20750   16106   16106   AAAAAAAPSGGGGGGEEERLEEK AAAAAAAPSGGGGGGEEERLEEK (UniMod:1)AAAAAAAPSGGGGGGEEERLEEK3  3   0.000603914 5.69066e-05 0.000153516 0.000153516 0.000146135 0.000155304 0   1   4556.58 4520.72 4556.58 0.620251    7.26825 7.22055 7.31601 14.6582 7.18207 15.448  0   0.79218 3193.03 0.113147    0.344593    0.144439    0.971834    1.05178 0.112962    2855.02;1760.01;830.007;116.001;564.005;751.006;    2266.46;1760.01;530.111;0;0;317.258;    0.430169;0.867218;0.612985;-0.310664;-0.386197;0.286451;    10957   1.01208 1.01225 1.00965 1.01449\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636   Q96P70  Q96P70      IPO9    155722  161976  160062  155722  161976  160062  160062  (UniMod:1)AAAAAAGAASGLPGPVAQGLK AAAAAAGAASGLPGPVAQGLK   (UniMod:1)AAAAAAGAASGLPGPVAQGLK2    2   3.99074e-05 1.96448e-05 0.000159821 0.000159821 0.000146135 0.000161212 0   1   44791.6 46590.6 44791.6 0.903543    14.709  14.6614 14.7567 77.7384 14.7374 77.4968 0   0.962703    395646  1.16168 0.790083    0   0.999999    0.491003    0.00391533  17738.2;18223.2;16218.2;17747.2;14484.2;12569.2;    17738.2;18223.2;16150;16115.2;14484.2;12569.2;  0.879361;0.89314;0.807683;0.73629;0.863152;0.984215;    22187   1.225   1.23344 1.23458 1.22263\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642   Q96P70  Q96P70      IPO9    172360  170104  155889  172360  170104  155889  155889  (UniMod:1)AAAAAAGAASGLPGPVAQGLK AAAAAAGAASGLPGPVAQGLK   (UniMod:1)AAAAAAGAASGLPGPVAQGLK2    2   4.98766e-05 1.96448e-05 0.000152765 0.000152765 0.000146135 0.000154631 0   1   44700.5 44115.4 44700.5 0.615196    14.6456 14.5979 14.6933 77.7384 14.6419 77.8394 0   0.9107  553292  0.747052    0.814842    0   0.999996    0.830219    0.0331339   19349.2;20154.2;20586.2;20040.3;13620.2;12105.1;    19349.2;19014.1;19329.7;18862.6;13404.2;11947.1;    0.862894;0.42962;0.293099;0.655948;0.517625;0.323501;   22091   1.22042 1.23344 1.23392 1.21891\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B2_1_22648.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B2_1_22648   Q96P70  Q96P70      IPO9    153712  151030  152845  153712  151030  152845  152845  (UniMod:1)AAAAAAGAASGLPGPVAQGLK AAAAAAGAASGLPGPVAQGLK   (UniMod:1)AAAAAAGAASGLPGPVAQGLK2    2   6.08421e-05 1.96448e-05 0.000168492 0.000168492 0.000146135 0.000169578 0   1   40439.4 39733.8 40439.4 0.833327    14.6301 14.5824 14.6777 77.7384 14.5747 78.2527 0   0.989019    1.0768e+06  1.68843 0.759575    0   0.999999    0.674737    0.0631384   17597.2;19526.2;16647.2;16204.2;12871.2;11069.2;    17377.7;19526.2;16647.2;16204.2;12871.2;10190.5;    0.828262;0.979726;0.827511;0.9628;0.90466;0.751867; 22067   1.22708 1.23344 1.23332 1.2261\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B8_1_22654.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B8_1_22654   Q96P70  Q96P70      IPO9    147008  145850  159209  147008  145850  159209  159209  (UniMod:1)AAAAAAGAASGLPGPVAQGLK AAAAAAGAASGLPGPVAQGLK   (UniMod:1)AAAAAAGAASGLPGPVAQGLK2    2   4.42595e-05 1.96448e-05 0.000153516 0.000153516 0.000146135 0.000155304 0   1   41861.6 41532.1 41861.6 0.752921    14.549  14.5013 14.5967 77.7384 14.5155 78.0748 0   0.877873    939172  1.59762 0.821027    0   0.999997    0.397952    1.22212e-05 18143.2;19574.2;17444.2;17956.2;11427.2;13025.2;    17409.2;18432.7;16706.7;10820.4;11427.2;13025.2;    0.625292;0.399297;0.717726;0.321047;0.864595;0.825535;  21947   1.2275  1.23344 1.23199 1.2281\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636   P28482  P28482      MAPK1   72652.7 75570.7 78604.9 72652.7 75570.7 78604.9 78604.9 (UniMod:1)AAAAAAGAGPEM(UniMod:35)VR AAAAAAGAGPEMVR  (UniMod:1)AAAAAAGAGPEM(UniMod:35)VR2    2   0.00693727  0.000834654 0.000159821 0.000159821 0.000146135 0.000161212 0   1   192.198 199.917 192.198 0.0197094   7.4249  7.37721 7.4726  15.9025 7.49813 15.2482 0   0.754191    8842.06 1.19725 0.470393    0.086229    0.843331    2.80548 0.384248    897.008;1032.01;279.002;377.003;440.004;286.003;    0;137.786;54.4117;0;89.692;286.003; -0.20379;-0.0679789;0.241761;-0.388501;-0.0459688;0.973644; 11191   1.01917 1.0262  1.02479 1.02031\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642   P28482  P28482      MAPK1   69911.3 68996.2 63388.2 69911.3 68996.2 63388.2 63388.2 (UniMod:1)AAAAAAGAGPEM(UniMod:35)VR AAAAAAGAGPEMVR  (UniMod:1)AAAAAAGAGPEM(UniMod:35)VR2    2   0.00122498  0.000834654 0.000152765 0.000152765 0.000146135 0.000154631 0   1   1572.67 1552.08 1572.67 0.906427    7.45711 7.40943 7.50482 15.9025 7.43922 16.0749 0   0.371998    5937.05 0.30888 0.510876    0.72688 0.95182 1.96259 0.65474 1320.01;838.009;638.006;827.009;562.005;339.003;    1320.01;252.656;0;213.073;330.325;0;    0.976001;0.542934;0.346963;0.38014;0.442774;-0.259898;  11239   1.01773 1.0262  1.02509 1.01834\n''')\ndiann_reader = psm_reader_provider.get_reader('diann')\n_df = diann_reader.import_file(tsv)\nassert 'ccs' in diann_reader.psm_df.columns\nassert len(diann_reader.psm_df) == 14\nassert np.sum(diann_reader.psm_df.mods.str.contains('Acetyl@Protein N-term')) == 10\nassert np.sum(~diann_reader.psm_df.mods.str.contains('Acetyl@Protein N-term')) == 4\nassert np.sum(diann_reader.psm_df.mods.str.contains('Oxidation@M')) == 2\nassert np.all(np.array(diann_reader.modification_mapping['Phospho@S'])==np.array([\n    'S(Phospho (S))',\n    'S(Phospho (ST))',\n    'S(Phospho (STY))',\n    'S(ph)',\n    'S(UniMod:21)',\n    'pS',\n    'S[Phospho (S)]',\n    'S[Phospho (ST)]',\n    'S[Phospho (STY)]',\n    'S[ph]',\n    'S[UniMod:21]'])\n)\n_df\n\n\n\n\n\n  \n    \n      \n      raw_name\n      sequence\n      charge\n      rt\n      mobility\n      proteins\n      uniprot_ids\n      genes\n      scan_num\n      score\n      spec_idx\n      mods\n      mod_sites\n      nAA\n      rt_norm\n      precursor_mz\n      ccs\n    \n  \n  \n    \n      0\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAGAGPEMVR\n      2\n      7.42490\n      1.01917\n      NaN\n      P28482\n      MAPK1\n      11191\n      0.843331\n      11190\n      Acetyl@Protein N-term;Oxidation@M\n      0;12\n      14\n      0.372721\n      650.819344\n      412.544080\n    \n    \n      1\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAGAGPEMVR\n      2\n      7.45711\n      1.01773\n      NaN\n      P28482\n      MAPK1\n      11239\n      0.951820\n      11238\n      Acetyl@Protein N-term;Oxidation@M\n      0;12\n      14\n      0.374635\n      650.819344\n      411.961191\n    \n    \n      2\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAALESWQAAAPR\n      2\n      19.92080\n      1.19708\n      NaN\n      Q9UH36\n      SRRD\n      30053\n      0.999997\n      30052\n      Acetyl@Protein N-term\n      0\n      17\n      1.000000\n      834.428635\n      483.435307\n    \n    \n      3\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAALESWQAAAPR\n      2\n      19.90500\n      1.19500\n      NaN\n      Q9UH36\n      SRRD\n      30029\n      0.995505\n      30028\n      Acetyl@Protein N-term\n      0\n      17\n      1.000000\n      834.428635\n      482.595308\n    \n    \n      4\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAALESWQAAAPR\n      2\n      19.88930\n      1.19409\n      NaN\n      Q9UH36\n      SRRD\n      30005\n      0.997286\n      30004\n      Acetyl@Protein N-term\n      0\n      17\n      1.000000\n      834.428635\n      482.227809\n    \n    \n      5\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAALESWQAAAPR\n      2\n      19.87200\n      1.19136\n      NaN\n      Q9UH36\n      SRRD\n      29981\n      0.996593\n      29980\n      Acetyl@Protein N-term\n      0\n      17\n      1.000000\n      834.428635\n      481.125311\n    \n    \n      6\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAGAASGLPGPVAQGLK\n      2\n      14.70900\n      1.22500\n      NaN\n      Q96P70\n      IPO9\n      22187\n      0.999999\n      22186\n      Acetyl@Protein N-term\n      0\n      21\n      0.738374\n      895.991600\n      494.430146\n    \n    \n      7\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAGAASGLPGPVAQGLK\n      2\n      14.64560\n      1.22042\n      NaN\n      Q96P70\n      IPO9\n      22091\n      0.999996\n      22090\n      Acetyl@Protein N-term\n      0\n      21\n      0.735775\n      895.991600\n      492.581583\n    \n    \n      8\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAGAASGLPGPVAQGLK\n      2\n      14.63010\n      1.22708\n      NaN\n      Q96P70\n      IPO9\n      22067\n      0.999999\n      22066\n      Acetyl@Protein N-term\n      0\n      21\n      0.735576\n      895.991600\n      495.269668\n    \n    \n      9\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAGAASGLPGPVAQGLK\n      2\n      14.54900\n      1.22750\n      NaN\n      Q96P70\n      IPO9\n      21947\n      0.999997\n      21946\n      Acetyl@Protein N-term\n      0\n      21\n      0.732136\n      895.991600\n      495.439187\n    \n    \n      10\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAAPSGGGGGGEEERLEEK\n      3\n      7.34894\n      1.01000\n      NaN\n      P51608-2\n      MECP2\n      11077\n      0.998266\n      11076\n      \n      \n      23\n      0.368908\n      695.666290\n      610.813640\n    \n    \n      11\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAAPSGGGGGGEEERLEEK\n      3\n      7.31760\n      1.01417\n      NaN\n      P51608-2\n      MECP2\n      11029\n      0.994097\n      11028\n      \n      \n      23\n      0.367626\n      695.666290\n      613.335514\n    \n    \n      12\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAAPSGGGGGGEEERLEEK\n      3\n      7.28562\n      1.01500\n      NaN\n      P51608-2\n      MECP2\n      10981\n      0.999939\n      10980\n      \n      \n      23\n      0.366309\n      695.666290\n      613.837470\n    \n    \n      13\n      20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_sp...\n      AAAAAAAPSGGGGGGEEERLEEK\n      3\n      7.26825\n      1.01208\n      NaN\n      P51608-2\n      MECP2\n      10957\n      0.971834\n      10956\n      \n      \n      23\n      0.365753\n      695.666290\n      612.071553\n    \n  \n\n\n\n\n\ntsv = StringIO('''File.Name Run Protein.Group   Protein.Ids Protein.Names   Genes   PG.Quantity PG.Normalised   PG.MaxLFQ   Genes.Quantity  Genes.Normalised    Genes.MaxLFQ    Genes.MaxLFQ.Unique Modified.Sequence   Stripped.Sequence   Precursor.Id    Precursor.Charge    Q.Value Global.Q.Value  Protein.Q.Value PG.Q.Value  Global.PG.Q.Value   GG.Q.Value  Translated.Q.Value  Proteotypic Precursor.Quantity  Precursor.Normalised    Precursor.Translated    Quantity.Quality    RT  RT.Start    RT.Stop iRT Predicted.RT    Predicted.iRT   Lib.Q.Value Ms1.Profile.Corr    Ms1.Area    Evidence    Spectrum.Similarity Mass.Evidence   CScore  Decoy.Evidence  Decoy.CScore    Fragment.Quant.Raw  Fragment.Quant.Corrected    Fragment.Correlations   MS2.Scan    IM  iIM Predicted.IM    Predicted.iIM\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636   Q9UH36  Q9UH36      SRRD    3296.49 3428.89 3428.89 3296.49 3428.89 3428.89 3428.89 (UniMod:1)AAAAAAALESWQAAAPR AAAAAAALESWQAAAPR   (UniMod:1)AAAAAAALESWQAAAPR2    2   3.99074e-05 1.96448e-05 0.000159821 0.000159821 0.000146135 0.000161212 0   1   3296.49 3428.89 3296.49 0.852479    19.9208 19.8731 19.9685 123.9   19.8266 128.292 0   0.960106    5308.05 1.96902 0.683134    0.362287    0.999997    1.23691 3.43242e-05 1212.01;2178.03;1390.01;1020.01;714.008;778.008;    1212.01;1351.73;887.591;432.92;216.728;732.751; 0.956668;0.757581;0.670497;0.592489;0.47072;0.855203;   30053   1.19708 1.19328 1.19453 1.19469\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642   Q9UH36  Q9UH36      SRRD    2365    2334.05 2334.05 2365    2334.05 2334.05 2334.05 (UniMod:1)AAAAAAALESWQAAAPR AAAAAAALESWQAAAPR   (UniMod:1)AAAAAAALESWQAAAPR2    2   0.000184434 1.96448e-05 0.000596659 0.000596659 0.000146135 0.000604961 0   1   2365    2334.05 2365    0.922581    19.905  19.8573 19.9527 123.9   19.782  128.535 0   0.940191    4594.04 1.31068 0.758988    0   0.995505    0.28633 2.12584e-06 1209.02;1210.02;1414.02;1051.01;236.003;130.002;    1209.02;1109.89;732.154;735.384;0;46.0967;  0.919244;0.937624;0.436748;0.639369;0.296736;0.647924;  30029   1.195   1.19328 1.19381 1.19339\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B2_1_22648.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B2_1_22648   Q9UH36  Q9UH36      SRRD    1664.51 1635.46 1635.47 1664.51 1635.46 1635.47 1635.47 (UniMod:1)AAAAAAALESWQAAAPR AAAAAAALESWQAAAPR   (UniMod:1)AAAAAAALESWQAAAPR2    2   0.000185123 1.96448e-05 0.000307409 0.000307409 0.000146135 0.000311332 0   1   1664.51 1635.46 1664.51 0.811147    19.8893 19.8416 19.937  123.9   19.7567 128.896 0   0.458773    6614.06 1.7503  0.491071    0.00111683  0.997286    1.92753 2.80543e-05 744.01;1708.02;1630.02;1475.02;0;533.006;   322.907;808.594;577.15;536.033;0;533.006;   0.760181;0.764072;0.542005;0.415779;0;0.913438; 30005   1.19409 1.19328 1.19323 1.19308\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B8_1_22654.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B8_1_22654   Q9UH36  Q9UH36      SRRD    3369.91 3343.38 3343.38 3369.91 3343.38 3343.38 3343.38 (UniMod:1)AAAAAAALESWQAAAPR AAAAAAALESWQAAAPR   (UniMod:1)AAAAAAALESWQAAAPR2    2   0.000153377 1.96448e-05 0.000298151 0.000298151 0.000146135 0.000302297 0   1   3369.91 3343.38 3369.91 0.798104    19.872  19.8243 19.9196 123.9   19.7347 128.576 0   0.892774    5026.05 1.01465 0.704953    0   0.996593    0.476378    7.76581e-06 1654.02;1286.02;1894.02;993.011;778.008;1190.01;    1638.42;1286.02;1293.97;466.705;292.465;445.475;    0.854908;0.860012;0.708773;0.584142;0.716032;0.410465;  29981   1.19136 1.19328 1.19169 1.1919\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636   P51608-2    P51608-2        MECP2   1585.53 1649.21 7673.34 1585.53 1649.21 7673.34 7673.34 AAAAAAAPSGGGGGGEEERLEEK AAAAAAAPSGGGGGGEEERLEEK (UniMod:1)AAAAAAAPSGGGGGGEEERLEEK3  3   0.00014185  5.69066e-05 0.000159821 0.000159821 0.000146135 0.000161212 0   1   861.509 896.11  861.509 0.530747    7.34894 7.30125 7.39665 14.6582 7.35635 14.5905 0   0.85024 2010.02 1.27844 0.470734    0.117495    0.998266    0.848349    0.0613877   905.008;1021.01;1179.01;419.003;753.005;638.006;    422.004;0;439.505;419.003;325.502;119.251;  0.626628;-0.441015;0.438684;0.800641;0.794403;0.458813; 11077   1.01    1.01225 1.01075 1.01099\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642   P51608-2    P51608-2        MECP2   16870.2 16649.4 7963.26 16870.2 16649.4 7963.26 7963.26 AAAAAAAPSGGGGGGEEERLEEK AAAAAAAPSGGGGGGEEERLEEK (UniMod:1)AAAAAAAPSGGGGGGEEERLEEK3  3   0.000200767 5.69066e-05 0.000152765 0.000152765 0.000146135 0.000154631 0   1   1832.12 1808.14 1832.12 0.438822    7.3176  7.26989 7.36527 14.6582 7.29706 14.8141 0   0.814702    3622.03 0.571375    0.278903    0.971334    0.994097    0.779006    0.0590956   1430.01;946.009;804.008;260.002;710.006;232.002;    886.115;946.009;0;0;431.102;0;  -0.0551893;0.901557;0.0979035;-0.326533;0.334642;-0.120337; 11029   1.01417 1.01225 1.01136 1.01447\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B2_1_22648.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B2_1_22648   P51608-2    P51608-2        MECP2   16242.7 15959.3 13129.8 16242.7 15959.3 13129.8 13129.8 AAAAAAAPSGGGGGGEEERLEEK AAAAAAAPSGGGGGGEEERLEEK (UniMod:1)AAAAAAAPSGGGGGGEEERLEEK3  3   6.98405e-05 5.69066e-05 0.000168492 0.000168492 0.000146135 0.000169578 0   1   2765.24 2716.99 2765.24 0.619188    7.28562 7.23794 7.33338 14.6582 7.22243 15.2233 0   0.859167    2180.02 1.50997 0.43755 0.191245    0.999939    0.420023    0.00548723  1807.01;1018.01;1230.01;554.005;1216.01;276.002;    954.327;1006.89;804.021;554.005;0;143.651;  0.483734;0.907585;0.418797;0.61368;-0.523993;0.70046;   10981   1.015   1.01225 1.01115 1.01558\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B8_1_22654.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B8_1_22654   P51608-2    P51608-2        MECP2   20914.7 20750   16106   20914.7 20750   16106   16106   AAAAAAAPSGGGGGGEEERLEEK AAAAAAAPSGGGGGGEEERLEEK (UniMod:1)AAAAAAAPSGGGGGGEEERLEEK3  3   0.000603914 5.69066e-05 0.000153516 0.000153516 0.000146135 0.000155304 0   1   4556.58 4520.72 4556.58 0.620251    7.26825 7.22055 7.31601 14.6582 7.18207 15.448  0   0.79218 3193.03 0.113147    0.344593    0.144439    0.971834    1.05178 0.112962    2855.02;1760.01;830.007;116.001;564.005;751.006;    2266.46;1760.01;530.111;0;0;317.258;    0.430169;0.867218;0.612985;-0.310664;-0.386197;0.286451;    10957   1.01208 1.01225 1.00965 1.01449\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636   Q96P70  Q96P70      IPO9    155722  161976  160062  155722  161976  160062  160062  (UniMod:1)AAAAAAGAASGLPGPVAQGLK AAAAAAGAASGLPGPVAQGLK   (UniMod:1)AAAAAAGAASGLPGPVAQGLK2    2   3.99074e-05 1.96448e-05 0.000159821 0.000159821 0.000146135 0.000161212 0   1   44791.6 46590.6 44791.6 0.903543    14.709  14.6614 14.7567 77.7384 14.7374 77.4968 0   0.962703    395646  1.16168 0.790083    0   0.999999    0.491003    0.00391533  17738.2;18223.2;16218.2;17747.2;14484.2;12569.2;    17738.2;18223.2;16150;16115.2;14484.2;12569.2;  0.879361;0.89314;0.807683;0.73629;0.863152;0.984215;    22187   1.225   1.23344 1.23458 1.22263\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642   Q96P70  Q96P70      IPO9    172360  170104  155889  172360  170104  155889  155889  (UniMod:1)AAAAAAGAASGLPGPVAQGLK AAAAAAGAASGLPGPVAQGLK   (UniMod:1)AAAAAAGAASGLPGPVAQGLK2    2   4.98766e-05 1.96448e-05 0.000152765 0.000152765 0.000146135 0.000154631 0   1   44700.5 44115.4 44700.5 0.615196    14.6456 14.5979 14.6933 77.7384 14.6419 77.8394 0   0.9107  553292  0.747052    0.814842    0   0.999996    0.830219    0.0331339   19349.2;20154.2;20586.2;20040.3;13620.2;12105.1;    19349.2;19014.1;19329.7;18862.6;13404.2;11947.1;    0.862894;0.42962;0.293099;0.655948;0.517625;0.323501;   22091   1.22042 1.23344 1.23392 1.21891\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B2_1_22648.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B2_1_22648   Q96P70  Q96P70      IPO9    153712  151030  152845  153712  151030  152845  152845  (UniMod:1)AAAAAAGAASGLPGPVAQGLK AAAAAAGAASGLPGPVAQGLK   (UniMod:1)AAAAAAGAASGLPGPVAQGLK2    2   6.08421e-05 1.96448e-05 0.000168492 0.000168492 0.000146135 0.000169578 0   1   40439.4 39733.8 40439.4 0.833327    14.6301 14.5824 14.6777 77.7384 14.5747 78.2527 0   0.989019    1.0768e+06  1.68843 0.759575    0   0.999999    0.674737    0.0631384   17597.2;19526.2;16647.2;16204.2;12871.2;11069.2;    17377.7;19526.2;16647.2;16204.2;12871.2;10190.5;    0.828262;0.979726;0.827511;0.9628;0.90466;0.751867; 22067   1.22708 1.23344 1.23332 1.2261\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B8_1_22654.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-B8_1_22654   Q96P70  Q96P70      IPO9    147008  145850  159209  147008  145850  159209  159209  (UniMod:1)AAAAAAGAASGLPGPVAQGLK AAAAAAGAASGLPGPVAQGLK   (UniMod:1)AAAAAAGAASGLPGPVAQGLK2    2   4.42595e-05 1.96448e-05 0.000153516 0.000153516 0.000146135 0.000155304 0   1   41861.6 41532.1 41861.6 0.752921    14.549  14.5013 14.5967 77.7384 14.5155 78.0748 0   0.877873    939172  1.59762 0.821027    0   0.999997    0.397952    1.22212e-05 18143.2;19574.2;17444.2;17956.2;11427.2;13025.2;    17409.2;18432.7;16706.7;10820.4;11427.2;13025.2;    0.625292;0.399297;0.717726;0.321047;0.864595;0.825535;  21947   1.2275  1.23344 1.23199 1.2281\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A2_1_22636   P28482  P28482      MAPK1   72652.7 75570.7 78604.9 72652.7 75570.7 78604.9 78604.9 (UniMod:1)AAAAAAGAGPEM(UniMod:35)VR AAAAAAGAGPEMVR  (UniMod:1)AAAAAAGAGPEM(UniMod:35)VR2    2   0.00693727  0.000834654 0.000159821 0.000159821 0.000146135 0.000161212 0   1   192.198 199.917 192.198 0.0197094   7.4249  7.37721 7.4726  15.9025 7.49813 15.2482 0   0.754191    8842.06 1.19725 0.470393    0.086229    0.843331    2.80548 0.384248    897.008;1032.01;279.002;377.003;440.004;286.003;    0;137.786;54.4117;0;89.692;286.003; -0.20379;-0.0679789;0.241761;-0.388501;-0.0459688;0.973644; 11191   1.01917 1.0262  1.02479 1.02031\nF:\\XXX\\20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642.d  20201218_tims03_Evo03_PS_SA_HeLa_200ng_high_speed_21min_8cm_S2-A8_1_22642   P28482  P28482      MAPK1   69911.3 68996.2 63388.2 69911.3 68996.2 63388.2 63388.2 (UniMod:1)AAAAAAGAGPEM(UniMod:35)VR AAAAAAGAGPEMVR  (UniMod:1)AAAAAAGAGPEM(UniMod:35)VR2    2   0.00122498  0.000834654 0.000152765 0.000152765 0.000146135 0.000154631 0   1   1572.67 1552.08 1572.67 0.906427    7.45711 7.40943 7.50482 15.9025 7.43922 16.0749 0   0.371998    5937.05 0.30888 0.510876    0.72688 0.95182 1.96259 0.65474 1320.01;838.009;638.006;827.009;562.005;339.003;    1320.01;252.656;0;213.073;330.325;0;    0.976001;0.542934;0.346963;0.38014;0.442774;-0.259898;  11239   1.01773 1.0262  1.02509 1.01834\n''')\ndiann_reader = psm_reader_provider.get_reader_by_yaml(psm_reader_yaml['diann'])\ndiann_reader.import_file(tsv)\n\nassert 'ccs' in diann_reader.psm_df.columns\nassert len(diann_reader.psm_df) == 14\nassert np.sum(diann_reader.psm_df.mods.str.contains('Acetyl@Protein N-term')) == 10\nassert np.sum(~diann_reader.psm_df.mods.str.contains('Acetyl@Protein N-term')) == 4\nassert np.sum(diann_reader.psm_df.mods.str.contains('Oxidation@M')) == 2\nassert np.all(np.array(diann_reader.modification_mapping['Phospho@S'])==np.array([\n    'S(Phospho (S))',\n    'S(Phospho (ST))',\n    'S(Phospho (STY))',\n    'S(ph)',\n    'S(UniMod:21)',\n    'pS',\n    'S[Phospho (S)]',\n    'S[Phospho (ST)]',\n    'S[Phospho (STY)]',\n    'S[ph]',\n    'S[UniMod:21]'])\n)"
  },
  {
    "objectID": "peptide/precursor.html",
    "href": "peptide/precursor.html",
    "title": "Precursor Functionalities",
    "section": "",
    "text": "source\n\nupdate_precursor_mz\n\n update_precursor_mz (precursor_df:pandas.core.frame.DataFrame,\n                      batch_size=500000)\n\nCalculate precursor_mz inplace in the precursor_df\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprecursor_df\nDataFrame\n\nprecursor_df with the ‘charge’ column\n\n\nbatch_size\nint\n500000\n\n\n\nReturns\nDataFrame\n\nprecursor_df with ‘precursor_mz’\n\n\n\n\nsource\n\n\nis_precursor_refined\n\n is_precursor_refined (precursor_df:pandas.core.frame.DataFrame)\n\n\nsource\n\n\nrefine_precursor_df\n\n refine_precursor_df (df:pandas.core.frame.DataFrame, drop_frag_idx=True,\n                      ensure_data_validity=False)\n\nRefine df inplace for faster precursor/fragment calculation.\n\nsource\n\n\nhash_precursor_df\n\n hash_precursor_df (precursor_df:pandas.core.frame.DataFrame, seed:int=0)\n\nAdd columns ‘mod_seq_hash’ and ‘mod_seq_charge_hash’ into precursor_df (inplace). The 64-bit hash function is from mmh3 (mmh3.hash64).\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprecursor_df\nDataFrame\n\nprecursor_df\n\n\nseed\nint\n0\n\n\n\nReturns\nDataFrame\n\nDataFrame with columns ‘mod_seq_hash’ and ‘mod_seq_charge_hash’\n\n\n\n\nsource\n\n\nhash_mod_seq_charge_df\n\n hash_mod_seq_charge_df (precursor_df:pandas.core.frame.DataFrame, seed=0)\n\nInternal function\n\nsource\n\n\nhash_mod_seq_df\n\n hash_mod_seq_df (precursor_df:pandas.core.frame.DataFrame, seed=0)\n\nInternal function\n\nsource\n\n\nget_mod_seq_charge_hash\n\n get_mod_seq_charge_hash (sequence:str, mods:str, mod_sites:str,\n                          charge:int, seed=0)\n\nGet hash code value for a precursor: (sequence, mods, mod_sites, charge)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsequence\nstr\n\nAmino acid sequence\n\n\nmods\nstr\n\nModification names in AlphaBase format\n\n\nmod_sites\nstr\n\nModification sites in AlphaBase format\n\n\ncharge\nint\n\nPrecursor charge state\n\n\nseed\nint\n0\nSeed for hashing.Optional, by default 0\n\n\nReturns\nnp.int64\n\n64-bit hash code value\n\n\n\n\nsource\n\n\nget_mod_seq_hash\n\n get_mod_seq_hash (sequence:str, mods:str, mod_sites:str, seed:int=0)\n\nGet hash code value for a peptide: (sequence, mods, mod_sites)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsequence\nstr\n\nAmino acid sequence\n\n\nmods\nstr\n\nModification names in AlphaBase format\n\n\nmod_sites\nstr\n\nModification sites in AlphaBase format\n\n\nseed\nint\n0\nSeed for hashing.Optional, by default 0\n\n\nReturns\nint64\n\n64-bit hash code value\n\n\n\n\nsource\n\n\ncalc_precursor_isotope_mp\n\n calc_precursor_isotope_mp (precursor_df:pandas.core.frame.DataFrame,\n                            processes:int=8, mp_batch_size:int=100000,\n                            process_bar=None,\n                            min_right_most_intensity:float=0.2)\n\ncalc_precursor_isotope is not that fast for large dataframes, so here we use multiprocessing for faster isotope pattern calculation. The speed is acceptable with multiprocessing (3.8 min for 21M precursors, 8 processes).\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprecursor_df\nDataFrame\n\nPrecursor_df to calculate\n\n\nprocesses\nint\n8\nProcess number. Optional, by default 8\n\n\nmp_batch_size\nint\n100000\nMultiprocessing batch size. Optional, by default 100000.\n\n\nprocess_bar\nNoneType\nNone\nThe tqdm-based callback function to check multiprocessing. Defaults to None.\n\n\nmin_right_most_intensity\nfloat\n0.2\nThe minimal intensity value of the right-most peak relative to apex peak. Optional, by default 0.2\n\n\nReturns\nDataFrame\n\nprecursor_df with additional columns:- isotope_m1_intensity- isotope_m1_mz- isotope_apex_intensity- isotope_apex_mz- isotope_apex_index- isotope_right_most_intensity- isotope_right_most_mz- isotope_right_most_index\n\n\n\n\nsource\n\n\ncalc_precursor_isotope\n\n calc_precursor_isotope (precursor_df:pandas.core.frame.DataFrame,\n                         min_right_most_intensity:float=0.2)\n\nCalculate isotope mz values and relative (to M0) intensity values for precursor_df inplace.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprecursor_df\nDataFrame\n\nprecursor_df to calculate\n\n\nmin_right_most_intensity\nfloat\n0.2\nThe minimal intensity value of the right-most peak relative to apex peak. Optional, by default 0.2\n\n\nReturns\npd.DataFrame\n\nprecursor_df with additional columns:- isotope_m1_intensity- isotope_m1_mz- isotope_apex_intensity- isotope_apex_mz- isotope_apex_index- isotope_right_most_intensity- isotope_right_most_mz- isotope_right_most_index\n\n\n\n\nsource\n\n\nget_mod_seq_isotope_distribution\n\n get_mod_seq_isotope_distribution (seq_mods:tuple,\n                                   isotope_dist:alphabase.constants.isotop\n                                   e.IsotopeDistribution,\n                                   min_right_most_intensity:float=0.2)\n\nGet isotope abundance distribution by IsotopeDistribution. This function is designed for multiprocessing.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nseq_mods\ntuple\n\n(sequence, mods)\n\n\nisotope_dist\nIsotopeDistribution\n\nSee IsotopeDistribution in alphabase.constants.isotope\n\n\nmin_right_most_intensity\nfloat\n0.2\nThe minimal intensity value of the right-most peak relative to apex peak. Optional, by default 0.2\n\n\nReturns\ntuple\n\nfloat - Abundance of mono+1 / monofloat - Abundance of apex / monoint - Apex isotope position relative to mono,  i.e. apex index - mono index and 0 refers to the position of mono itselffloat - Abundance of right-most peak which has at least min_right_most_intensity intensity relative to the apex peakint - Right-most position relative to mono, i.e. right-most index - mono index\n\n\n\n\nsource\n\n\nget_right_most_isotope_index\n\n get_right_most_isotope_index (intensities:numpy.ndarray, apex_idx:int,\n                               min_right_most_intensity:float)\n\nGet right-most isotope index\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nintensities\nndarray\nIsotope intensities\n\n\napex_idx\nint\nThe index or position of apex peak\n\n\nmin_right_most_intensity\nfloat\nMinimal intensity to consider for right-most peak relative to apex\n\n\nReturns\nint\nIndex or position of the right-most peak\n\n\n\n\nsource\n\n\nget_mod_seq_formula\n\n get_mod_seq_formula (seq:str, mods:str)\n\n‘PEPTIDE’,‘Acetyl@Any N-term’ –> [(‘C’,n), (‘H’,m), …]\n\n\nTesting\n\nrepeat = 2\npeptides = ['AGHCEWQMKAADER']*repeat\nmods = ['Acetyl@Protein N-term;Carbamidomethyl@C;Oxidation@M']*repeat\nsites = ['0;4;8']*repeat\npeptides += ['AGHCEWQMK']*repeat\nmods += ['']*repeat\nsites += ['']*repeat\n\nprecursor_df = pd.DataFrame({\n    'sequence': peptides,\n    'mods': mods,\n    'mod_sites': sites\n})\nprecursor_df['nAA'] = precursor_df['sequence'].str.len()\nprecursor_df['charge'] = 2"
  },
  {
    "objectID": "peptide/fragment.html",
    "href": "peptide/fragment.html",
    "title": "Fragment Functionalities",
    "section": "",
    "text": "peptide N-term modification site is 0\nC-term modification site is -1\nother modifications sites are integers from 1 to nAA\n\nJust in case that we have two modifications, one is on the peptide N-term, and the other is on the N-term AA site chain. Similar for C-term sites.\n\nsource"
  },
  {
    "objectID": "peptide/fragment.html#test-mod-deltas",
    "href": "peptide/fragment.html#test-mod-deltas",
    "title": "Fragment Functionalities",
    "section": "Test mod deltas",
    "text": "Test mod deltas\n\nrepeat = 1\npeptides = ['AGHCEWQMK']*repeat\nmods = ['Acetyl@Protein N-term;Carbamidomethyl@C;Oxidation@M']*repeat\nsites = ['0;4;8']*repeat\npeptides += ['AGHCEWQMK']*repeat\nmods += ['Acetyl@Protein N-term;Carbamidomethyl@C;Oxidation@M']*repeat\nsites += ['0;4;8']*repeat\n\nprecursor_df = pd.DataFrame({\n    'sequence': peptides,\n    'mods': mods,\n    'mod_sites': sites\n})\nprecursor_df['nAA'] = precursor_df['sequence'].str.len()\nprecursor_df['charge'] = 2\nmod_deltas = ['']*len(precursor_df)\nmod_delta_sites = ['']*len(precursor_df)\nmod_deltas[0],mod_delta_sites[0] = '100;200','0;-1'\nprecursor_df['mod_deltas'] = mod_deltas\nprecursor_df['mod_delta_sites'] = mod_delta_sites\nupdate_precursor_mz(precursor_df)\nassert np.allclose(precursor_df.precursor_mz.values, [752.747333, 602.747333])\nfragment_mz_df = create_fragment_mz_dataframe(precursor_df, charged_frag_types=fragment_mz_df.columns.values)\nassert np.allclose(fragment_mz_df['y_z1'].values[precursor_df.frag_start_idx[0]:precursor_df.frag_end_idx[0]], \n    [1291.43971168, 1234.41824796, 1097.3593361 ,  937.32868742,\n        808.28609433,  622.20678138,  494.14820387,  347.11280417]\n),  f'200 Da must be added to all y-ions'\nassert np.allclose(fragment_mz_df['b_z1'].values[precursor_df.frag_start_idx[0]:precursor_df.frag_end_idx[0]], \n    [214.05495494,  271.07641866,  408.13533052,  568.1659792 ,\n        697.20857228,  883.28788524, 1011.34646274, 1158.38186245]\n),  f'100 Da must be added to all b-ions'\nprecursor_df\n\n\n\n\n\n  \n    \n      \n      sequence\n      mods\n      mod_sites\n      nAA\n      charge\n      mod_deltas\n      mod_delta_sites\n      precursor_mz\n      frag_start_idx\n      frag_end_idx\n    \n  \n  \n    \n      0\n      AGHCEWQMK\n      Acetyl@Protein N-term;Carbamidomethyl@C;Oxidat...\n      0;4;8\n      9\n      2\n      100;200\n      0;-1\n      752.747333\n      0\n      8\n    \n    \n      1\n      AGHCEWQMK\n      Acetyl@Protein N-term;Carbamidomethyl@C;Oxidat...\n      0;4;8\n      9\n      2\n      \n      \n      602.747333\n      8\n      16"
  },
  {
    "objectID": "peptide/mass_calc.html",
    "href": "peptide/mass_calc.html",
    "title": "Mass Calculation",
    "section": "",
    "text": "calc_b_y_and_peptide_mass\n\n calc_b_y_and_peptide_mass (sequence:str, mod_names:List[str],\n                            mod_sites:List[int],\n                            mod_deltas:List[float]=None,\n                            mod_delta_sites:List[int]=None)\n\nIt is highly recommend to use calc_b_y_and_peptide_masses_for_same_len_seqs as it is much faster\n\nsource\n\n\ncalc_mod_delta_masses_for_same_len_seqs\n\n calc_mod_delta_masses_for_same_len_seqs (nAA:int,\n                                          mod_deltas_list:List[List[float]\n                                          ],\n                                          mod_sites_list:List[List[int]])\n\nCalculate delta modification masses for the given peptide length (nAA), For open-search, we may also get modification mass deltas other than mod names. This function calculate modification masses from these delta masses.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nnAA\nint\npeptide length\n\n\nmod_deltas_list\ntyping.List[typing.List[float]]\n\n\n\nmod_sites_list\ntyping.List[typing.List[int]]\nlist of modification site list corresponding to mod_names_list.* site=0 refers to an N-term modification* site=-1 refers to a C-term modification* 1<=site<=peplen refers to a normal modification\n\n\nReturns\nndarray\n2-D array with shape=(nAA, pep_count or len(mod_names_list))). Masses of modifications through all the peptides, 0 if sites has no modifications\n\n\n\n\nsource\n\n\ncalc_delta_modification_mass\n\n calc_delta_modification_mass (pep_len:int, mass_deltas:List[float],\n                               mass_delta_sites:List[int])\n\nFor open-search, we may also get modification mass deltas other than mod names. This function calculate modification masses from these delta masses.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npep_len\nint\nnAA\n\n\nmass_deltas\ntyping.List[float]\nmass deltas on the peptide\n\n\nmass_delta_sites\ntyping.List[int]\nlocalized sites of corresponding mass deltas\n\n\nReturns\nndarray\n1-D array with length=peplen.Masses of modifications (mass deltas) through the peptide,0 if sites has no modifications\n\n\n\n\n\ncalc_peptide_masses_for_same_len_seqs and calc_b_y_and_peptide_masses_for_same_len_seqs are key functions for mass calculation in this module.\ncalc_peptide_masses_for_same_len_seqs calculates the peptide masses for the given sequence array and modification lists.\ncalc_b_y_and_peptide_masses_for_same_len_seqs calculates b/y neutral masses and peptide masses for the given sequence array and modification lists. Note that all a/b/c neutral masses can be calculated from b fragment masses, and x/y/z from y masses. So the key are b/y masses.\n\nsource\n\n\ncalc_b_y_and_peptide_masses_for_same_len_seqs\n\n calc_b_y_and_peptide_masses_for_same_len_seqs (sequences:numpy.ndarray,\n                                                mod_list:List[List[str]],\n                                                site_list:List[List[int]],\n                                                mod_delta_list:List[List[f\n                                                loat]]=None, mod_delta_sit\n                                                e_list:List[List[int]]=Non\n                                                e)\n\nCalculate b/y fragment masses and peptide masses for peptide sequences with same lengths. We need ‘same_len’ here because numpy can process AA sequences with same length very fast.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsequences\nndarray\n\n\n\n\nmod_list\ntyping.List[typing.List[str]]\n\nlist of modifications , e.g. [['Oxidation@M','Phospho@S'],['Phospho@S','Deamidated@N']]\n\n\nsite_list\ntyping.List[typing.List[int]]\n\nlist of modification sitescorresponding to mod_list, e.g. [[3,6],[4,17]]\n\n\nmod_delta_list\ntyping.List[typing.List[float]]\nNone\nlist of modifications, e.g. [[15.994915,79.966331],[79.966331,0.984016]]\n\n\nmod_delta_site_list\ntyping.List[typing.List[int]]\nNone\nlist of modification mass delta sitescorresponding to mod_list, e.g. [[3,6],[4,17]]\n\n\nReturns\ntyping.Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]\n\nneutral b fragment masses (2-D array)\n\n\n\n\nsource\n\n\ncalc_peptide_masses_for_same_len_seqs\n\n calc_peptide_masses_for_same_len_seqs (sequences:numpy.ndarray,\n                                        mod_list:List[str],\n                                        mod_delta_list:List[str]=None)\n\nCalculate peptide masses for peptide sequences with same lengths. We need ‘same_len’ here because numpy can process AA sequences with same length very fast. See alphabase.aa.calc_sequence_masses_for_same_len_seqs\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsequences\nndarray\n\n\n\n\nmod_list\ntyping.List[str]\n\nlist of modifications, e.g. ['Oxidation@M;Phospho@S','Phospho@S;Deamidated@N']\n\n\nmod_delta_list\ntyping.List[str]\nNone\n\n\n\nReturns\nndarray\n\npeptide masses (1-D array, H2O already added)\n\n\n\n\n\nTesting\n\nseq, mods, mod_sites = 'AGHCEWQMK', ['Carbamidomethyl@C', 'Oxidation@M'], [4, 8]\nb,y,pepmass = calc_b_y_and_peptide_mass(seq, mods, mod_sites)\nassert np.allclose(b, [  71.03711379,  128.05857751,  265.11748936,  425.14813804,\n         554.19073113,  740.27004408,  868.32862159, 1015.3640213 ]\n)\nassert np.allclose(y, [  [1090.43243521, 1033.41097149,  896.35205963,  736.32141095,\n         607.27881786,  421.19950491,  293.14092741,  146.1055277 ] ]\n)\nassert np.allclose(pepmass, 1161.46954899713)\n\n\nb_frags,y_frags,pepmasses=calc_b_y_and_peptide_masses_for_same_len_seqs([seq]*2, [mods,[]], [mod_sites,[]])\nassert np.allclose(b_frags[0], [  71.03711379,  128.05857751,  265.11748936,  425.14813804,\n         554.19073113,  740.27004408,  868.32862159, 1015.3640213 ]\n)\nassert np.allclose(y_frags[0], [  [1090.43243521, 1033.41097149,  896.35205963,  736.32141095,\n         607.27881786,  421.19950491,  293.14092741,  146.1055277 ] ]\n)\nassert np.allclose(pepmasses[0], 1161.46954899713)\n\n\nassert np.allclose(calc_peptide_masses_for_same_len_seqs([seq]*2, [';'.join(mods),\"\"]), [1161.469549  , 1088.45317066])"
  },
  {
    "objectID": "peptide/mobility.html",
    "href": "peptide/mobility.html",
    "title": "CCS/Mobility Functionalities",
    "section": "",
    "text": "source\n\nmobility_to_ccs_for_df\n\n mobility_to_ccs_for_df (precursor_df:pandas.core.frame.DataFrame,\n                         mobility_column:str, vendor='bruker')\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprecursor_df\nDataFrame\n\nprecursor_df\n\n\nmobility_column\nstr\n\nmobility column name in precursor_df\n\n\nvendor\nstr\nbruker\nDifferent vender may have different IM calculation. Defaults to “bruker”.Note that other vendors are not implemented currently.\n\n\nReturns\nndarray\n\nCCS values\n\n\n\n\nsource\n\n\nccs_to_mobility_for_df\n\n ccs_to_mobility_for_df (precursor_df:pandas.core.frame.DataFrame,\n                         ccs_column:str, vendor='bruker')\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprecursor_df\nDataFrame\n\nprecursor_df\n\n\nccs_column\nstr\n\nCCS column name in precursor_df\n\n\nvendor\nstr\nbruker\nDifferent vender may have different IM calculation. Defaults to “bruker”.Note that other vendors are not implemented currently.\n\n\nReturns\nndarray\n\nmobility values\n\n\n\n\nsource\n\n\nmobility_to_ccs_bruker\n\n mobility_to_ccs_bruker (im_values:numpy.ndarray, charges:numpy.ndarray,\n                         precursor_mzs:numpy.ndarray)\n\nConvert mobility to CCS for Bruker (timsTOF)\n\nsource\n\n\nccs_to_mobility_bruker\n\n ccs_to_mobility_bruker (ccs_values:numpy.ndarray, charges:numpy.ndarray,\n                         precursor_mzs:numpy.ndarray)\n\nConvert CCS to mobility for Bruker (timsTOF)\n\nsource\n\n\nget_reduced_mass\n\n get_reduced_mass (precursor_mzs:numpy.ndarray, charges:numpy.ndarray)\n\nReduced mass for CCS and mobility calculation"
  },
  {
    "objectID": "spectral_library/decoy_library.html",
    "href": "spectral_library/decoy_library.html",
    "title": "Decoy Libraries",
    "section": "",
    "text": "source\n\nDiaNNDecoyLib\n\n DiaNNDecoyLib\n                (target_lib:alphabase.spectral_library.library_base.SpecLi\n                bBase, raw_AAs:str='GAVLIFMPWSCTYHKRQEND',\n                mutated_AAs:str='LLLVVLLLLTSSSSLLNDQE', **kwargs)\n\nDiaNN-like decoy peptide generator\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntarget_lib\nSpecLibBase\n\nTarget library object\n\n\nraw_AAs\nstr\nGAVLIFMPWSCTYHKRQEND\nAAs those DiaNN decoy from. Defaults to ‘GAVLIFMPWSCTYHKRQEND’.\n\n\nmutated_AAs\nstr\nLLLVVLLLLTSSSSLLNDQE\nDiaNN\n\n\nkwargs\n\n\n\n\n\n\n\nsource\n\n\nDecoyLib\n\n DecoyLib (target_lib:alphabase.spectral_library.library_base.SpecLibBase,\n           fix_C_term=True, **kwargs)\n\nPseudo-reverse peptide decoy generator Currently, only sequence-level decoy is implemented, but AlphaPeptDeep will add modifications onto both target and decoy sequences, so it is enough for practical uses.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntarget_lib\nSpecLibBase\n\nTarget library to decoy.\n\n\nfix_C_term\nbool\nTrue\nIf fix C-term AA when decoy. Defaults to True.\n\n\nkwargs\n\n\n\n\n\n\n\nsource\n\n\nDecoyLib.decoy_sequence\n\n DecoyLib.decoy_sequence ()\n\nGenerate decoy sequences from self.target_lib\n\nsource\n\n\nDecoyLibProvider\n\n DecoyLibProvider ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nDecoyLibProvider.get_decoy_lib\n\n DecoyLibProvider.get_decoy_lib (name:str,\n                                 target_lib:alphabase.spectral_library.lib\n                                 rary_base.SpecLibBase, **kwargs)\n\nGet an object of a subclass of DecoyLib based on registered name.\n\n\n\n\nType\nDetails\n\n\n\n\nname\nstr\nRegistered decoy class name\n\n\ntarget_lib\nSpecLibBase\nTarget library for decoy generation\n\n\nkwargs\n\n\n\n\nReturns\nDecoyLib\nDecoy library object\n\n\n\n\n\nRegistered decoy methods\n\ndecoy_lib_provider.decoy_dict\n\n{'pseudo_reverse': __main__.DecoyLib, 'diann': __main__.DiaNNDecoyLib}"
  },
  {
    "objectID": "spectral_library/library_base.html",
    "href": "spectral_library/library_base.html",
    "title": "Base Class for Spectral Libraries",
    "section": "",
    "text": "source\n\nSpecLibBase\n\n SpecLibBase (charged_frag_types:List[str]=['b_z1', 'b_z2', 'y_z1',\n              'y_z2'], precursor_mz_min=400, precursor_mz_max=6000,\n              decoy:str=None)\n\nBase spectral library in alphabase and alphapeptdeep.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncharged_frag_types\ntyping.List[str]\n[‘b_z1’, ‘b_z2’, ‘y_z1’, ‘y_z2’]\n[‘b_z1’,‘b_z2’,‘y_z1’,‘y_modloss_z1’, …]; ‘b_z1’: ‘b’ is the fragment type and ‘z1’ is the charge state z=1.\n\n\nprecursor_mz_min\nint\n400\nUse this to clip precursor df. Defaults to 400.\n\n\nprecursor_mz_max\nint\n6000\nUse this to clip precursor df. Defaults to 6000.\n\n\ndecoy\nstr\nNone\nDecoy methods, could be “pseudo_reverse” or “diann”.Defaults to None.\n\n\n\n\nsource\n\n\nSpecLibBase.append_decoy_sequence\n\n SpecLibBase.append_decoy_sequence ()\n\nAppend decoy sequence into precursor_df. Decoy method is based on self.decoy(str).\ndecoy_lib = (\n    decoy_lib_provider.get_decoy_lib(\n        self.decoy, self\n    )\n)\ndecoy_lib.decoy_sequence()\n...\n\nsource\n\n\nSpecLibBase.hash_precursor_df\n\n SpecLibBase.hash_precursor_df ()\n\nInsert hash codes for peptides and precursors\n\nsource\n\n\nSpecLibBase.calc_precursor_isotope\n\n SpecLibBase.calc_precursor_isotope (multiprocessing:bool=True,\n                                     mp_process_num:int=8,\n                                     mp_process_bar=None,\n                                     min_num_for_mp:int=1000)\n\nAppend isotope columns into self.precursor_df. See alphabase.peptide.precursor.calc_precursor_isotope for details.\n\nsource\n\n\nSpecLibBase.flatten_fragment_data\n\n SpecLibBase.flatten_fragment_data ()\n\nCreate flattened (1-D) np.ndarray for fragment mz and intensity dataframes, respectively. The arrays are references to original data, that means: 1. This method is fast; 2. Changing the array values will change the df values. They can be unraveled back using: array.reshape(len(self._fragment_mz_df.columns), -1)\n\nsource\n\n\nSpecLibBase.calc_precursor_mz\n\n SpecLibBase.calc_precursor_mz ()\n\nCalculate precursor mz for self._precursor_df, and clip the self._precursor_df using self.clip_by_precursor_mz_\n\nsource\n\n\nSpecLibBase.clip_by_precursor_mz_\n\n SpecLibBase.clip_by_precursor_mz_ ()\n\nClip self._precursor_df inplace by self.min_precursor_mz and self.max_precursor_mz\n\nsource\n\n\nSpecLibBase.load_hdf\n\n SpecLibBase.load_hdf (hdf_file:str, load_mod_seq:bool=False)\n\nLoad the hdf library from hdf_file\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nhdf_file\nstr\n\nhdf library path to load\n\n\nload_mod_seq\nbool\nFalse\nif also load mod_seq_df. Defaults to False.\n\n\n\n\nsource\n\n\nSpecLibBase.load_df_from_hdf\n\n SpecLibBase.load_df_from_hdf (hdf_file:str, df_name:str)\n\nLoad specific dataset (dataframe) from hdf_file.\n\n\n\n\nType\nDetails\n\n\n\n\nhdf_file\nstr\nThe hdf file name\n\n\ndf_name\nstr\nThe dataset/dataframe name in the hdf file\n\n\nReturns\nDataFrame\nLoaded dataframe\n\n\n\n\nsource\n\n\nSpecLibBase.save_hdf\n\n SpecLibBase.save_hdf (hdf_file:str)\n\nSave library dataframes into hdf_file. For self.precursor_df, this method will save it into two hdf groups: hdf_file: library/precursor_df and library/mod_seq_df.\nlibrary/precursor_df contains all essential numberic columns those can be loaded faster from hdf file into memory: ‘precursor_mz’, ‘charge’, ‘mod_seq_hash’, ‘mod_seq_charge_hash’, ‘frag_start_idx’, ‘frag_end_idx’, ‘decoy’, ‘rt_pred’, ‘ccs_pred’, ‘mobility_pred’, ‘miss_cleave’, ‘nAA’, [‘isotope_mz_m1’, ‘isotope_intensity_m1’], …\nlibrary/mod_seq_df contains all string columns and the other not essential columns: ‘sequence’,‘mods’,‘mod_sites’, [‘proteins’, ‘genes’]… as well as ‘mod_seq_hash’, ‘mod_seq_charge_hash’ columns to map back to precursor_df\n\n\n\n\nType\nDetails\n\n\n\n\nhdf_file\nstr\nthe hdf file path to save\n\n\n\n\nsource\n\n\nSpecLibBase.save_df_to_hdf\n\n SpecLibBase.save_df_to_hdf (hdf_file:str, df_key:str,\n                             df:pandas.core.frame.DataFrame,\n                             delete_existing=False)\n\nSave a new HDF group or dataset into existing HDF file\n\nsource\n\n\nSpecLibBase.refine_df\n\n SpecLibBase.refine_df ()\n\nSort nAA and reset_index for faster calculation (or prediction)\n\nsource\n\n\nSpecLibBase.calc_precursor_isotope\n\n SpecLibBase.calc_precursor_isotope (multiprocessing:bool=True,\n                                     mp_process_num:int=8,\n                                     mp_process_bar=None,\n                                     min_num_for_mp:int=1000)\n\nAppend isotope columns into self.precursor_df. See alphabase.peptide.precursor.calc_precursor_isotope for details.\n\n\nTesting\n\nimport pandas as pd\nimport os\n\n\nrepeat = 3\npeptides = ['AGHCEWQMK']*repeat\nmods = ['Acetyl@Protein N-term;Carbamidomethyl@C;Oxidation@M']*repeat\nsites = ['0;4;8']*repeat\npeptides += ['AGHCEWQMKAADER']*repeat\nmods += ['']*repeat\nsites += ['']*repeat\n\nprecursor_df = pd.DataFrame({\n    'sequence': peptides,\n    'mods': mods,\n    'mod_sites': sites\n})\nprecursor_df['nAA'] = precursor_df['sequence'].str.len()\nprecursor_df['charge'] = 2\ntarget_lib = SpecLibBase(\n    ['b_z1','b_z2','y_z1','y_z2'],\n    decoy='pseudo_reverse'\n)\ntarget_lib._precursor_df = precursor_df\ntarget_lib.calc_precursor_mz()\ntarget_lib._fragment_mz_df = pd.DataFrame()\ntarget_lib._fragment_intensity_df = pd.DataFrame()\nif not os.path.isdir('sandbox'):\n    os.makedirs('sandbox')\ntarget_lib.save_hdf('sandbox/test_lib.hdf')\ntarget_lib.save_df_to_hdf('sandbox/test_lib.hdf','protein_df',pd.DataFrame(\n    {\n        'id':[1,2],\n        'full_name': [1,2],\n        'description': [1,2],\n        'sequence': [1,2]\n    })\n)\nnew_lib = SpecLibBase([])\nnew_lib.load_hdf('sandbox/test_lib.hdf')\n\nassert len(new_lib.precursor_df) > 0\nassert len(new_lib.fragment_mz_df) == 0\nassert len(new_lib.fragment_intensity_df) == 0\n\nassert 'sequence' not in new_lib.precursor_df.columns\nassert 'mod_seq_hash' in new_lib.precursor_df.columns\n\n\nnew_lib = SpecLibBase([])\nnew_lib.load_hdf('sandbox/test_lib.hdf', load_mod_seq=True)\nassert 'sequence' in new_lib.precursor_df.columns\nassert 'mod_seq_hash' in new_lib.precursor_df.columns\n\ndf = target_lib.load_df_from_hdf('sandbox/test_lib.hdf', 'precursor_df')\nassert len(precursor_df)==len(df)\ndf = target_lib.load_df_from_hdf('sandbox/test_lib.hdf', 'protein_df')\nassert len(df)==2\nos.remove('sandbox/test_lib.hdf')\nprecursor_df\n\n\n\n\n\n  \n    \n      \n      sequence\n      mods\n      mod_sites\n      nAA\n      charge\n      precursor_mz\n      mod_seq_hash\n      mod_seq_charge_hash\n    \n  \n  \n    \n      0\n      AGHCEWQMK\n      Acetyl@Protein N-term;Carbamidomethyl@C;Oxidat...\n      0;4;8\n      9\n      2\n      602.747333\n      -5783464648586361190\n      -5783464648586361188\n    \n    \n      1\n      AGHCEWQMK\n      Acetyl@Protein N-term;Carbamidomethyl@C;Oxidat...\n      0;4;8\n      9\n      2\n      602.747333\n      -5783464648586361190\n      -5783464648586361188\n    \n    \n      2\n      AGHCEWQMK\n      Acetyl@Protein N-term;Carbamidomethyl@C;Oxidat...\n      0;4;8\n      9\n      2\n      602.747333\n      -5783464648586361190\n      -5783464648586361188\n    \n    \n      3\n      AGHCEWQMKAADER\n      \n      \n      14\n      2\n      816.356299\n      -1606275412423975023\n      -1606275412423975021\n    \n    \n      4\n      AGHCEWQMKAADER\n      \n      \n      14\n      2\n      816.356299\n      -1606275412423975023\n      -1606275412423975021\n    \n    \n      5\n      AGHCEWQMKAADER\n      \n      \n      14\n      2\n      816.356299\n      -1606275412423975023\n      -1606275412423975021\n    \n  \n\n\n\n\n\ntarget_lib.append_decoy_sequence()\nassert len(target_lib.precursor_df) == len(precursor_df)*2\ntarget_lib.precursor_df\n\n\n\n\n\n  \n    \n      \n      sequence\n      mods\n      mod_sites\n      nAA\n      charge\n      precursor_mz\n      mod_seq_hash\n      mod_seq_charge_hash\n      decoy\n    \n  \n  \n    \n      0\n      AGHCEWQMK\n      Acetyl@Protein N-term;Carbamidomethyl@C;Oxidat...\n      0;4;8\n      9\n      2\n      602.747333\n      -5783464648586361190\n      -5783464648586361188\n      0\n    \n    \n      1\n      AGHCEWQMK\n      Acetyl@Protein N-term;Carbamidomethyl@C;Oxidat...\n      0;4;8\n      9\n      2\n      602.747333\n      -5783464648586361190\n      -5783464648586361188\n      0\n    \n    \n      2\n      AGHCEWQMK\n      Acetyl@Protein N-term;Carbamidomethyl@C;Oxidat...\n      0;4;8\n      9\n      2\n      602.747333\n      -5783464648586361190\n      -5783464648586361188\n      0\n    \n    \n      3\n      MQWECHGAK\n      Acetyl@Protein N-term;Carbamidomethyl@C;Oxidat...\n      0;4;8\n      9\n      2\n      602.747333\n      -5783464648586361190\n      -5783464648586361188\n      1\n    \n    \n      4\n      MQWECHGAK\n      Acetyl@Protein N-term;Carbamidomethyl@C;Oxidat...\n      0;4;8\n      9\n      2\n      602.747333\n      -5783464648586361190\n      -5783464648586361188\n      1\n    \n    \n      5\n      MQWECHGAK\n      Acetyl@Protein N-term;Carbamidomethyl@C;Oxidat...\n      0;4;8\n      9\n      2\n      602.747333\n      -5783464648586361190\n      -5783464648586361188\n      1\n    \n    \n      6\n      AGHCEWQMKAADER\n      \n      \n      14\n      2\n      816.356299\n      -1606275412423975023\n      -1606275412423975021\n      0\n    \n    \n      7\n      AGHCEWQMKAADER\n      \n      \n      14\n      2\n      816.356299\n      -1606275412423975023\n      -1606275412423975021\n      0\n    \n    \n      8\n      AGHCEWQMKAADER\n      \n      \n      14\n      2\n      816.356299\n      -1606275412423975023\n      -1606275412423975021\n      0\n    \n    \n      9\n      EDAAKMQWECHGAR\n      \n      \n      14\n      2\n      816.356299\n      -1606275412423975023\n      -1606275412423975021\n      1\n    \n    \n      10\n      EDAAKMQWECHGAR\n      \n      \n      14\n      2\n      816.356299\n      -1606275412423975023\n      -1606275412423975021\n      1\n    \n    \n      11\n      EDAAKMQWECHGAR\n      \n      \n      14\n      2\n      816.356299\n      -1606275412423975023\n      -1606275412423975021\n      1\n    \n  \n\n\n\n\n\ntarget_lib.calc_fragment_mz_df()\nassert 'b_z1' in target_lib.fragment_mz_df\nassert len(target_lib.fragment_mz_df) == np.sum(target_lib.precursor_df.nAA-1)\ntarget_lib.fragment_mz_df\n\n\n\n\n\n  \n    \n      \n      b_z1\n      b_z2\n      y_z1\n      y_z2\n    \n  \n  \n    \n      0\n      114.054955\n      57.531116\n      1091.439712\n      546.223494\n    \n    \n      1\n      171.076419\n      86.041848\n      1034.418248\n      517.712762\n    \n    \n      2\n      308.135331\n      154.571303\n      897.359336\n      449.183306\n    \n    \n      3\n      468.165979\n      234.586628\n      737.328687\n      369.167982\n    \n    \n      4\n      597.208572\n      299.107924\n      608.286094\n      304.646685\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      121\n      1089.466972\n      545.237124\n      543.245626\n      272.126451\n    \n    \n      122\n      1192.476157\n      596.741717\n      440.236442\n      220.621859\n    \n    \n      123\n      1329.535069\n      665.271173\n      303.177530\n      152.092403\n    \n    \n      124\n      1386.556532\n      693.781904\n      246.156066\n      123.581671\n    \n    \n      125\n      1457.593646\n      729.300461\n      175.118952\n      88.063114\n    \n  \n\n126 rows × 4 columns"
  },
  {
    "objectID": "constants/modification.html",
    "href": "constants/modification.html",
    "title": "Modification information",
    "section": "",
    "text": "The default modification TSV is stored in alphabase/constants/const_files/modification.tsv. Please check it to add more modifications.\nFirst, we load modification.tsv into MOD_DF.\nThen, we extract information of MOD_CHEM (dict), MOD_MASS (dict), MOD_LOSS_MASS (dict), MOD_INFO_DICT (dict) … from MOD_DF. This step is done in update_all_by_MOD_DF.\nAll these steps are done by load_mod_df.\nsource"
  },
  {
    "objectID": "constants/modification.html#we-can-update-modification-list-for-differet-requirements-for-example",
    "href": "constants/modification.html#we-can-update-modification-list-for-differet-requirements-for-example",
    "title": "Modification information",
    "section": "We can update modification list for differet requirements, for example:",
    "text": "We can update modification list for differet requirements, for example:\n\nadd_modifications_for_lower_case_AA()\nMOD_DF = MOD_DF[\n    (MOD_DF['classification'].isin(['Post-translational','O-linked glycosylation','AA substitution','Multiple','Non-standard residue','Pre-translational']))\n    & MOD_DF['lower_case_AA']\n] # we only need PTMs\nupdate_all_by_MOD_DF()\n# MOD_INFO_DICT is also updated\npd.DataFrame().from_dict(MOD_INFO_DICT, orient='index')\n\n\n\n\n\n  \n    \n      \n      mod_name\n      avge_mass\n      classification\n      composition\n      modloss_composition\n      mono_mass\n      unimod_id\n      unimod_mass\n      unimod_modloss\n      modloss_importance\n      mass\n      modloss_original\n      modloss\n      lower_case_AA\n    \n  \n  \n    \n      GlyGly@k\n      GlyGly@k\n      114.042927\n      Post-translational\n      H(6)C(4)N(2)O(2)\n      H(6)C(4)N(2)O(2)\n      114.042927\n      121\n      114.042927\n      114.042927\n      1000000.0\n      114.042927\n      114.042927\n      114.042927\n      True\n    \n    \n      15N-oxobutanoic@s^Protein N-term\n      15N-oxobutanoic@s^Protein N-term\n      -18.023900\n      Post-translational\n      H(-3)15N(-1)\n      \n      -18.023584\n      1419\n      -18.023584\n      0.000000\n      0.0\n      -18.023584\n      0.000000\n      0.000000\n      True\n    \n    \n      15N-oxobutanoic@t^Protein N-term\n      15N-oxobutanoic@t^Protein N-term\n      -18.023900\n      Post-translational\n      H(-3)15N(-1)\n      \n      -18.023584\n      1419\n      -18.023584\n      0.000000\n      0.0\n      -18.023584\n      0.000000\n      0.000000\n      True\n    \n    \n      3-deoxyglucosone@r\n      3-deoxyglucosone@r\n      144.125300\n      Multiple\n      H(8)C(6)O(4)\n      \n      144.042259\n      949\n      144.042259\n      0.000000\n      0.0\n      144.042259\n      0.000000\n      0.000000\n      True\n    \n    \n      3-phosphoglyceryl@k\n      3-phosphoglyceryl@k\n      168.042000\n      Post-translational\n      H(5)C(3)O(6)P(1)\n      \n      167.982375\n      1387\n      167.982375\n      0.000000\n      0.0\n      167.982375\n      0.000000\n      0.000000\n      True\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      pyrophospho@t\n      pyrophospho@t\n      159.959800\n      Post-translational\n      H(2)O(6)P(2)\n      H(3)O(7)P(2)\n      159.932662\n      898\n      159.932662\n      176.935402\n      0.0\n      159.932662\n      176.935401\n      0.000000\n      True\n    \n    \n      s-GlcNAc@s\n      s-GlcNAc@s\n      283.255700\n      O-linked glycosylation\n      H(13)C(8)N(1)O(8)S(1)\n      H(13)C(8)N(1)O(8)S(1)\n      283.036187\n      1412\n      283.036187\n      283.036187\n      0.0\n      283.036188\n      283.036188\n      0.000000\n      True\n    \n    \n      s-GlcNAc@t\n      s-GlcNAc@t\n      283.255700\n      O-linked glycosylation\n      H(13)C(8)N(1)O(8)S(1)\n      H(13)C(8)N(1)O(8)S(1)\n      283.036187\n      1412\n      283.036187\n      283.036187\n      0.0\n      283.036188\n      283.036188\n      0.000000\n      True\n    \n    \n      serotonylation@q\n      serotonylation@q\n      159.184600\n      Post-translational\n      H(9)C(10)N(1)O(1)\n      \n      159.068414\n      1992\n      159.068414\n      0.000000\n      0.0\n      159.068414\n      0.000000\n      0.000000\n      True\n    \n    \n      trifluoro@l\n      trifluoro@l\n      53.971400\n      Non-standard residue\n      H(-3)F(3)\n      \n      53.971735\n      750\n      53.971735\n      0.000000\n      0.0\n      53.971734\n      0.000000\n      0.000000\n      True\n    \n  \n\n1249 rows × 14 columns\n\n\n\n\nsource\n\nadd_new_modifications\n\n add_new_modifications (new_mods:list)\n\nAdd new modifications into MOD_DF\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nnew_mods\nlist\nlist of tuples. Tuple example:( modname@site:str (e.g. Mod@S),  chemical compositions:str (e.g. “H(4)O(2)”), [optional] modloss compositions:str (e.g. “H(2)O(1)”),)"
  },
  {
    "objectID": "constants/element.html",
    "href": "constants/element.html",
    "title": "Atom element information",
    "section": "",
    "text": "EMPTY_DIST defines a “zero element”, its monoisotopic position is 0 with abundance 1. It is used for abundance convolution between different isotopes (see abundance_convolution).\n\nsource\n\ntruncate_isotope\n\n truncate_isotope (isotopes:numpy.ndarray, mono_idx:int)\n\nFor a given isotope distribution (intensity patterns), this function truncates the distribution by top MAX_ISOTOPE_LEN neighbors those contain the monoisotopic peak pointed by mono_idx.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nisotopes\nndarray\nIsotope patterns with size > MAX_ISOTOPE_LEN.\n\n\nmono_idx\nint\nMonoisotopic peak position (index) in the isotope patterns\n\n\nReturns\ntuple\nthe new position of mono_idx\n\n\n\n\n\nLoad chemical element information\nFirst, we load alphadeep/constants/nist_element.yaml into CHEM_INFO_DICT, which is the base dict for further processing.\nThen we call reset_elements to extract corresponding information for CHEM_MONO_MASS (mono mass dict), CHEM_ISOTOPE_DIST (isotope distribution dict), and CHEM_MONO_IDX (dict of mono position in the isotope distribution).\nAt last, MASS_H2O and MASS_NH3 are re-calculated based on masses of H, O, and N in CHEM_MONO_MASS.\nAll these steps are done in load_elem_yaml(yaml_file).\n\nsource\n\n\nload_elem_yaml\n\n load_elem_yaml (yaml_file:str)\n\nLoad built-in or user-defined element yaml file. Default yaml is: os.path.join(_base_dir, ‘nist_element.yaml’)\n\nsource\n\n\nreset_elements\n\n reset_elements ()\n\n\n\nCalculate mass from a formula\nNow we have CHEM_MONO_MASS, we can calculate the mass of different chemical formula. Formula format: H(1)C(2)O(3)...\n\nsource\n\n\ncalc_mass_from_formula\n\n calc_mass_from_formula (formula:str)\n\nCalculates the mass of the formula`\n\n\n\n\nType\nDetails\n\n\n\n\nformula\nstr\ne.g. H(1)C(2)O(3)\n\n\nReturns\nfloat\nmass of the formula\n\n\n\n\nsource\n\n\nparse_formula\n\n parse_formula (formula:str)\n\nGiven a formula (str, e.g. H(1)C(2)O(3)), it generates [('H', 2), ('C', 2), ('O', 1)]\nExample"
  },
  {
    "objectID": "constants/isotope.html",
    "href": "constants/isotope.html",
    "title": "Isotope distribution",
    "section": "",
    "text": "source\n\nabundance_convolution\n\n abundance_convolution (d1:numpy.ndarray, mono1:int, d2:numpy.ndarray,\n                        mono2:int)\n\nIf we have two isotope distributions, we can convolute them into one distribution.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nd1\nndarray\nisotope distribution to convolute\n\n\nmono1\nint\nmono position of d1.\n\n\nd2\nndarray\nisotope distribution to convolute\n\n\nmono2\nint\nmono position of d2\n\n\nReturns\ntyping.Tuple[numpy.ndarray, int]\nnp.ndarray, convoluted isotope distributionint, new mono position.\n\n\n\nFor a given chemical formula, e.g. H(100)O(50)N(20), we first calculate the isotope distribution using “binary search”-like method for each type of element (here are H(100), O(50) and N(20)) (see one_element_dist). And then we convolute these distributions of all types into one distribution (see formula_dist).\n\nsource\n\n\nformula_dist\n\n formula_dist (formula:Union[list,str])\n\nGenerate the isotope distribution and the mono index for a given formula (as a list, e.g. [('H', 2), ('C', 2), ('O', 1)]).\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nformula\ntyping.Union[list, str]\nchemical formula, could be str or list.If str: “H(1)N(2)O(3)”.If list: “[(‘H’,1),(‘H’,2),(‘H’,3)]”.\n\n\nReturns\ntyping.Tuple[numpy.ndarray, int]\nnp.ndarray, isotope distributionint, mono position\n\n\n\n\nsource\n\n\none_element_dist\n\n one_element_dist (elem:str, n:int,\n                   chem_isotope_dist:numba.typed.typeddict.Dict,\n                   chem_mono_idx:numba.typed.typeddict.Dict)\n\nCalculate the isotope distribution for an element and its numbers.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nelem\nstr\nelement.\n\n\nn\nint\nelement number.\n\n\nchem_isotope_dist\nDict\nuse CHEM_ISOTOPE_DIST as parameter.\n\n\nchem_mono_idx\nDict\nuse CHEM_MONO_IDX as parameter.\n\n\nReturns\ntyping.Tuple[numpy.ndarray, int]\nnp.ndarray, isotope distribution of the element.int, mono position in the distribution\n\n\n\nCompare calculated isotope distributions with sisweb.com/mstools/isotope.htm\nDesired distribution for H10: (100, 0.16, 0.0001) calculated from sisweb.com/mstools/isotope.htm in low resolution mode (centroid mode)\nDesired distribution for C(100)H(100)O(10): (90.7784, 100, 56.368, 21.6475, 6.3624, 1.524, 0.3093) calculated from sisweb.com/mstools/isotope.htm in low resolution mode (centroid mode)\nThe target and calculated distributions are very similar\nCompare with Averagine\nTest for heavy labeled formula\n\n\nIsotopeDistribution\nformula_dist always calculates the distribution of each element based on the element number (using binary-search-like operation) and convolute distributions of different elements. If we have many peptides to calculate, each element’s distribution will be calculated repeatly. In IsotopeDistribution, instead of generating on-the-fly, we pre-built the isotope distribution table for each of the most common elements (C,H,N,O,S,P) with the element number from 0 to N, and N is large enough to cover all composition in shotgun proteomics. Thus, for a given chemical formula, we just need to check the distribution table for each element and convolute distributions among different elements.\n/Users/zengwenfeng/opt/anaconda3/lib/python3.8/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\nsource\n\n\nIsotopeDistribution\n\n IsotopeDistribution (max_elem_num_dict:dict={'C': 2000, 'H': 5000, 'N':\n                      1000, 'O': 1000, 'S': 200, 'P': 200})\n\nFaster calculation of isotope abundance distribution by pre-building isotope distribution tables for most common elements.\nWe have considered large enough number of elements for shotgun proteomics. We can increase max_elem_num_dict to support larger peptide or top-down in the future. However, current MAX_ISOTOPE_LEN is not suitable for top-down, it must be extended to a larger number (100?). Note that non-standard amino acids have 1000000 C elements in AlphaBase, We clip 1000000 C to the maximal number of C in max_elem_num_dict. As they have very large masses thus impossible to identify, their isotope distributions do not matter.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmax_elem_num_dict\ndict\n{‘C’: 2000, ‘H’: 5000, ‘N’: 1000, ‘O’: 1000, ‘S’: 200, ‘P’: 200}\nDefine the maximal number of the elements. Defaults to { ‘C’: 2000, ‘H’: 5000, ‘N’: 1000, ‘O’: 1000, ‘S’: 200, ‘P’: 200, }\n\n\n\n/Users/zengwenfeng/opt/anaconda3/lib/python3.8/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Examples\n  else: warn(msg)\n\nsource\n\n\nIsotopeDistribution.calc_formula_distribution\n\n IsotopeDistribution.calc_formula_distribution\n                                                (formula:List[Tuple[str,in\n                                                t]])\n\nCalculate isotope abundance distribution for a given formula\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nformula\ntyping.List[typing.Tuple[str, int]]\nchemical formula: “[(‘H’,1),(‘C’,2),(‘O’,3)]”.\n\n\nReturns\ntyping.Tuple[numpy.ndarray, int]\nnp.ndarray, isotope abundance distributionint, monoisotope position in the distribution array\n\n\n\n\niso = IsotopeDistribution()\nformula = 'C(100)H(100)O(10)Na(1)Fe(1)'\nformula = parse_formula(formula)\ndist, mono = iso.calc_formula_distribution(formula)\ndist1, mono1 = formula_dist(formula)\nassert np.allclose(dist, dist1)\nassert mono==mono1\nassert mono==2\ndist\n\narray([1.92320044e-02, 2.10952666e-02, 3.13753566e-01, 3.42663681e-01,\n       1.95962632e-01, 7.69157517e-02, 2.31993814e-02, 5.71948249e-03,\n       1.19790438e-03, 2.18815385e-04])"
  },
  {
    "objectID": "constants/aa.html",
    "href": "constants/aa.html",
    "title": "Amino acid information",
    "section": "",
    "text": "The amino acid masses are stored in 128-lengh array AA_ASCII_MASS. If an ASCII code is not in AA_CHEM, the mass will be 1e8 to disable it for MS search.\nWe also provide a AA table (AA_DF dataframe) for users.\n\nsource\n\nreset_AA_df\n\n reset_AA_df ()\n\n\nsource\n\n\nreset_AA_mass\n\n reset_AA_mass ()\n\nAA mass in np.array with shape (128,)\n\nAA_DF.loc[ord('A'):ord('Z'),:]\n\n\n\n\n\n  \n    \n      \n      aa\n      formula\n      mass\n    \n  \n  \n    \n      65\n      A\n      C(3)H(5)N(1)O(1)S(0)\n      7.103711e+01\n    \n    \n      66\n      B\n      C(1000000)\n      1.200000e+07\n    \n    \n      67\n      C\n      C(3)H(5)N(1)O(1)S(1)\n      1.030092e+02\n    \n    \n      68\n      D\n      C(4)H(5)N(1)O(3)S(0)\n      1.150269e+02\n    \n    \n      69\n      E\n      C(5)H(7)N(1)O(3)S(0)\n      1.290426e+02\n    \n    \n      70\n      F\n      C(9)H(9)N(1)O(1)S(0)\n      1.470684e+02\n    \n    \n      71\n      G\n      C(2)H(3)N(1)O(1)S(0)\n      5.702146e+01\n    \n    \n      72\n      H\n      C(6)H(7)N(3)O(1)S(0)\n      1.370589e+02\n    \n    \n      73\n      I\n      C(6)H(11)N(1)O(1)S(0)\n      1.130841e+02\n    \n    \n      74\n      J\n      C(6)H(11)N(1)O(1)S(0)\n      1.130841e+02\n    \n    \n      75\n      K\n      C(6)H(12)N(2)O(1)S(0)\n      1.280950e+02\n    \n    \n      76\n      L\n      C(6)H(11)N(1)O(1)S(0)\n      1.130841e+02\n    \n    \n      77\n      M\n      C(5)H(9)N(1)O(1)S(1)\n      1.310405e+02\n    \n    \n      78\n      N\n      C(4)H(6)N(2)O(2)S(0)\n      1.140429e+02\n    \n    \n      79\n      O\n      C(12)H(19)N(3)O(2)\n      2.371477e+02\n    \n    \n      80\n      P\n      C(5)H(7)N(1)O(1)S(0)\n      9.705276e+01\n    \n    \n      81\n      Q\n      C(5)H(8)N(2)O(2)S(0)\n      1.280586e+02\n    \n    \n      82\n      R\n      C(6)H(12)N(4)O(1)S(0)\n      1.561011e+02\n    \n    \n      83\n      S\n      C(3)H(5)N(1)O(2)S(0)\n      8.703203e+01\n    \n    \n      84\n      T\n      C(4)H(7)N(1)O(2)S(0)\n      1.010477e+02\n    \n    \n      85\n      U\n      C(3)H(5)N(1)O(1)Se(1)\n      1.509536e+02\n    \n    \n      86\n      V\n      C(5)H(9)N(1)O(1)S(0)\n      9.906841e+01\n    \n    \n      87\n      W\n      C(11)H(10)N(2)O(1)S(0)\n      1.860793e+02\n    \n    \n      88\n      X\n      C(1000000)\n      1.200000e+07\n    \n    \n      89\n      Y\n      C(9)H(9)N(1)O(2)S(0)\n      1.630633e+02\n    \n    \n      90\n      Z\n      C(1000000)\n      1.200000e+07\n    \n  \n\n\n\n\ncalc_sequence_mass can easily get the mass list of each amino acid. The key is: np.array(sequence, 'c').view(np.int8) converts a string into an ASCII code array\nNote that this function is rarely used in alphabase as it is not fast for a set of peptides.\n\nsource\n\n\ncalc_sequence_mass\n\n calc_sequence_mass (sequence:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\nsequence\nstr\nUnmodified peptide sequence\n\n\nReturns\nndarray\nMasses of each amino acid.\n\n\n\nWe provide calc_AA_masses_for_same_len_seqs and calc_sequence_masses_for_same_len_seqs functions to fast calculate masses for a given array of AA sequences with same length. They are fast because they both use slicing and reshape operation based on AA_ASCII_MASS array.\n/Users/zengwenfeng/opt/anaconda3/lib/python3.8/site-packages/fastcore/docscrape.py:225: UserWarning: potentially wrong underline length... \nRaises \n------- in \nCalculate sequence masses for the array of same-len AA sequences.\n...\n  else: warn(msg)\n/Users/zengwenfeng/opt/anaconda3/lib/python3.8/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Raises\n  else: warn(msg)\n\nsource\n\n\ncalc_sequence_masses_for_same_len_seqs\n\n calc_sequence_masses_for_same_len_seqs (sequence_array:numpy.ndarray)\n\nCalculate sequence masses for the array of same-len AA sequences.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsequence_array\nndarray\nunmodified sequences with the same length.\n\n\nReturns\nndarray\n1-D (array_size, sequence_len) array of masses.\n\n\n\n/Users/zengwenfeng/opt/anaconda3/lib/python3.8/site-packages/fastcore/docscrape.py:225: UserWarning: potentially wrong underline length... \nRaises \n------- in \nCalculate AA masses for the array of same-len AA sequences.\n...\n  else: warn(msg)\n\nsource\n\n\ncalc_AA_masses_for_same_len_seqs\n\n calc_AA_masses_for_same_len_seqs (sequence_array:numpy.ndarray)\n\nCalculate AA masses for the array of same-len AA sequences.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsequence_array\nndarray\nunmodified sequences with the same length.\n\n\nReturns\nndarray\n2-D (array_size, sequence_len) array of masses.\n\n\n\nFor a single sequence\n\nassert np.allclose(\n    calc_sequence_mass('ACDEFGNYK'),\n    [ 71.03711379, 103.00918496, 115.02694302, 129.04259309,\n       147.06841391,  57.02146372, 114.04292744, 163.06332853,\n       128.09496302 ]\n)\n\nFor sequences with the same length\nIt is very easy to generate b/y ions from a sequence or a list of sequences with same length\n\naa_masses = calc_AA_masses_for_same_len_seqs(['ACDEFGHIK','BCDEFGHIK','CCDEFGHIK'])\nb_masses = np.cumsum(aa_masses, axis=1)\nb_masses, pepmass = b_masses[:,:-1], b_masses[:,-1:]\npepmass += MASS_H2O\n{'pepmass':pepmass, 'b masses':b_masses, 'y masses':pepmass-b_masses}\n\n{'pepmass': array([[1.01845422e+03],\n        [1.20009474e+07],\n        [1.05042629e+03]]),\n 'b masses': array([[7.10371138e+01, 1.74046299e+02, 2.89073242e+02, 4.18115835e+02,\n         5.65184249e+02, 6.22205712e+02, 7.59264624e+02, 8.72348688e+02],\n        [1.20000000e+07, 1.20001030e+07, 1.20002180e+07, 1.20003471e+07,\n         1.20004941e+07, 1.20005512e+07, 1.20006882e+07, 1.20008013e+07],\n        [1.03009185e+02, 2.06018370e+02, 3.21045313e+02, 4.50087906e+02,\n         5.97156320e+02, 6.54177784e+02, 7.91236696e+02, 9.04320760e+02]]),\n 'y masses': array([[947.41710224, 844.40791728, 729.38097426, 600.33838117,\n         453.26996726, 396.24850354, 259.18959168, 146.1055277 ],\n        [947.41710224, 844.40791728, 729.38097426, 600.33838117,\n         453.26996726, 396.24850354, 259.18959168, 146.1055277 ],\n        [947.41710224, 844.40791728, 729.38097426, 600.33838117,\n         453.26996726, 396.24850354, 259.18959168, 146.1055277 ]])}\n\n\ncalc_AA_masses_for_var_len_seqs is rarely used in alphabase.\n\nsource\n\n\ncalc_AA_masses_for_var_len_seqs\n\n calc_AA_masses_for_var_len_seqs (sequence_array:numpy.ndarray)\n\nWe recommend to use calc_AA_masses_for_same_len_seqs as it is much faster.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsequence_array\nndarray\nSequences with variable lengths.\n\n\nReturns\nndarray\n1D array of masses, zero values are padded to fill the max length.\n\n\n\n\nmasses = calc_AA_masses_for_var_len_seqs(['EFGHIK','AAAGCDEFGHIK','DDDDCCDEFGHIK'])\nmasses\n\narray([[1.29042593e+02, 1.47068414e+02, 5.70214637e+01, 1.37058912e+02,\n        1.13084064e+02, 1.28094963e+02, 1.00000000e+08, 1.00000000e+08,\n        1.00000000e+08, 1.00000000e+08, 1.00000000e+08, 1.00000000e+08,\n        1.00000000e+08],\n       [7.10371138e+01, 7.10371138e+01, 7.10371138e+01, 5.70214637e+01,\n        1.03009185e+02, 1.15026943e+02, 1.29042593e+02, 1.47068414e+02,\n        5.70214637e+01, 1.37058912e+02, 1.13084064e+02, 1.28094963e+02,\n        1.00000000e+08],\n       [1.15026943e+02, 1.15026943e+02, 1.15026943e+02, 1.15026943e+02,\n        1.03009185e+02, 1.03009185e+02, 1.15026943e+02, 1.29042593e+02,\n        1.47068414e+02, 5.70214637e+01, 1.37058912e+02, 1.13084064e+02,\n        1.28094963e+02]])"
  },
  {
    "objectID": "protein/fasta.html",
    "href": "protein/fasta.html",
    "title": "Protein and Peptide Processing",
    "section": "",
    "text": "source\n\nconcat_proteins\n\n concat_proteins (protein_dict:dict, sep='$')\n\nConcatenate all protein sequences into a single sequence, seperated by sep ($ by default).\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprotein_dict\ndict\n\nprotein_dict by read_fasta_file()\n\n\nsep\nstr\n$\n\n\n\nReturns\nstr\n\nconcatenated sequence seperated by sep.\n\n\n\n\nsource\n\n\nload_all_proteins\n\n load_all_proteins (fasta_file_list:list)\n\n/Users/zengwenfeng/opt/anaconda3/lib/python3.8/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Yields\n  else: warn(msg)\n\nsource\n\n\nread_fasta_file\n\n read_fasta_file (fasta_filename:str='')\n\nRead a FASTA file line by line\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfasta_filename\nstr\n\nfasta.\n\n\n\n\nsource\n\n\nget_uniprot_gene_name\n\n get_uniprot_gene_name (description:str)\n\n\nsource\n\n\nDigest\n\n Digest (protease:str='trypsin/P', max_missed_cleavages:int=2,\n         peptide_length_min:int=6, peptide_length_max:int=45)\n\nDigest a protein sequence\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprotease\nstr\ntrypsin/P\nprotease name, could be pre-defined name defined in protease_dictor a regular expression. By default ‘trypsin/P’\n\n\nmax_missed_cleavages\nint\n2\nMax number of misses cleavage sites.By default 2\n\n\npeptide_length_min\nint\n6\nMinimal cleaved peptide length, by default 6\n\n\npeptide_length_max\nint\n45\nMaximal cleaved peptide length, by default 45\n\n\n\n\nsource\n\n\ncleave_sequence_with_cut_pos\n\n cleave_sequence_with_cut_pos (sequence:str, cut_pos:numpy.ndarray,\n                               n_missed_cleavages:int=2,\n                               pep_length_min:int=6,\n                               pep_length_max:int=45)\n\nCleave a sequence with cut postions (cut_pos). Filters to have a minimum and maximum length.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsequence\nstr\n\nprotein sequence\n\n\ncut_pos\nndarray\n\ncut postions determined by a given protease.\n\n\nn_missed_cleavages\nint\n2\nthe number of max missed cleavages.\n\n\npep_length_min\nint\n6\nmin peptide length.\n\n\npep_length_max\nint\n45\nmax peptide length.\n\n\nReturns\ntuple\n\nList[str]. Cleaved peptide sequences with missed cleavages.List[int]. Number of miss cleavage of each peptide.List[bool]. If N-term peptideList[bool]. If C-term pepetide\n\n\n\n\nsource\n\n\nDigest.cleave_sequence\n\n Digest.cleave_sequence (sequence:str)\n\nCleave a sequence.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsequence\nstr\nthe given (protein) sequence.\n\n\nReturns\ntuple\nlist[str]: cleaved peptide sequences with missed cleavageslist[int]: miss cleavage listlist[bool]: is protein N-termlist[bool]: is protein C-term\n\n\n\n\nsource\n\n\nget_fix_mods\n\n get_fix_mods (sequence:str, fix_mod_aas:str, fix_mod_dict:dict)\n\nGenerate fix modifications for the sequence\n\nseq = 'ACBCDCK'\n_fix_mod_dict = {}\n_fix_mod_dict['C'] = 'mod@C'\nmods, mod_sites = get_fix_mods(seq, 'C', _fix_mod_dict)\nassert mods==';'.join(['mod@C']*3)\nassert mod_sites=='2;4;6'\nget_fix_mods(seq, 'C', _fix_mod_dict)\n\n('mod@C;mod@C;mod@C', '2;4;6')\n\n\n\nsource\n\n\nget_var_mod_sites\n\n get_var_mod_sites (sequence:str, target_mod_aas:str, max_var_mod:int,\n                    max_combs:int)\n\nget all combinations of variable modification sites\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsequence\nstr\npeptide sequence\n\n\ntarget_mod_aas\nstr\nAAs that may have modifications\n\n\nmax_var_mod\nint\nmax number of mods in a sequence\n\n\nmax_combs\nint\nmax number of combinations for a sequence\n\n\nReturns\nlist\nlist of combinations (tuple) of modification sites \n\n\n\n\nsource\n\n\nget_candidate_sites\n\n get_candidate_sites (sequence:str, target_mod_aas:str)\n\nget candidate modification sites\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsequence\nstr\npeptide sequence\n\n\ntarget_mod_aas\nstr\nAAs that may have modifications\n\n\nReturns\nlist\ncandiadte mod sites in alphabase format (0: N-term, -1: C-term, 1-n:others)\n\n\n\n\nseq = 'AMCMSTYK'\ncandidate_sites = get_candidate_sites(seq, 'MSTY')\nassert np.all(np.array(candidate_sites)==np.array([2,4,5,6,7]))\nget_var_mod_sites(seq, 'MSTY', 3, 20)\n\n[(2,),\n (4,),\n (5,),\n (6,),\n (7,),\n (2, 4),\n (2, 5),\n (2, 6),\n (2, 7),\n (4, 5),\n (4, 6),\n (4, 7),\n (5, 6),\n (5, 7),\n (6, 7),\n (2, 4, 5),\n (2, 4, 6),\n (2, 4, 7),\n (2, 5, 6),\n (2, 5, 7)]\n\n\n\nsource\n\n\nget_var_mods\n\n get_var_mods (sequence:str, var_mod_aas:str, mod_dict:dict,\n               max_var_mod:int, max_combs:int, keep_unmodified:bool=False)\n\nGenerate all modification combinations and associated sites for the sequence.\n\nsource\n\n\nget_var_mods_per_sites_single_mod_on_aa\n\n get_var_mods_per_sites_single_mod_on_aa (sequence:str, mod_sites:tuple,\n                                          var_mod_dict:dict)\n\nUsed when the var mod list contains only one mods on the each AA, for example: Mod1@A, Mod2@D …\n\nsource\n\n\nget_var_mods_per_sites_multi_mods_on_aa\n\n get_var_mods_per_sites_multi_mods_on_aa (sequence:str, mod_sites:tuple,\n                                          var_mod_dict:dict)\n\nUsed only when the var mod list contains more than one mods on the same AA, for example: Mod1@A, Mod2@A …\n\nsource\n\n\nparse_term_mod\n\n parse_term_mod (term_mod_name:str)\n\n\nsource\n\n\ncreate_labeling_peptide_df\n\n create_labeling_peptide_df (peptide_df:pandas.core.frame.DataFrame,\n                             labels:list)\n\n\nsource\n\n\nparse_labels\n\n parse_labels (labels:list)\n\n\nsource\n\n\nadd_single_peptide_labeling\n\n add_single_peptide_labeling (seq:str, mods:str, mod_sites:str,\n                              label_aas:str, label_mod_dict:dict,\n                              nterm_label_mod:str, cterm_label_mod:str)\n\n\nsource\n\n\nprotein_idxes_to_names\n\n protein_idxes_to_names (protein_idxes:str, protein_names:list)\n\n\nsource\n\n\nappend_regular_modifications\n\n append_regular_modifications (df:pandas.core.frame.DataFrame,\n                               var_mods=['Phospho@S', 'Phospho@T',\n                               'Phospho@Y'], max_mod_num=1, max_combs=100,\n                               keep_unmodified=True,\n                               cannot_modify_pep_nterm_aa:bool=False,\n                               cannot_modify_pep_cterm_aa:bool=False)\n\nAppend regular (not N/C-term) variable modifications to the exsiting modifications of each sequence in df.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\nDataFrame\n\nPrecursor dataframe\n\n\nvar_mods\nlist\n[‘Phospho@S’, ‘Phospho@T’, ‘Phospho@Y’]\nConsidered varialbe modification list. Defaults to [‘Phospho@S’,‘Phospho@T’,‘Phospho@Y’].\n\n\nmax_mod_num\nint\n1\nMaximal modification number for each sequence of the var_mods. Defaults to 1.\n\n\nmax_combs\nint\n100\nOne sequence is only allowed to explode to max_combs number of modified peptides. Defaults to 100.\n\n\nkeep_unmodified\nbool\nTrue\nIf unmodified (only refered to var_mods)peptides are also remained in the returned dataframe. Defaults to True.\n\n\ncannot_modify_pep_nterm_aa\nbool\nFalse\nSimilar to cannot_modify_pep_cterm_aa, by default False\n\n\ncannot_modify_pep_cterm_aa\nbool\nFalse\nIf the modified AA is at C-term, then the modification cannot modified it.For example GlyGly@K, for a peptide ACDKEFGK, if GlyGly is at the C-term, trypsin cannot cleave the C-term K, hence there will be no such a modified peptide ACDKEFGK(GlyGly).by default False\n\n\nReturns\nDataFrame\n\nThe precursor_df with new modification added.\n\n\n\n\nsource\n\n\nFastaLib\n\n FastaLib (charged_frag_types:list=['b_z1', 'b_z2', 'y_z1', 'y_z2'],\n           protease:str='trypsin/P', max_missed_cleavages:int=2,\n           peptide_length_min:int=7, peptide_length_max:int=35,\n           precursor_charge_min:int=2, precursor_charge_max:int=4,\n           precursor_mz_min:float=200.0, precursor_mz_max:float=2000.0,\n           var_mods:list=['Acetyl@Protein N-term', 'Oxidation@M'],\n           max_var_mod_num:int=2, fix_mods:list=['Carbamidomethyl@C'],\n           decoy:str=None, I_to_L=False)\n\nClass to process fasta files and generate libraries, including: - Digest protein sequences - Add fixed, variable or labeling modifications to the peptide sequences - Add charge states - Append decoy peptides - Save libraries into hdf file\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncharged_frag_types\nlist\n[‘b_z1’, ‘b_z2’, ‘y_z1’, ‘y_z2’]\nFragment types with charge, by default [ ‘b_z1’,‘b_z2’,‘y_z1’, ‘y_z2’ ]\n\n\nprotease\nstr\ntrypsin/P\nCould be pre-defined protease name defined in protease_dict,or a regular expression. By default ‘trypsin/P’\n\n\nmax_missed_cleavages\nint\n2\nMaximal missed cleavages, by default 2\n\n\npeptide_length_min\nint\n7\nMinimal cleaved peptide length, by default 7\n\n\npeptide_length_max\nint\n35\nMaximal cleaved peptide length, by default 35\n\n\nprecursor_charge_min\nint\n2\nMinimal precursor charge, by default 2\n\n\nprecursor_charge_max\nint\n4\nMaximal precursor charge, by default 4\n\n\nprecursor_mz_min\nfloat\n200.0\nMinimal precursor mz, by default 200.0\n\n\nprecursor_mz_max\nfloat\n2000.0\nMaximal precursor mz, by default 2000.0\n\n\nvar_mods\nlist\n[‘Acetyl@Protein N-term’, ‘Oxidation@M’]\nlist of variable modifications, by default [‘Acetyl@Protein N-term’,‘Oxidation@M’]\n\n\nmax_var_mod_num\nint\n2\nMaximal number of variable modifications on a peptide sequence, by default 2\n\n\nfix_mods\nlist\n[‘Carbamidomethyl@C’]\nlist of fixed modifications, by default [‘Carbamidomethyl@C’]\n\n\ndecoy\nstr\nNone\nor pseudo_reverse or diann\n\n\nI_to_L\nbool\nFalse\n\n\n\n\n\nsource\n\n\nFastaLib.add_modifications\n\n FastaLib.add_modifications ()\n\nAdd fixed and variable modifications to all peptide sequences in self.precursor_df\n\nsource\n\n\nFastaLib.add_additional_modifications\n\n FastaLib.add_additional_modifications (var_mods=['Phospho@S',\n                                        'Phospho@T', 'Phospho@Y'],\n                                        max_mod_num:int=1,\n                                        max_combs:int=100,\n                                        keep_unmodified:bool=True, cannot_\n                                        modify_pep_nterm_aa:bool=False, ca\n                                        nnot_modify_pep_cterm_aa:bool=Fals\n                                        e)\n\nAdd external defined variable modifications to all peptide sequences in self.precursor_df. See append_regular_modifications for details\n\nsource\n\n\nFastaLib.add_mods_for_one_seq\n\n FastaLib.add_mods_for_one_seq (sequence:str, is_prot_nterm,\n                                is_prot_cterm)\n\nAdd fixed and variable modifications to a sequence\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsequence\nstr\nPeptide sequence\n\n\nis_prot_nterm\nbool\nif protein N-term\n\n\nis_prot_cterm\nbool\nif protein C-term\n\n\nReturns\ntuple\nlist[str]: list of modification nameslist[str]: list of modification sites\n\n\n\n\nsource\n\n\nFastaLib.add_peptide_labeling\n\n FastaLib.add_peptide_labeling (labeling_channel_dict:dict)\n\nAdd labeling onto peptides inplace of self._precursor_df\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nlabeling_channel_dict\ndict\nFor example:{ ‘reference’: [], # not labelled for reference ‘0’: [‘Dimethyl@Any N-term’,‘Dimethyl@K’], ‘4’: [‘Dimethyl:2H(4)@Any N-term’,‘Dimethyl:2H(4)@K’], ‘8’: [‘Dimethyl:2H(6)13C(2)@Any N-term’,‘Dimethyl:2H(6)13C(2)@K’],}.The key name could be arbitrary distinguished strings for channel name,and value must be a list of modification names (str) in alphabase format.\n\n\n\n\nsource\n\n\nSpecLibBase.append_decoy_sequence\n\n SpecLibBase.append_decoy_sequence ()\n\nAppend decoy sequence into precursor_df. Decoy method is based on self.decoy(str).\ndecoy_lib = (\n    decoy_lib_provider.get_decoy_lib(\n        self.decoy, self\n    )\n)\ndecoy_lib.decoy_sequence()\n...\n\nsource\n\n\nFastaLib.get_peptides_from_fasta\n\n FastaLib.get_peptides_from_fasta (fasta_file:Union[str,list])\n\nLoad peptide sequences from fasta files.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nfasta_file\ntyping.Union[str, list]\nCould be a fasta file (str) or a list of fasta files (list[str])\n\n\n\n\nsource\n\n\nFastaLib.get_peptides_from_protein_dict\n\n FastaLib.get_peptides_from_protein_dict (protein_dict:dict)\n\nCleave the protein sequences in protein_dict.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nprotein_dict\ndict\nFormat:{ ‘prot_id1’: ‘protein_id’: ‘prot_id1’ ‘sequence’: string ‘gene_name’: string ‘description’: string ‘prot_id2’: …}\n\n\n\n\nsource\n\n\nFastaLib.get_peptides_from_peptide_sequence_list\n\n FastaLib.get_peptides_from_peptide_sequence_list (pep_seq_list:list,\n                                                   protein_list:list=None)\n\n\nsource\n\n\nFastaLib.import_and_process_fasta\n\n FastaLib.import_and_process_fasta (fasta_files:Union[str,list])\n\nImport and process a fasta file or a list of fasta files. It includes: - Load the fasta file(s) - Append decoy peptide sequences - Add modifications to peptides - Add charge\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nfasta_files\ntyping.Union[str, list]\nA fasta file or a list of fasta files\n\n\n\n\nsource\n\n\nFastaLib.import_and_process_protein_dict\n\n FastaLib.import_and_process_protein_dict (protein_dict:dict)\n\nImport the protein_dict instead of fasta files.\nprotein_dict = load_all_proteins(fasta_files)\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nprotein_dict\ndict\nFormat:{ ‘prot_id1’: ‘protein_id’: ‘prot_id1’ ‘sequence’: string ‘gene_name’: string ‘description’: string ‘prot_id2’: …}\n\n\n\n\nsource\n\n\nFastaLib.import_and_process_peptide_sequences\n\n FastaLib.import_and_process_peptide_sequences (pep_seq_list:list,\n                                                protein_list:list=None)\n\nImporting peptide sequences instead of proteins\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npep_seq_list\nlist\n\nPeptide sequence list\n\n\nprotein_list\nlist\nNone\nProtein id list which maps to pep_seq_list one-by-one, by default None\n\n\n\n\nsource\n\n\nFastaLib.save_hdf\n\n FastaLib.save_hdf (hdf_file:str)\n\nSave the contents into hdf file (attribute -> hdf_file): - self.precursor_df -> library/precursor_df - self.protein_df -> library/protein_df - self.fragment_mz_df -> library/fragment_mz_df - self.fragment_intensity_df -> library/fragment_intensity_df\n\n\n\n\nType\nDetails\n\n\n\n\nhdf_file\nstr\nThe hdf file path\n\n\n\n\nsource\n\n\nFastaLib.load_hdf\n\n FastaLib.load_hdf (hdf_file:str, load_mod_seq:bool=False)\n\nLoad contents from hdf file: - self.precursor_df <- library/precursor_df - self.precursor_df <- library/mod_seq_df if load_mod_seq is True - self.protein_df <- library/protein_df - self.fragment_mz_df <- library/fragment_mz_df - self.fragment_intensity_df <- library/fragment_intensity_df\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nhdf_file\nstr\n\nhdf file path\n\n\nload_mod_seq\nbool\nFalse\nAfter library is generated with hash values (int64) for sequences (str) and modifications (str),we don’t need sequence information for searching. So we can skip loading sequences to make the loading much faster.By default False\n\n\n\n\n\nTesting\n\ndf = pd.DataFrame(\n    {\n        'sequence': ['ABSTY','ACXSX','ACDEFG'],\n        'mods': ['', 'Acetyl@Protein N-term', ''],\n        'mod_sites': ['', '0', '']\n    }\n)\ndf = append_regular_modifications(df, keep_unmodified=True)\nassert np.sum(df.sequence=='ABSTY')==4\nassert np.sum(df.sequence=='ACXSX')==2\nassert np.sum(df.sequence=='ACDEFG')==1\nassert all(df[df.sequence=='ABSTY'].mods.values == np.array(['Phospho@S','Phospho@T','Phospho@Y','']))\nassert all(df[df.sequence=='ABSTY'].mod_sites.values == np.array(['3','4','5','']))\nassert all(df[df.sequence=='ACXSX'].mods.values == np.array(['Acetyl@Protein N-term;Phospho@S','Acetyl@Protein N-term']))\nassert all(df[df.sequence=='ACXSX'].mod_sites.values == np.array(['0;4','0']))\ndf\n\n\n\n\n\n  \n    \n      \n      sequence\n      mods\n      mod_sites\n    \n  \n  \n    \n      0\n      ABSTY\n      Phospho@S\n      3\n    \n    \n      1\n      ABSTY\n      Phospho@T\n      4\n    \n    \n      2\n      ABSTY\n      Phospho@Y\n      5\n    \n    \n      3\n      ABSTY\n      \n      \n    \n    \n      4\n      ACXSX\n      Acetyl@Protein N-term;Phospho@S\n      0;4\n    \n    \n      5\n      ACXSX\n      Acetyl@Protein N-term\n      0\n    \n    \n      6\n      ACDEFG\n      \n      \n    \n  \n\n\n\n\n\ndf = pd.DataFrame(\n    {\n        'sequence': ['ABSTY','ACXSX','ACDEFG'],\n        'mods': ['', 'Acetyl@Protein N-term', ''],\n        'mod_sites': ['', '0', '']\n    }\n)\ndf = append_regular_modifications(df, keep_unmodified=False)\nassert np.sum(df.sequence=='ABSTY')==3\nassert np.sum(df.sequence=='ACXSX')==1\nassert np.sum(df.sequence=='ACDEFG')==0\ndf\n\n\n\n\n\n  \n    \n      \n      sequence\n      mods\n      mod_sites\n    \n  \n  \n    \n      0\n      ABSTY\n      Phospho@S\n      3\n    \n    \n      1\n      ABSTY\n      Phospho@T\n      4\n    \n    \n      2\n      ABSTY\n      Phospho@Y\n      5\n    \n    \n      3\n      ACXSX\n      Acetyl@Protein N-term;Phospho@S\n      0;4\n    \n  \n\n\n\n\n\n_lib = FastaLib(None, I_to_L=False, decoy='pseudo_reverse')\nprot1 = 'MABCDESTKAFGHIJKLMNOPQRAFGHIJK'\nprot2 = 'AFGHIJKLMNOPQR'\nprotein_dict = {\n    'xx': {\n        'protein_id': 'xx',\n        'gene_name': '',\n        'sequence': prot1\n    },\n    'yy': {\n        'protein_id': 'yy',\n        'gene_name': 'gene',\n        'sequence': prot2\n    }\n}\n_lib.get_peptides_from_protein_dict(protein_dict)\n_lib.precursor_df\n\n\n\n\n\n  \n    \n      \n      sequence\n      protein_idxes\n      miss_cleavage\n      is_prot_nterm\n      is_prot_cterm\n      mods\n      mod_sites\n      nAA\n    \n  \n  \n    \n      0\n      AFGHIJK\n      0;1\n      0\n      True\n      True\n      \n      \n      7\n    \n    \n      1\n      LMNOPQR\n      0;1\n      0\n      False\n      True\n      \n      \n      7\n    \n    \n      2\n      ABCDESTK\n      0\n      0\n      True\n      False\n      \n      \n      8\n    \n    \n      3\n      MABCDESTK\n      0\n      0\n      True\n      False\n      \n      \n      9\n    \n    \n      4\n      AFGHIJKLMNOPQR\n      0;1\n      1\n      True\n      True\n      \n      \n      14\n    \n    \n      5\n      LMNOPQRAFGHIJK\n      0\n      1\n      False\n      True\n      \n      \n      14\n    \n    \n      6\n      ABCDESTKAFGHIJK\n      0\n      1\n      True\n      False\n      \n      \n      15\n    \n    \n      7\n      MABCDESTKAFGHIJK\n      0\n      1\n      True\n      False\n      \n      \n      16\n    \n    \n      8\n      AFGHIJKLMNOPQRAFGHIJK\n      0\n      2\n      False\n      True\n      \n      \n      21\n    \n    \n      9\n      ABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      \n      \n      22\n    \n    \n      10\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      \n      \n      23\n    \n  \n\n\n\n\n\n_lib.protein_df\n\n\n\n\n\n  \n    \n      \n      protein_id\n      gene_name\n      sequence\n    \n  \n  \n    \n      0\n      xx\n      \n      MABCDESTKAFGHIJKLMNOPQRAFGHIJK\n    \n    \n      1\n      yy\n      gene\n      AFGHIJKLMNOPQR\n    \n  \n\n\n\n\n\n_lib.append_protein_name()\nassert 'proteins' in _lib.precursor_df.columns\n_lib.precursor_df\n\n\n\n\n\n  \n    \n      \n      sequence\n      protein_idxes\n      miss_cleavage\n      is_prot_nterm\n      is_prot_cterm\n      mods\n      mod_sites\n      nAA\n      proteins\n      genes\n    \n  \n  \n    \n      0\n      AFGHIJK\n      0;1\n      0\n      True\n      True\n      \n      \n      7\n      xx;yy\n      gene\n    \n    \n      1\n      LMNOPQR\n      0;1\n      0\n      False\n      True\n      \n      \n      7\n      xx;yy\n      gene\n    \n    \n      2\n      ABCDESTK\n      0\n      0\n      True\n      False\n      \n      \n      8\n      xx\n      \n    \n    \n      3\n      MABCDESTK\n      0\n      0\n      True\n      False\n      \n      \n      9\n      xx\n      \n    \n    \n      4\n      AFGHIJKLMNOPQR\n      0;1\n      1\n      True\n      True\n      \n      \n      14\n      xx;yy\n      gene\n    \n    \n      5\n      LMNOPQRAFGHIJK\n      0\n      1\n      False\n      True\n      \n      \n      14\n      xx\n      \n    \n    \n      6\n      ABCDESTKAFGHIJK\n      0\n      1\n      True\n      False\n      \n      \n      15\n      xx\n      \n    \n    \n      7\n      MABCDESTKAFGHIJK\n      0\n      1\n      True\n      False\n      \n      \n      16\n      xx\n      \n    \n    \n      8\n      AFGHIJKLMNOPQRAFGHIJK\n      0\n      2\n      False\n      True\n      \n      \n      21\n      xx\n      \n    \n    \n      9\n      ABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      \n      \n      22\n      xx\n      \n    \n    \n      10\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      \n      \n      23\n      xx\n      \n    \n  \n\n\n\n\n\n_lib.add_modifications()\n_lib.precursor_df\n\n\n\n\n\n  \n    \n      \n      sequence\n      protein_idxes\n      miss_cleavage\n      is_prot_nterm\n      is_prot_cterm\n      mods\n      mod_sites\n      nAA\n      proteins\n      genes\n    \n  \n  \n    \n      0\n      AFGHIJK\n      0;1\n      0\n      True\n      True\n      \n      \n      7\n      xx;yy\n      gene\n    \n    \n      1\n      AFGHIJK\n      0;1\n      0\n      True\n      True\n      Acetyl@Protein N-term\n      0\n      7\n      xx;yy\n      gene\n    \n    \n      2\n      LMNOPQR\n      0;1\n      0\n      False\n      True\n      Oxidation@M\n      2\n      7\n      xx;yy\n      gene\n    \n    \n      3\n      LMNOPQR\n      0;1\n      0\n      False\n      True\n      \n      \n      7\n      xx;yy\n      gene\n    \n    \n      4\n      ABCDESTK\n      0\n      0\n      True\n      False\n      Carbamidomethyl@C\n      3\n      8\n      xx\n      \n    \n    \n      5\n      ABCDESTK\n      0\n      0\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term\n      3;0\n      8\n      xx\n      \n    \n    \n      6\n      MABCDESTK\n      0\n      0\n      True\n      False\n      Carbamidomethyl@C;Oxidation@M\n      4;1\n      9\n      xx\n      \n    \n    \n      7\n      MABCDESTK\n      0\n      0\n      True\n      False\n      Carbamidomethyl@C\n      4\n      9\n      xx\n      \n    \n    \n      8\n      MABCDESTK\n      0\n      0\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term;Oxidat...\n      4;0;1\n      9\n      xx\n      \n    \n    \n      9\n      MABCDESTK\n      0\n      0\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term\n      4;0\n      9\n      xx\n      \n    \n    \n      10\n      AFGHIJKLMNOPQR\n      0;1\n      1\n      True\n      True\n      Oxidation@M\n      9\n      14\n      xx;yy\n      gene\n    \n    \n      11\n      AFGHIJKLMNOPQR\n      0;1\n      1\n      True\n      True\n      \n      \n      14\n      xx;yy\n      gene\n    \n    \n      12\n      AFGHIJKLMNOPQR\n      0;1\n      1\n      True\n      True\n      Acetyl@Protein N-term;Oxidation@M\n      0;9\n      14\n      xx;yy\n      gene\n    \n    \n      13\n      AFGHIJKLMNOPQR\n      0;1\n      1\n      True\n      True\n      Acetyl@Protein N-term\n      0\n      14\n      xx;yy\n      gene\n    \n    \n      14\n      LMNOPQRAFGHIJK\n      0\n      1\n      False\n      True\n      Oxidation@M\n      2\n      14\n      xx\n      \n    \n    \n      15\n      LMNOPQRAFGHIJK\n      0\n      1\n      False\n      True\n      \n      \n      14\n      xx\n      \n    \n    \n      16\n      ABCDESTKAFGHIJK\n      0\n      1\n      True\n      False\n      Carbamidomethyl@C\n      3\n      15\n      xx\n      \n    \n    \n      17\n      ABCDESTKAFGHIJK\n      0\n      1\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term\n      3;0\n      15\n      xx\n      \n    \n    \n      18\n      MABCDESTKAFGHIJK\n      0\n      1\n      True\n      False\n      Carbamidomethyl@C;Oxidation@M\n      4;1\n      16\n      xx\n      \n    \n    \n      19\n      MABCDESTKAFGHIJK\n      0\n      1\n      True\n      False\n      Carbamidomethyl@C\n      4\n      16\n      xx\n      \n    \n    \n      20\n      MABCDESTKAFGHIJK\n      0\n      1\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term;Oxidat...\n      4;0;1\n      16\n      xx\n      \n    \n    \n      21\n      MABCDESTKAFGHIJK\n      0\n      1\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term\n      4;0\n      16\n      xx\n      \n    \n    \n      22\n      AFGHIJKLMNOPQRAFGHIJK\n      0\n      2\n      False\n      True\n      Oxidation@M\n      9\n      21\n      xx\n      \n    \n    \n      23\n      AFGHIJKLMNOPQRAFGHIJK\n      0\n      2\n      False\n      True\n      \n      \n      21\n      xx\n      \n    \n    \n      24\n      ABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Oxidation@M\n      3;17\n      22\n      xx\n      \n    \n    \n      25\n      ABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C\n      3\n      22\n      xx\n      \n    \n    \n      26\n      ABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term;Oxidat...\n      3;0;17\n      22\n      xx\n      \n    \n    \n      27\n      ABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term\n      3;0\n      22\n      xx\n      \n    \n    \n      28\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Oxidation@M\n      4;1\n      23\n      xx\n      \n    \n    \n      29\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Oxidation@M\n      4;18\n      23\n      xx\n      \n    \n    \n      30\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Oxidation@M;Oxidation@M\n      4;1;18\n      23\n      xx\n      \n    \n    \n      31\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C\n      4\n      23\n      xx\n      \n    \n    \n      32\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term;Oxidat...\n      4;0;1\n      23\n      xx\n      \n    \n    \n      33\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term;Oxidat...\n      4;0;18\n      23\n      xx\n      \n    \n    \n      34\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term;Oxidat...\n      4;0;1;18\n      23\n      xx\n      \n    \n    \n      35\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term\n      4;0\n      23\n      xx\n      \n    \n  \n\n\n\n\n\n_lib.add_additional_modifications(['Phospho@S','Phospho@T'])\nassert _lib.precursor_df.mods.str.contains('Phospho').any()\n_lib.precursor_df\n\n\n\n\n\n  \n    \n      \n      sequence\n      protein_idxes\n      miss_cleavage\n      is_prot_nterm\n      is_prot_cterm\n      mods\n      mod_sites\n      nAA\n      proteins\n      genes\n    \n  \n  \n    \n      0\n      AFGHIJK\n      0;1\n      0\n      True\n      True\n      \n      \n      7\n      xx;yy\n      gene\n    \n    \n      1\n      AFGHIJK\n      0;1\n      0\n      True\n      True\n      Acetyl@Protein N-term\n      0\n      7\n      xx;yy\n      gene\n    \n    \n      2\n      LMNOPQR\n      0;1\n      0\n      False\n      True\n      Oxidation@M\n      2\n      7\n      xx;yy\n      gene\n    \n    \n      3\n      LMNOPQR\n      0;1\n      0\n      False\n      True\n      \n      \n      7\n      xx;yy\n      gene\n    \n    \n      4\n      ABCDESTK\n      0\n      0\n      True\n      False\n      Carbamidomethyl@C;Phospho@S\n      3;6\n      8\n      xx\n      \n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      79\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term;Oxidat...\n      4;0;1;18;8\n      23\n      xx\n      \n    \n    \n      80\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term;Oxidat...\n      4;0;1;18\n      23\n      xx\n      \n    \n    \n      81\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term;Phospho@S\n      4;0;7\n      23\n      xx\n      \n    \n    \n      82\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term;Phospho@T\n      4;0;8\n      23\n      xx\n      \n    \n    \n      83\n      MABCDESTKAFGHIJKLMNOPQR\n      0\n      2\n      True\n      False\n      Carbamidomethyl@C;Acetyl@Protein N-term\n      4;0\n      23\n      xx\n      \n    \n  \n\n84 rows × 10 columns\n\n\n\n\n_lib = FastaLib(\n    ['b_z1','y_z1'], I_to_L=False, \n    decoy='pseudo_reverse'\n)\nprot1 = 'MACDESTYKBKFGHIKLMNPQRST'\nprot2 = 'FGHIKLMNPQR'\nprotein_dict = {\n    'xx': {\n        'protein_id': 'xx',\n        'sequence': prot1\n    },\n    'yy': {\n        'protein_id': 'yy',\n        'sequence': prot2\n    }\n}\n_lib.import_and_process_protein_dict(protein_dict)\n_lib.calc_precursor_isotope()\nassert (_lib.precursor_df.charge == _lib.min_precursor_charge).any()\nassert (_lib.precursor_df.charge == _lib.max_precursor_charge).any()\nassert (_lib.precursor_df.decoy==1).any()\nassert ('MACDESTY'[::-1]+'K') in _lib.precursor_df.sequence.values\nassert 'isotope_apex_index' in _lib.precursor_df.columns\nassert 'isotope_apex_intensity' in _lib.precursor_df.columns\nassert ~_lib.precursor_df.sequence.str.contains('B').any()\n_lib.precursor_df\n\n\n\n\n\n  \n    \n      \n      sequence\n      protein_idxes\n      miss_cleavage\n      is_prot_nterm\n      is_prot_cterm\n      mods\n      mod_sites\n      nAA\n      decoy\n      charge\n      precursor_mz\n      isotope_m1_intensity\n      isotope_apex_intensity\n      isotope_apex_index\n      isotope_right_most_intensity\n      isotope_right_most_index\n      isotope_m1_mz\n      isotope_apex_mz\n      isotope_right_most_mz\n    \n  \n  \n    \n      0\n      LMNPQRST\n      0\n      1\n      False\n      True\n      Oxidation@M\n      2\n      8\n      0\n      2\n      481.739834\n      0.478814\n      1.0\n      0\n      0.478814\n      1\n      482.241484\n      481.739834\n      482.241484\n    \n    \n      1\n      LMNPQRST\n      0\n      1\n      False\n      True\n      Oxidation@M\n      2\n      8\n      0\n      3\n      321.495648\n      0.478814\n      1.0\n      0\n      0.478814\n      1\n      321.830081\n      321.495648\n      321.830081\n    \n    \n      2\n      LMNPQRST\n      0\n      1\n      False\n      True\n      Oxidation@M\n      2\n      8\n      0\n      4\n      241.373555\n      0.478814\n      1.0\n      0\n      0.478814\n      1\n      241.624380\n      241.373555\n      241.624380\n    \n    \n      3\n      LMNPQRST\n      0\n      1\n      False\n      True\n      \n      \n      8\n      0\n      2\n      473.742377\n      0.478433\n      1.0\n      0\n      0.478433\n      1\n      474.244027\n      473.742377\n      474.244027\n    \n    \n      4\n      LMNPQRST\n      0\n      1\n      False\n      True\n      \n      \n      8\n      0\n      3\n      316.164010\n      0.478433\n      1.0\n      0\n      0.478433\n      1\n      316.498443\n      316.164010\n      316.498443\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      79\n      FGHIKLMNPQRST\n      0\n      2\n      False\n      True\n      Oxidation@M\n      7\n      13\n      0\n      3\n      515.604920\n      0.828432\n      1.0\n      0\n      0.420789\n      2\n      515.939354\n      515.604920\n      516.273787\n    \n    \n      80\n      FGHIKLMNPQRST\n      0\n      2\n      False\n      True\n      Oxidation@M\n      7\n      13\n      0\n      4\n      386.955509\n      0.828432\n      1.0\n      0\n      0.420789\n      2\n      387.206334\n      386.955509\n      387.457159\n    \n    \n      81\n      FGHIKLMNPQRST\n      0\n      2\n      False\n      True\n      \n      \n      13\n      0\n      2\n      764.906285\n      0.828051\n      1.0\n      0\n      0.418418\n      2\n      765.407935\n      764.906285\n      765.909585\n    \n    \n      82\n      FGHIKLMNPQRST\n      0\n      2\n      False\n      True\n      \n      \n      13\n      0\n      3\n      510.273282\n      0.828051\n      1.0\n      0\n      0.418418\n      2\n      510.607715\n      510.273282\n      510.942149\n    \n    \n      83\n      FGHIKLMNPQRST\n      0\n      2\n      False\n      True\n      \n      \n      13\n      0\n      4\n      382.956781\n      0.828051\n      1.0\n      0\n      0.418418\n      2\n      383.207606\n      382.956781\n      383.458431\n    \n  \n\n84 rows × 19 columns\n\n\n\n\n_lib.import_and_process_protein_dict(protein_dict)\n_lib.add_peptide_labeling({\n    'light': ['Dimethyl@Any N-term','Dimethyl@K'],\n    'heavy': ['Dimethyl:2H(6)13C(2)@Any N-term','Dimethyl:2H(6)13C(2)@K'],\n})\n_lib.calc_precursor_isotope()\nassert (_lib.precursor_df.decoy==1).any()\nassert ('MACDESTY'[::-1]+'K') in _lib.precursor_df.sequence.values\nassert 'isotope_apex_index' in _lib.precursor_df.columns\nassert 'isotope_apex_intensity' in _lib.precursor_df.columns\nassert ~_lib.precursor_df.sequence.str.contains('B').any()\n_lib.precursor_df\n\n\n\n\n\n  \n    \n      \n      sequence\n      protein_idxes\n      miss_cleavage\n      is_prot_nterm\n      is_prot_cterm\n      mods\n      mod_sites\n      nAA\n      decoy\n      charge\n      label_channel\n      precursor_mz\n      isotope_m1_intensity\n      isotope_apex_intensity\n      isotope_apex_index\n      isotope_right_most_intensity\n      isotope_right_most_index\n      isotope_m1_mz\n      isotope_apex_mz\n      isotope_right_most_mz\n    \n  \n  \n    \n      0\n      LMNPQRST\n      0\n      1\n      False\n      True\n      Oxidation@M;Dimethyl@Any N-term\n      2;0\n      8\n      0\n      2\n      light\n      495.755484\n      0.500906\n      1.0\n      0\n      0.500906\n      1\n      496.257134\n      495.755484\n      496.257134\n    \n    \n      1\n      LMNPQRST\n      0\n      1\n      False\n      True\n      Oxidation@M;Dimethyl@Any N-term\n      2;0\n      8\n      0\n      3\n      light\n      330.839415\n      0.500906\n      1.0\n      0\n      0.500906\n      1\n      331.173848\n      330.839415\n      331.173848\n    \n    \n      2\n      LMNPQRST\n      0\n      1\n      False\n      True\n      Oxidation@M;Dimethyl@Any N-term\n      2;0\n      8\n      0\n      4\n      light\n      248.381380\n      0.500906\n      1.0\n      0\n      0.500906\n      1\n      248.632205\n      248.381380\n      248.632205\n    \n    \n      3\n      LMNPQRST\n      0\n      1\n      False\n      True\n      Dimethyl@Any N-term\n      0\n      8\n      0\n      2\n      light\n      487.758027\n      0.500525\n      1.0\n      0\n      0.500525\n      1\n      488.259677\n      487.758027\n      488.259677\n    \n    \n      4\n      LMNPQRST\n      0\n      1\n      False\n      True\n      Dimethyl@Any N-term\n      0\n      8\n      0\n      3\n      light\n      325.507777\n      0.500525\n      1.0\n      0\n      0.500525\n      1\n      325.842210\n      325.507777\n      325.842210\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      163\n      FGHIKLMNPQRST\n      0\n      2\n      False\n      True\n      Oxidation@M;Dimethyl:2H(6)13C(2)@Any N-term;Di...\n      7;0;5\n      13\n      0\n      3\n      heavy\n      539.655367\n      0.788273\n      1.0\n      0\n      0.392103\n      2\n      539.989801\n      539.655367\n      540.324234\n    \n    \n      164\n      FGHIKLMNPQRST\n      0\n      2\n      False\n      True\n      Oxidation@M;Dimethyl:2H(6)13C(2)@Any N-term;Di...\n      7;0;5\n      13\n      0\n      4\n      heavy\n      404.993344\n      0.788273\n      1.0\n      0\n      0.392103\n      2\n      405.244169\n      404.993344\n      405.494994\n    \n    \n      165\n      FGHIKLMNPQRST\n      0\n      2\n      False\n      True\n      Dimethyl:2H(6)13C(2)@Any N-term;Dimethyl:2H(6)...\n      0;5\n      13\n      0\n      2\n      heavy\n      800.981955\n      0.787646\n      1.0\n      0\n      0.389779\n      2\n      801.483605\n      800.981955\n      801.985255\n    \n    \n      166\n      FGHIKLMNPQRST\n      0\n      2\n      False\n      True\n      Dimethyl:2H(6)13C(2)@Any N-term;Dimethyl:2H(6)...\n      0;5\n      13\n      0\n      3\n      heavy\n      534.323729\n      0.787646\n      1.0\n      0\n      0.389779\n      2\n      534.658162\n      534.323729\n      534.992596\n    \n    \n      167\n      FGHIKLMNPQRST\n      0\n      2\n      False\n      True\n      Dimethyl:2H(6)13C(2)@Any N-term;Dimethyl:2H(6)...\n      0;5\n      13\n      0\n      4\n      heavy\n      400.994616\n      0.787646\n      1.0\n      0\n      0.389779\n      2\n      401.245441\n      400.994616\n      401.496266\n    \n  \n\n168 rows × 20 columns"
  },
  {
    "objectID": "protein/test_fasta.html",
    "href": "protein/test_fasta.html",
    "title": "Testing fasta",
    "section": "",
    "text": "Init fasta lib\n\nfrom alphabase.protein.fasta import FastaLib\n\nprotein_dict = {\n    'xx': {\n        'protein_id': 'xx',\n        'sequence': 'MACDESTYKBKFGHIKLMNPQRST'\n    },\n    'yy': {\n        'protein_id': 'yy',\n        'sequence': 'FGHIKLMNPQR'\n    }\n}\n\nfastalib = FastaLib(\n    ['b_z1','b_z2','y_z1','y_z2'], \n    var_mods=['Oxidation@M','Acetyl@Protein N-term'],\n    fix_mods=['Carbamidomethyl@C'],\n    decoy='pseudo_reverse',\n    I_to_L=False, \n)\n\nCall import_protein_dict or import_fasta to load proteins, append decoys, add modifications and add charge states.\nfastalib.import_fasta([fasta1, fasta2])\n\nfastalib.import_and_process_protein_dict(protein_dict)\nfastalib.protein_df\n\n\n\n\n\n  \n    \n      \n      protein_id\n      sequence\n    \n  \n  \n    \n      0\n      xx\n      MACDESTYKBKFGHIKLMNPQRST\n    \n    \n      1\n      yy\n      FGHIKLMNPQR\n    \n  \n\n\n\n\n\nassert 'decoy' in fastalib.precursor_df.columns\nassert 'mods' in fastalib.precursor_df.columns\nassert 'mod_sites' in fastalib.precursor_df.columns\nassert 'charge' in fastalib.precursor_df.columns\n\nCall calc_precursor_isotope to calculate the precursor_mz, and M1/M2 isotope mz and intensity.\n\nfastalib.calc_precursor_isotope()\nassert 'precursor_mz' in fastalib.precursor_df.columns\nassert 'isotope_apex_mz' in fastalib.precursor_df.columns\nassert 'isotope_apex_intensity' in fastalib.precursor_df.columns\nassert 'isotope_apex_index' in fastalib.precursor_df.columns\nassert 'isotope_right_most_mz' in fastalib.precursor_df.columns\nassert 'isotope_right_most_intensity' in fastalib.precursor_df.columns\nassert 'isotope_right_most_index' in fastalib.precursor_df.columns\nassert 'isotope_m1_mz' in fastalib.precursor_df.columns\nassert 'isotope_m1_intensity' in fastalib.precursor_df.columns\n\nCall calc_fragment_mz_df to calculate the fragment dataframe\n\nfastalib.calc_fragment_mz_df()\nassert 'frag_start_idx' in fastalib.precursor_df.columns\nassert 'frag_end_idx' in fastalib.precursor_df.columns\nimport numpy as np\nassert len(fastalib.fragment_mz_df) == (fastalib.precursor_df.nAA.values-1).sum()\n\nUse save_hdf to save as hdf file:\nfastalib.save_hdf(hdf_file_path)\nThen use load_hdf to load precursor and fragment dataframes:\nfastalib.load_df(hdf_file_path, load_mod_seq=True)"
  },
  {
    "objectID": "io/hdf.html",
    "href": "io/hdf.html",
    "title": "HDF functionalities",
    "section": "",
    "text": "import alphabase.io.hdf\n\n# Other packages used to demonstrate functionality\nimport numpy as np\nimport pandas as pd\nimport os\n\nInstead of relying directly on the h5py interface, we will use an HDF wrapper file to provide consistent access to only those specific HDF features we want. Since components of an HDF file come in three shapes datasets, groups and attributes, we will first define a generic HDF wrapper object to handle these components. Once this is done, the HDF wrapper file can be treated as such an object with additional features to open and close the initial connection.\n\n#｜ hide\nfrom nbdev.showdoc import show_doc\n\n\n\nHDF_File\n\n HDF_File (file_name:str, read_only:bool=True, truncate:bool=False,\n           delete_existing:bool=False)\n\nA generic class to access HDF components."
  },
  {
    "objectID": "yaml_utils.html",
    "href": "yaml_utils.html",
    "title": "YAML Utils",
    "section": "",
    "text": "source\n\nsave_yaml\n\n save_yaml (filename, settings)\n\n\nsource\n\n\nload_yaml\n\n load_yaml (filename)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AlphaBase",
    "section": "",
    "text": "AlphaBase provides all basic python functionalities for AlphaPept ecosystem from the Mann Labs at the Max Planck Institute of Biochemistry and the University of Copenhagen. To enable all hyperlinks in this document, please view it at GitHub. For documentation, please see GitHub Pages"
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "AlphaBase",
    "section": "About",
    "text": "About\nAn open-source Python package of the AlphaPept ecosystem from the Mann Labs at the Max Planck Institute of Biochemistry and the University of Copenhagen. It provides basic functionalities for AlphaPept ecosystem."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "AlphaBase",
    "section": "License",
    "text": "License\nAlphaBase was developed by the Mann Labs at the Max Planck Institute of Biochemistry and the University of Copenhagen and is freely available with an Apache License. External Python packages (available in the requirements folder) have their own licenses, which can be consulted on their respective websites."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "AlphaBase",
    "section": "Installation",
    "text": "Installation\nAlphaBase can be installed and used on all major operating systems (Windows, macOS and Linux). There are two different types of installation possible:\n\nPip installer: Choose this installation if you want to use AlphaBase as a Python package in an existing Python 3.8 environment (e.g. a Jupyter notebook).\nDeveloper installer: Choose this installation if you are familiar with conda and Python. This installation allows access to all available features of AlphaBase and even allows to modify its source code directly. Generally, the developer version of AlphaBase outperforms the precompiled versions which makes this the installation of choice for high-throughput experiments.\n\n\nPip\nAlphaBase can be installed in an existing Python 3.8 environment with a single bash command. This bash command can also be run directly from within a Jupyter notebook by prepending it with a !:\npip install alphabase\nInstalling AlphaBase like this avoids conflicts when integrating it in other tools, as this does not enforce strict versioning of dependancies. However, if new versions of dependancies are released, they are not guaranteed to be fully compatible with AlphaBase. While this should only occur in rare cases where dependencies are not backwards compatible, you can always force AlphaBase to use dependancy versions which are known to be compatible with:\npip install \"alphabase[stable]\"\nNOTE: You might need to run pip install -U pip before installing AlphaBase like this. Also note the double quotes \".\nFor those who are really adventurous, it is also possible to directly install any branch (e.g. @development) with any extras (e.g. #egg=alphabase[stable,development-stable]) from GitHub with e.g.\npip install \"git+https://github.com/MannLabs/alphabase.git@development#egg=alphabase[stable,development-stable]\"\n\n\nDeveloper\nAlphaBase can also be installed in editable (i.e. developer) mode with a few bash commands. This allows to fully customize the software and even modify the source code to your specific needs. When an editable Python package is installed, its source code is stored in a transparent location of your choice. While optional, it is advised to first (create and) navigate to e.g. a general software folder:\nmkdir ~/folder/where/to/install/software\ncd ~/folder/where/to/install/software\nThe following commands assume you do not perform any additional cd commands anymore.\nNext, download the AlphaBase repository from GitHub either directly or with a git command. This creates a new AlphaBase subfolder in your current directory.\ngit clone https://github.com/MannLabs/alphabase.git\nFor any Python package, it is highly recommended to use a separate conda virtual environment, as otherwise dependancy conflicts can occur with already existing packages.\nconda create --name alphabase python=3.8 -y\nconda activate alphabase\nFinally, AlphaBase and all its dependancies need to be installed. To take advantage of all features and allow development (with the -e flag), this is best done by also installing the development dependencies instead of only the core dependencies:\npip install -e \"./alphabase[development]\"\nBy default this installs loose dependancies (no explicit versioning), although it is also possible to use stable dependencies (e.g. pip install -e \"./alphabase[stable,development-stable]\").\nBy using the editable flag -e, all modifications to the AlphaBase source code folder are directly reflected when running AlphaBase. Note that the AlphaBase folder cannot be moved and/or renamed if an editable version is installed. In case of confusion, you can always retrieve the location of any Python module with e.g. the command import module followed by module.__file__."
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "AlphaBase",
    "section": "Usage",
    "text": "Usage\nTODO"
  },
  {
    "objectID": "index.html#troubleshooting",
    "href": "index.html#troubleshooting",
    "title": "AlphaBase",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nIn case of issues, check out the following:\n\nIssues: Try a few different search terms to find out if a similar problem has been encountered before\nDiscussions: Check if your problem or feature requests has been discussed before."
  },
  {
    "objectID": "index.html#citations",
    "href": "index.html#citations",
    "title": "AlphaBase",
    "section": "Citations",
    "text": "Citations\nThere are currently no plans to draft a manuscript."
  },
  {
    "objectID": "index.html#how-to-contribute",
    "href": "index.html#how-to-contribute",
    "title": "AlphaBase",
    "section": "How to contribute",
    "text": "How to contribute\nIf you like this software, you can give us a star to boost our visibility! All direct contributions are also welcome. Feel free to post a new issue or clone the repository and create a pull request with a new branch. For an even more interactive participation, check out the discussions and the the Contributors License Agreement."
  },
  {
    "objectID": "index.html#changelog",
    "href": "index.html#changelog",
    "title": "AlphaBase",
    "section": "Changelog",
    "text": "Changelog\nSee the HISTORY.md for a full overview of the changes made in each version."
  }
]